[{"methodBody": ["METHOD_START", "{", "final   Matrix 4    transform    =     ( applyTransform )     ?    node . localTransform    :    Bullet . idt ;", "if    (  ( node . parts . size )     >     0  )     {", "Bullet . ShapePart   part    =    null ;", "for    ( int   i    =    offset ,    n    =    out . size ;    i    <    n ;    i +  +  )     {", "final   Bullet . ShapePart   p    =    out . get ( i )  ;", "if    ( Arrays . equals ( p . transform . val ,    transform . val )  )     {", "part    =    p ;", "break ;", "}", "}", "if    ( part    =  =    null )     {", "part    =    pool . obtain (  )  ;", "part . parts . clear (  )  ;", "part . transform . set ( transform )  ;", "out . add ( part )  ;", "}", "for    ( int   i    =     0  ,    n    =    node . parts . size ;    i    <    n ;    i +  +  )", "part . parts . add ( node . parts . get ( i )  . meshPart )  ;", "}", "if    ( node . hasChildren (  )  )     {", "final   boolean   transformed    =    applyTransform    &  &     (  !  ( Arrays . equals ( transform . val ,    Bullet . idt . val )  )  )  ;", "final   int   o    =     ( transformed )     ?    out . size    :    offset ;", "Bullet . getShapeParts ( node . getChildren (  )  ,    out ,    o ,    pool )  ;", "if    ( transformed )     {", "for    ( int   i    =    o ,    n    =    out . size ;    i    <    n ;    i +  +  )     {", "final   Bullet . ShapePart   part    =    out . get ( i )  ;", "Bullet . tmpM . set ( part . transform )  ;", "part . transform . set ( transform )  . mul ( Bullet . tmpM )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["getShapeParts"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "for    ( T   node    :    nodes )", "BgetShapeParts ( node ,    true ,    out ,    offset ,    pool )  ;", "}", "METHOD_END"], "methodName": ["getShapeParts"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "Bullet . init ( false )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "Bullet . init ( useRefCounting ,    true )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "Bullet . useRefCounting    =    useRefCounting ;", "Bullet . enableLogging    =    logging ;", "new   SharedLibraryLoader (  )  . load (  \" gdx - bullet \"  )  ;", "final   int   version    =    LinearMath . btGetVersion (  )  ;", "if    ( version    !  =     ( Bullet . VERSION )  )", "throw   new   utils . GdxRuntimeException (  (  (  (  (  \" Bullet   binaries   version    (  \"     +    version )     +     \"  )    does   not   match   source   version    (  \"  )     +     ( Bullet . VERSION )  )     +     \"  )  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["init"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "Bullet . getShapeParts ( node ,    applyTransform ,    Bullet . shapePartArray ,     0  ,    Bullet . shapePartPool )  ;", "btCollisionShape   result    =    Bullet . obtainStaticShape ( Bullet . shapePartArray )  ;", "Bullet . shapePartPool . freeAll ( Bullet . shapePartArray )  ;", "Bullet . shapePartArray . clear (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtainStaticNodeShape"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "Bullet . getShapeParts ( nodes ,    Bullet . shapePartArray ,     0  ,    Bullet . shapePartPool )  ;", "btCollisionShape   result    =    Bullet . obtainStaticShape ( Bullet . shapePartArray )  ;", "Bullet . shapePartPool . freeAll ( Bullet . shapePartArray )  ;", "Bullet . shapePartArray . clear (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtainStaticNodeShape"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "if    (  ( parts . size )     =  =     0  )", "return   null ;", "if    (  (  ( parts . size )     =  =     1  )     &  &     ( Arrays . equals ( parts . get (  0  )  . transform . val ,    Bidt . val )  )  )", "return   btBvhTriangleMeshShape . obtain ( parts . get (  0  )  . parts )  ;", "btCompoundShape   result    =    new   btCompoundShape (  )  ;", "result . obtain (  )  ;", "for    ( int   i    =     0  ,    n    =    parts . size ;    i    <    n ;    i +  +  )     {", "final   btBvhTriangleMeshShape   shape    =    btBvhTriangleMeshShape . obtain ( parts . get ( i )  . parts )  ;", "result . addChildShape ( parts . get ( i )  . transform ,    shape )  ;", "shape . release (  )  ;", "}", "return   result ;", "}", "METHOD_END"], "methodName": ["obtainStaticShape"], "fileName": "com.badlogic.gdx.physics.bullet.Bullet"}, {"methodBody": ["METHOD_START", "{", "destroyed    =    false ;", "}", "METHOD_END"], "methodName": ["construct"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "cPointer    =     0  ;", "}", "METHOD_END"], "methodName": ["delete"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "try    {", "if    (  ( destroyed )     &  &     ( BenableLogging )  )", "app . error (  \" B ,     (  \" Already   destroyed    \"     +     ( toString (  )  )  )  )  ;", "destroyed    =    true ;", "if    (  ( swigCMemOwn )     &  &     (  !  ( disposed )  )  )     {", "if    ( BenableLogging )", "app . error (  \" B ,     (  (  \" Disposing    \"     +     ( toString (  )  )  )     +     \"    due   to   garbage   collection .  \"  )  )  ;", "dispose (  )  ;", "}", "}    catch    ( Throwable   e )     {", "app . error (  \" B ,     (  \" Exception   while   destroying    \"     +     ( toString (  )  )  )  ,    e )  ;", "}", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "return   cPointer ;", "}", "METHOD_END"], "methodName": ["getCPointer"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "return   swigCMemOwn ;", "}", "METHOD_END"], "methodName": ["hasOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "return   disposed ;", "}", "METHOD_END"], "methodName": ["isDisposed"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "return    ( refCount )     >     0  ;", "}", "METHOD_END"], "methodName": ["isObtained"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "( refCount )  +  +  ;", "}", "METHOD_END"], "methodName": ["obtain"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "if    (  (  (  -  -  ( refCount )  )     <  =     0  )     &  &     ( Bullet . useRefCounting )  )", "dispose (  )  ;", "}", "METHOD_END"], "methodName": ["release"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "}", "METHOD_END"], "methodName": ["releaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "if    (  !  ( destroyed )  )", "destroy (  )  ;", "swigCMemOwn    =    cMemoryOwn ;", "cPointer    =    cPtr ;", "nstruct (  )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "}", "METHOD_END"], "methodName": ["takeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBase"}, {"methodBody": ["METHOD_START", "{", "new   NativeCodeGenerator (  )  . generate (  \" src \"  ,     \" bin \"  ,     \" jni \"  )  ;", "String   cppFlags    =     \"  \"  ;", "cppFlags    +  =     \"     - fno - strict - aliasing \"  ;", "cppFlags    +  =     \"     - fno - rtti \"  ;", "cppFlags    +  =     \"     - DBT _ NO _ PROFILE \"  ;", "cppFlags    +  =     \"     - DBT _ USE _ INVERSE _ DYNAMICS _ WITH _ BULLET 2  \"  ;", "String [  ]    excludes    =    new   String [  ]  {     \" src /  / BulletMultiThreaded / GpuSoftBodySolvers /  *  *  \"     }  ;", "String [  ]    headers    =    new   String [  ]  {     \" src /  /  \"  ,     \" src / custom /  \"  ,     \" src / extras / Serialize /  \"  ,     \" src / extras /  \"     }  ;", "BuildTarget   win 3  2 home    =    BuildTarget . newDefaultTarget ( Windows ,    false )  ;", "win 3  2 home . compilerPrefix    =     \"  \"  ;", "win 3  2 home . buildFileName    =     \" build - windows 3  2 home . xml \"  ;", "win 3  2 home . excludeFromMasterBuildFile    =    true ;", "win 3  2 home . cExcludes    =    win 3  2 home . cppExcludes    =    excludes ;", "win 3  2 home . headerDirs    =    headers ;", "win 3  2 home . cppFlags    +  =    cppFlags ;", "BuildTarget   win 3  2     =    BuildTarget . newDefaultTarget ( Windows ,    false )  ;", "win 3  2  . cExcludes    =    win 3  2  . cppExcludes    =    excludes ;", "win 3  2  . headerDirs    =    headers ;", "win 3  2  . cppFlags    +  =    cppFlags ;", "BuildTarget   win 6  4     =    BuildTarget . newDefaultTarget ( Windows ,    true )  ;", "win 6  4  . cExcludes    =    win 6  4  . cppExcludes    =    excludes ;", "win 6  4  . headerDirs    =    headers ;", "win 6  4  . cppFlags    +  =    cppFlags ;", "BuildTarget   lin 3  2     =    BuildTarget . newDefaultTarget ( Linux ,    false )  ;", "lin 3  2  . cExcludes    =    lin 3  2  . cppExcludes    =    excludes ;", "lin 3  2  . headerDirs    =    headers ;", "lin 3  2  . cppFlags    +  =    cppFlags ;", "BuildTarget   lin 6  4     =    BuildTarget . newDefaultTarget ( Linux ,    true )  ;", "lin 6  4  . cExcludes    =    lin 6  4  . cppExcludes    =    excludes ;", "lin 6  4  . headerDirs    =    headers ;", "lin 6  4  . cppFlags    +  =    cppFlags ;", "BuildTarget   mac    =    BuildTarget . newDefaultTarget ( MacOsX ,    false )  ;", "mac . cExcludes    =    mac . cppExcludes    =    excludes ;", "mac . headerDirs    =    headers ;", "mac . cppFlags    +  =    cppFlags ;", "BuildTarget   mac 6  4     =    BuildTarget . newDefaultTarget ( MacOsX ,    true )  ;", "mac 6  4  . cExcludes    =    mac . cppExcludes    =    excludes ;", "mac 6  4  . headerDirs    =    headers ;", "mac 6  4  . cppFlags    +  =    cppFlags ;", "BuildTarget   android    =    BuildTarget . newDefaultTarget ( Android ,    false )  ;", "android . cExcludes    =    android . cppExcludes    =    excludes ;", "android . headerDirs    =    headers ;", "android . cppFlags    +  =    cppFlags    +     \"     - fexceptions \"  ;", "BuildTarget   ios    =    BuildTarget . newDefaultTarget ( IOS ,    false )  ;", "ios . cExcludes    =    ios . cppExcludes    =    excludes ;", "ios . headerDirs    =    headers ;", "ios . cppFlags    +  =    cppFlags ;", "ios . cppFlags    +  =     \"     - stdlib = libc +  +  \"  ;", "new   AntScriptGenerator (  )  . generate ( new   BuildConfig (  \" gdx -  \"  )  ,    win 3  2 home ,    win 3  2  ,    win 6  4  ,    lin 3  2  ,    lin 6  4  ,    mac ,    mac 6  4  ,    android ,    ios )  ;", "new   FileHandle ( new   File (  \" jni / Application . mk \"  )  )  . writeString (  \"  \\ nAPP _ STL    :  =    stlport _ static \\ n \"  ,    true )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.badlogic.gdx.physics.bullet.BulletBuild"}, {"methodBody": ["METHOD_START", "{", "this . camera    =    camera ;", "shapeRenderer . setProjectionMatrix ( camera . bined )  ;", "shapeRenderer . begin ( Line )  ;", "}", "METHOD_END"], "methodName": ["begin"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "this . viewport    =    viewport ;", "begin ( viewport . getCamera (  )  )  ;", "}", "METHOD_END"], "methodName": ["begin"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "shapeRenderer . end (  )  ;", "}", "METHOD_END"], "methodName": ["end"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "return   font ;", "}", "METHOD_END"], "methodName": ["getFont"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "return   shapeRenderer ;", "}", "METHOD_END"], "methodName": ["getShapeRenderer"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "return   spriteBatch ;", "}", "METHOD_END"], "methodName": ["getSpriteBatch"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ownsFont )     &  &     (  ( this . font )     !  =    null )  )     {", "this . font . dispose (  )  ;", "}", "this . font    =    font ;", "ownsFont    =    false ;", "}", "METHOD_END"], "methodName": ["setFont"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "if    ( ownsShapeRenderer )     {", "this . shapeRenderer . dispose (  )  ;", "}", "this . shapeRenderer    =    shapeRenderer ;", "ownsShapeRenderer    =    false ;", "}", "METHOD_END"], "methodName": ["setShapeRenderer"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "if    (  ( ownsSpriteBatch )     &  &     (  ( this . spriteBatch )     !  =    null )  )     {", "this . spriteBatch . dispose (  )  ;", "}", "this . spriteBatch    =    spriteBatch ;", "ownsSpriteBatch    =    false ;", "}", "METHOD_END"], "methodName": ["setSpriteBatch"], "fileName": "com.badlogic.gdx.physics.bullet.DebugDrawer"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( AllHitsRayResultCallback . class )     ?    CollisionJNI . AllHitsRayResultCallback _ addSingleResult ( swigCPtr ,    this ,    LocalRayResult . getCPtr ( rayResult )  ,    rayResult ,    normalInWorldSpace )     :    CollisionJNI . AllHitsRayResultCallback _ addSingleResultSwigExplicitAllHitsRayResultCallback ( swigCPtr ,    this ,    LocalRayResult . getCPtr ( rayResult )  ,    rayResult ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . AllHitsRayResultCallback _ collisionObjects _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectConstArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjects"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . AllHitsRayResultCallback _ hitFractions _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHitFractions"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . AllHitsRayResultCallback _ hitNormalWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHitNormalWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . AllHitsRayResultCallback _ hitPointWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHitPointWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ getRayFromWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getRayFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ getRayToWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getRayToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ collisionObjects _ set ( swigCPtr ,    this ,    btCollisionObjectConstArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObjects"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ hitFractions _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitFractions"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ hitNormalWorld _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitNormalWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ hitPointWorld _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitPointWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ setRayFromWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRayFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . AllHitsRayResultCallback _ setRayToWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRayToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.AllHitsRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ calc _ absolute _ matrix ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calc_absolute_matrix"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ calc _ from _ full _ invert ( swigCPtr ,    this ,    trans 0  ,    trans 1  )  ;", "}", "METHOD_END"], "methodName": ["calc_from_full_invert"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ calc _ from _ homogenic ( swigCPtr ,    this ,    trans 0  ,    trans 1  )  ;", "}", "METHOD_END"], "methodName": ["calc_from_homogenic"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ AR _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAR"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ R 1 to 0  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getR1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ T 1 to 0  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getT1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ AR _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAR"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ R 1 to 0  _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setR1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ T 1 to 0  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setT1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ BOX _ BOX _ TRANSFORM _ CACHE _ transform ( swigCPtr ,    this ,    point )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ getDataIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDataIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ getEscapeIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ escapeIndexOrDataIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndexOrDataIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ quantizedAabbMax _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ quantizedAabbMin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ isLeafNode ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isLeafNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ setDataIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setDataIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ setEscapeIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ escapeIndexOrDataIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndexOrDataIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ quantizedAabbMax _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . BT _ QUANTIZED _ BVH _ NODE _ quantizedAabbMin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "assert   quantizedMin . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   quantizedMax . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   CollisionJNI _ testQuantizedBoxOverlapp ( swigCPtr ,    this ,    quantizedMin ,    quantizedMax )  ;", "}", "}", "METHOD_END"], "methodName": ["testQuantizedBoxOverlapp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.BT_QUANTIZED_BVH_NODE"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( ClosestConvexResultCallback . class )     ?    CollisionJNI . ClosestConvexResultCallback _ addSingleResult ( swigCPtr ,    this ,    LocalConvexResult . getCPtr ( convexResult )  ,    convexResult ,    normalInWorldSpace )     :    CollisionJNI . ClosestConvexResultCallback _ addSingleResultSwigExplicitClosestConvexResultCallback ( swigCPtr ,    this ,    LocalConvexResult . getCPtr ( convexResult )  ,    convexResult ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . ClosestConvexResultCallback _ convexFromWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ getConvexFromWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getConvexFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . ClosestConvexResultCallback _ convexToWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ getConvexToWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getConvexToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . ClosestConvexResultCallback _ hitCollisionObject _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHitCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ getHitNormalWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getHitNormalWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ getHitPointWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getHitPointWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ convexFromWorld _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ setConvexToWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ convexToWorld _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ hitCollisionObject _ set ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ setHitNormalWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitNormalWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ setHitPointWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitPointWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestConvexResultCallback _ setRayFromWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRayFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ClosestNotMeConvexResultCallback _ allowedPenetration _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAllowedPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestNotMeConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestNotMeConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . ClosestNotMeConvexResultCallback _ me _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMe"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestNotMeConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ClosestNotMeConvexResultCallback _ needsCollision ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  )  ;", "}", "METHOD_END"], "methodName": ["needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestNotMeConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestNotMeConvexResultCallback _ allowedPenetration _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAllowedPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestNotMeConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestNotMeConvexResultCallback _ me _ set ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMe"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestNotMeConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestNotMeRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( ClosestRayResultCallback . class )     ?    CollisionJNI . ClosestRayResultCallback _ addSingleResult ( swigCPtr ,    this ,    LocalRayResult . getCPtr ( rayResult )  ,    rayResult ,    normalInWorldSpace )     :    CollisionJNI . ClosestRayResultCallback _ addSingleResultSwigExplicitClosestRayResultCallback ( swigCPtr ,    this ,    LocalRayResult . getCPtr ( rayResult )  ,    rayResult ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ getHitNormalWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getHitNormalWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ getHitPointWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getHitPointWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ getRayFromWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getRayFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ getRayToWorld ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getRayToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ setHitNormalWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitNormalWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ setHitPointWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitPointWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ setRayFromWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRayFromWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ClosestRayResultCallback _ setRayToWorld ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRayToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ClosestRayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . Intersect _  _ SWIG _  1  ( btDbvtAabbMm . getCPtr ( a )  ,    a ,    b )  ;", "}", "METHOD_END"], "methodName": ["Intersect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . Intersect _  _ SWIG _  0  ( btDbvtAabbMm . getCPtr ( a )  ,    a ,    btDbvtAabbMm . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["Intersect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . Merge ( btDbvtAabbMm . getCPtr ( a )  ,    a ,    btDbvtAabbMm . getCPtr ( b )  ,    b ,    btDbvtAabbMm . getCPtr ( r )  ,    r )  ;", "}", "METHOD_END"], "methodName": ["Merge"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . NotEqual ( btDbvtAabbMm . getCPtr ( a )  ,    a ,    btDbvtAabbMm . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["NotEqual"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . Proximity ( btDbvtAabbMm . getCPtr ( a )  ,    a ,    btDbvtAabbMm . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["Proximity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . Select ( btDbvtAabbMm . getCPtr ( o )  ,    o ,    btDbvtAabbMm . getCPtr ( a )  ,    a ,    btDbvtAabbMm . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["Select"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI .  _ btMprVec 3 PointSegmentDist 2  ( btVector 3  . getCPtr ( P )  ,    P ,    btVector 3  . getCPtr ( x 0  )  ,    x 0  ,    btVector 3  . getCPtr ( b )  ,    b ,    btVector 3  . getCPtr ( witness )  ,    witness )  ;", "}", "METHOD_END"], "methodName": ["_btMprVec3PointSegmentDist2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAdjustInternalEdgeContacts _  _ SWIG _  1  ( btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObjectWrapper . getCPtr ( trimeshColObj 0 Wrap )  ,    trimeshColObj 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( otherColObj 1 Wrap )  ,    otherColObj 1 Wrap ,    partId 0  ,    index 0  )  ;", "}", "METHOD_END"], "methodName": ["btAdjustInternalEdgeContacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAdjustInternalEdgeContacts _  _ SWIG _  0  ( btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObjectWrapper . getCPtr ( trimeshColObj 0 Wrap )  ,    trimeshColObj 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( otherColObj 1 Wrap )  ,    otherColObj 1 Wrap ,    partId 0  ,    index 0  ,    normalAdjustFlags )  ;", "}", "METHOD_END"], "methodName": ["btAdjustInternalEdgeContacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompareTransformsEqual ( t 1  ,    t 2  )  ;", "}", "METHOD_END"], "methodName": ["btCompareTransformsEqual"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCreateCompoundFromGimpactShape ( btGImpactMeshShape . getCPtr ( gimpactMesh )  ,    gimpactMesh ,    depth )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCompoundShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btCreateCompoundFromGimpactShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btExpandPortal (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,     _ btMprSupport _ t . getCPtr ( v 4  )  ,    v 4  )  ;", "}", "METHOD_END"], "methodName": ["btExpandPortal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "assert   depth . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "JNI . btFindPenetrSegment (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,    depth ,    btVector 3  . getCPtr ( dir )  ,    dir ,    btVector 3  . getCPtr ( pos )  ,    pos )  ;", "}", "}", "METHOD_END"], "methodName": ["btFindPenetrSegment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "assert   depth . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "JNI . btFindPenetrTouch (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,    depth ,    btVector 3  . getCPtr ( dir )  ,    dir ,    btVector 3  . getCPtr ( pos )  ,    pos )  ;", "}", "}", "METHOD_END"], "methodName": ["btFindPenetrTouch"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btFindPos (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,    btVector 3  . getCPtr ( pos )  ,    pos )  ;", "}", "METHOD_END"], "methodName": ["btFindPos"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenerateInternalEdgeInfo ( btBvhTriangleMeshShape . getCPtr ( trimeshShape )  ,    trimeshShape ,    btTriangleInfoMap . getCPtr ( triangleInfoMap )  ,    triangleInfoMap )  ;", "}", "METHOD_END"], "methodName": ["btGenerateInternalEdgeInfo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprEq (  _ a ,     _ b )  ;", "}", "METHOD_END"], "methodName": ["btMprEq"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprIsZero ( val )  ;", "}", "METHOD_END"], "methodName": ["btMprIsZero"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMprSimplexPoint (  _ btMprSimplex _ t . getCPtr ( s )  ,    s ,    idx )  ;", "return   cPtr    =  =     0     ?    null    :    new    _ btMprSupport _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btMprSimplexPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMprSimplexPointW (  _ btMprSimplex _ t . getCPtr ( s )  ,    s ,    idx )  ;", "return   cPtr    =  =     0     ?    null    :    new    _ btMprSupport _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btMprSimplexPointW"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprSimplexSet (  _ btMprSimplex _ t . getCPtr ( s )  ,    s ,    pos ,     _ btMprSupport _ t . getCPtr ( a )  ,    a )  ;", "}", "METHOD_END"], "methodName": ["btMprSimplexSet"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprSimplexSetSize (  _ btMprSimplex _ t . getCPtr ( s )  ,    s ,    size )  ;", "}", "METHOD_END"], "methodName": ["btMprSimplexSetSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprSimplexSize (  _ btMprSimplex _ t . getCPtr ( s )  ,    s )  ;", "}", "METHOD_END"], "methodName": ["btMprSimplexSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprSimplexSwap (  _ btMprSimplex _ t . getCPtr ( s )  ,    s ,    pos 1  ,    pos 2  )  ;", "}", "METHOD_END"], "methodName": ["btMprSimplexSwap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprSupportCopy (  _ btMprSupport _ t . getCPtr ( d )  ,    d ,     _ btMprSupport _ t . getCPtr ( s )  ,    s )  ;", "}", "METHOD_END"], "methodName": ["btMprSupportCopy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprVec 3 Add ( btVector 3  . getCPtr ( v )  ,    v ,    btVector 3  . getCPtr ( w )  ,    w )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Add"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprVec 3 Copy ( btVector 3  . getCPtr ( v )  ,    v ,    btVector 3  . getCPtr ( w )  ,    w )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Copy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprVec 3 Cross ( btVector 3  . getCPtr ( d )  ,    d ,    btVector 3  . getCPtr ( a )  ,    a ,    btVector 3  . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Cross"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprVec 3 Dist 2  ( btVector 3  . getCPtr ( a )  ,    a ,    btVector 3  . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Dist2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprVec 3 Dot ( btVector 3  . getCPtr ( a )  ,    a ,    btVector 3  . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Dot"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprVec 3 Eq ( btVector 3  . getCPtr ( a )  ,    a ,    btVector 3  . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Eq"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprVec 3 Len 2  ( btVector 3  . getCPtr ( v )  ,    v )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Len2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprVec 3 Normalize ( btVector 3  . getCPtr ( d )  ,    d )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Normalize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprVec 3 PointTriDist 2  ( btVector 3  . getCPtr ( P )  ,    P ,    btVector 3  . getCPtr ( x 0  )  ,    x 0  ,    btVector 3  . getCPtr ( B )  ,    B ,    btVector 3  . getCPtr ( C )  ,    C ,    btVector 3  . getCPtr ( witness )  ,    witness )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3PointTriDist2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprVec 3 Scale ( btVector 3  . getCPtr ( d )  ,    d ,    k )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Scale"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprVec 3 Set ( btVector 3  . getCPtr ( v )  ,    v ,    x ,    y ,    z )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprVec 3 Sub 2  ( btVector 3  . getCPtr ( d )  ,    d ,    btVector 3  . getCPtr ( v )  ,    v ,    btVector 3  . getCPtr ( w )  ,    w )  ;", "}", "METHOD_END"], "methodName": ["btMprVec3Sub2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPoolAlloc ( size )  ;", "}", "METHOD_END"], "methodName": ["btPoolAlloc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPoolFree ( ptr )  ;", "}", "METHOD_END"], "methodName": ["btPoolFree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPoolRealloc ( ptr ,    oldsize ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["btPoolRealloc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPortalDir (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,    btVector 3  . getCPtr ( dir )  ,    dir )  ;", "}", "METHOD_END"], "methodName": ["btPortalDir"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . bt _ calc _ quantization _ parameters ( outMinBound ,    outMaxBound ,    bvhQuantization ,    srcMinBound ,    srcMaxBound ,    quantizationMargin )  ;", "}", "METHOD_END"], "methodName": ["bt_calc_quantization_parameters"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . bt _ closest _ point _ on _ segment ( cp ,    v ,    e 1  ,    e 2  )  ;", "}", "METHOD_END"], "methodName": ["bt_closest_point_on_segment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . bt _ distance _ point _ plane ( btVector 4  . getCPtr ( plane )  ,    plane ,    point )  ;", "}", "METHOD_END"], "methodName": ["bt_distance_point_plane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . bt _ edge _ plane ( e 1  ,    e 2  ,    normal ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["bt_edge_plane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . bt _ line _ plane _ collision ( btVector 4  . getCPtr ( plane )  ,    plane ,    vDir ,    vPoint ,    pout ,    SWIGTYPE _ p _ float . getCPtr ( tparam )  ,    tmin ,    tmax )  ;", "}", "METHOD_END"], "methodName": ["bt_line_plane_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . bt _ mat 3  _ dot _ col ( mat ,    vec 3  ,    colindex )  ;", "}", "METHOD_END"], "methodName": ["bt_mat3_dot_col"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . bt _ plane _ clip _ polygon ( btVector 4  . getCPtr ( plane )  ,    plane ,    btVector 3  . getCPtr ( polygon _ points )  ,    polygon _ points ,    polygon _ point _ count ,    btVector 3  . getCPtr ( clipped )  ,    clipped )  ;", "}", "METHOD_END"], "methodName": ["bt_plane_clip_polygon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . bt _ plane _ clip _ polygon _ collect ( point 0  ,    point 1  ,    dist 0  ,    dist 1  ,    btVector 3  . getCPtr ( clipped )  ,    clipped ,    SWIGTYPE _ p _ int . getCPtr ( clipped _ count )  )  ;", "}", "METHOD_END"], "methodName": ["bt_plane_clip_polygon_collect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . bt _ plane _ clip _ triangle ( btVector 4  . getCPtr ( plane )  ,    plane ,    point 0  ,    point 1  ,    point 2  ,    btVector 3  . getCPtr ( clipped )  ,    clipped )  ;", "}", "METHOD_END"], "methodName": ["bt_plane_clip_triangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "assert   out . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "JNI . bt _ quantize _ clamp ( out ,    point ,    min _ bound ,    max _ bound ,    bvhQuantization )  ;", "}", "}", "METHOD_END"], "methodName": ["bt_quantize_clamp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . bt _ segment _ collision ( vA 1  ,    vA 2  ,    vB 1  ,    vB 2  ,    vPointA ,    vPointB )  ;", "}", "METHOD_END"], "methodName": ["bt_segment_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "assert   vecIn . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   JNI . bt _ unquantize ( vecIn ,    offset ,    bvhQuantization )  ;", "}", "}", "METHOD_END"], "methodName": ["bt_unquantize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . bt _ vec _ blend ( vr ,    va ,    vb ,    blend _ factor )  ;", "}", "METHOD_END"], "methodName": ["bt_vec_blend"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gdxCheckFilter _  _ SWIG _  1  ( btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  )  ;", "}", "METHOD_END"], "methodName": ["gdxCheckFilter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gdxCheckFilter _  _ SWIG _  0  ( filter ,    flag )  ;", "}", "METHOD_END"], "methodName": ["gdxCheckFilter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ NULL _ PAIR _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getBT_NULL_PAIR"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . BT _ SIMPLE _ NULL _ PAIR _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getBT_SIMPLE_NULL_PAIR"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gAddedPairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGAddedPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gAddedSimplePairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGAddedSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gCompoundChildShapePairCallback _ get (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ p _ q _ const _  _ btCollisionShape _ p _ q _ const _  _ btCollisionShape _  _ bool ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGCompoundChildShapePairCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gContactAddedCallback _ get (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ r _ btManifoldPoint _ p _ q _ const _  _ btCollisionObjectWrapper _ int _ int _ p _ q _ const _  _ btCollisionObjectWrapper _ int _ int _  _ bool ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGContactAddedCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gContactBreakingThreshold _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGContactBreakingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gFindPairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGFindPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gFindSimplePairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGFindSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gOverlappingPairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gOverlappingSimplePairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGOverlappingSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gRemovePairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGRemovePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gRemoveSimplePairs _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGRemoveSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ prime _ list _ get (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ GUINT ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGim_prime_list"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ alloc ( size )  ;", "}", "METHOD_END"], "methodName": ["gim_alloc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ alloca ( size )  ;", "}", "METHOD_END"], "methodName": ["gim_alloca"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ free ( ptr )  ;", "}", "METHOD_END"], "methodName": ["gim_free"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ get _ alloc _ handler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ size _ t _  _ p _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["gim_get_alloc_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ get _ alloca _ handler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ size _ t _  _ p _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["gim_get_alloca_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ get _ free _ handler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ p _ void _  _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["gim_get_free_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ get _ point _ inertia ( point ,    mass )  ;", "}", "METHOD_END"], "methodName": ["gim_get_point_inertia"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ get _ realloc _ handler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ p _ void _ size _ t _ size _ t _  _ p _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["gim_get_realloc_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ inertia _ add _ transformed ( source _ inertia ,    added _ inertia ,    transform )  ;", "}", "METHOD_END"], "methodName": ["gim_inertia_add_transformed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ inv _ sqrt ( f )  ;", "}", "METHOD_END"], "methodName": ["gim_inv_sqrt"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ GUINT ( CollisionJNI . gim _ next _ prime ( SWIGTYPE _ p _ GUINT . getCPtr ( number )  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["gim_next_prime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ radix _ sort _ rtokens ( GIM _ RSORT _ TOKEN . getCPtr ( array )  ,    array ,    GIM _ RSORT _ TOKEN . getCPtr ( sorted )  ,    sorted ,    element _ count )  ;", "}", "METHOD_END"], "methodName": ["gim_radix_sort_rtokens"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ realloc ( ptr ,    oldsize ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["gim_realloc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ set _ alloc _ handler ( SWIGTYPE _ p _ f _ size _ t _  _ p _ void . getCPtr ( fn )  )  ;", "}", "METHOD_END"], "methodName": ["gim_set_alloc_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ set _ alloca _ handler ( SWIGTYPE _ p _ f _ size _ t _  _ p _ void . getCPtr ( fn )  )  ;", "}", "METHOD_END"], "methodName": ["gim_set_alloca_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ set _ free _ handler ( SWIGTYPE _ p _ f _ p _ void _  _ void . getCPtr ( fn )  )  ;", "}", "METHOD_END"], "methodName": ["gim_set_free_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ set _ realloc _ handler ( SWIGTYPE _ p _ f _ p _ void _ size _ t _ size _ t _  _ p _ void . getCPtr ( fn )  )  ;", "}", "METHOD_END"], "methodName": ["gim_set_realloc_handler"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ simd _ memcpy ( dst ,    src ,    copysize )  ;", "}", "METHOD_END"], "methodName": ["gim_simd_memcpy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ sqrt ( f )  ;", "}", "METHOD_END"], "methodName": ["gim_sqrt"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . operatorEqualTo _  _ SWIG _  3  ( a ,    b )  ;", "}", "METHOD_END"], "methodName": ["operatorEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . operatorEqualTo _  _ SWIG _  4  ( btCompoundShapeChild . getCPtr ( c 1  )  ,    c 1  ,    btCompoundShapeChild . getCPtr ( c 2  )  ,    c 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . portalCanEncapsuleOrigin (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,     _ btMprSupport _ t . getCPtr ( v 4  )  ,    v 4  ,    btVector 3  . getCPtr ( dir )  ,    dir )  ;", "}", "METHOD_END"], "methodName": ["portalCanEncapsuleOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . portalEncapsulesOrigin (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,    btVector 3  . getCPtr ( dir )  ,    dir )  ;", "}", "METHOD_END"], "methodName": ["portalEncapsulesOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . portalReachTolerance (  _ btMprSimplex _ t . getCPtr ( portal )  ,    portal ,     _ btMprSupport _ t . getCPtr ( v 4  )  ,    v 4  ,    btVector 3  . getCPtr ( dir )  ,    dir )  ;", "}", "METHOD_END"], "methodName": ["portalReachTolerance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gAddedPairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGAddedPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gAddedSimplePairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGAddedSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gCompoundChildShapePairCallback _ set ( SWIGTYPE _ p _ f _ p _ q _ const _  _ btCollisionShape _ p _ q _ const _  _ btCollisionShape _  _ bool . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setGCompoundChildShapePairCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gContactAddedCallback _ set ( SWIGTYPE _ p _ f _ r _ btManifoldPoint _ p _ q _ const _  _ btCollisionObjectWrapper _ int _ int _ p _ q _ const _  _ btCollisionObjectWrapper _ int _ int _  _ bool . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setGContactAddedCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gContactBreakingThreshold _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGContactBreakingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gFindPairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGFindPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gFindSimplePairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGFindSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gOverlappingPairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gOverlappingSimplePairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGOverlappingSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gRemovePairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGRemovePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gRemoveSimplePairs _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGRemoveSimplePairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.Collision"}, {"methodBody": ["METHOD_START", "{", "return   jself . addSingleResult ( new   LocalRayResult ( rayResult ,    false )  ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_AllHitsRayResultCallback_addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsCollision (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_AllHitsRayResultCallback_needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . addSingleResult ( new   LocalConvexResult ( convexResult ,    false )  ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ClosestConvexResultCallback_addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsCollision (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ClosestConvexResultCallback_needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . addSingleResult ( new   LocalRayResult ( rayResult ,    false )  ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ClosestRayResultCallback_addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsCollision (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ClosestRayResultCallback_needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactEnded ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    match 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactCache_onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactStarted (  ( manifold    =  =     0     ?    null    :    new   btPersistentManifold ( manifold ,    false )  )  ,    match 0  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactCache_onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 0 Wrap ,    false )  ,    partId 0  ,    index 0  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 1 Wrap ,    false )  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    btCollisionObject . getInstance ( colObj 0  ,    false )  ,    partId 0  ,    index 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_10"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( userValue 0  ,    partId 0  ,    index 0  ,    match 0  ,    userValue 1  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_11"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    userValue 0  ,    partId 0  ,    index 0  ,    userValue 1  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 0 Wrap ,    false )  ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 1 Wrap ,    false )  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    btCollisionObject . getInstance ( colObj 0  ,    false )  ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_4"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    userValue 0  ,    partId 0  ,    index 0  ,    match 0  ,    userValue 1  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_5"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btCollisionObjectWrapper . obtainForArgument ( colObj 0 Wrap ,    false )  ,    partId 0  ,    index 0  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 1 Wrap ,    false )  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_6"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    partId 0  ,    index 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_7"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( userValue 0  ,    partId 0  ,    index 0  ,    userValue 1  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_8"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . onContactAdded ( btCollisionObjectWrapper . obtainForArgument ( colObj 0 Wrap ,    false )  ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 1 Wrap ,    false )  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactAdded__SWIG_9"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactDestroyed ( manifoldPointUserValue )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactDestroyed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactEnded (  ( manifold    =  =     0     ?    null    :    new   btPersistentManifold ( manifold ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactEnded__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactEnded ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactEnded__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactEnded ( userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactEnded__SWIG_2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactEnded (  ( manifold    =  =     0     ?    null    :    new   btPersistentManifold ( manifold ,    false )  )  ,    match 0  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactEnded__SWIG_3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactEnded ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    match 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactEnded__SWIG_4"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactEnded ( userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactEnded__SWIG_5"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    btCollisionObject . getInstance ( colObj 0  ,    false )  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    btCollisionObject . getInstance ( colObj 0  ,    false )  ,    match 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( btManifoldPoint . obtainForArgument ( cp ,    false )  ,    userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_4"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_5"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    match 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_6"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactProcessed ( userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactProcessed__SWIG_7"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactStarted (  ( manifold    =  =     0     ?    null    :    new   btPersistentManifold ( manifold ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactStarted__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactStarted ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactStarted__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactStarted ( userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactStarted__SWIG_2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactStarted (  ( manifold    =  =     0     ?    null    :    new   btPersistentManifold ( manifold ,    false )  )  ,    match 0  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactStarted__SWIG_3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactStarted ( btCollisionObject . getInstance ( colObj 0  ,    false )  ,    match 0  ,    btCollisionObject . getInstance ( colObj 1  ,    false )  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactStarted__SWIG_4"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onContactStarted ( userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactListener_onContactStarted__SWIG_5"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . addSingleResult ( new   btManifoldPoint ( cp ,    false )  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 0 Wrap ,    false )  ,    partId 0  ,    index 0  ,    btCollisionObjectWrapper . obtainForArgument ( colObj 1 Wrap ,    false )  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactResultCallback_addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsCollision (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ContactResultCallback_needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . addSingleResult ( new   LocalConvexResult ( convexResult ,    false )  ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ConvexResultCallback_addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsCollision (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ConvexResultCallback_needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsCollision ( btCollisionObject . getInstance ( body 0  ,    false )  ,    btCollisionObject . getInstance ( body 1  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_CustomCollisionDispatcher_needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsResponse ( btCollisionObject . getInstance ( body 0  ,    false )  ,    btCollisionObject . getInstance ( body 1  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_CustomCollisionDispatcher_needsResponse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . AllLeaves ( btDbvtNode . obtainForArgument ( arg 0  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ICollide_AllLeaves"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . Descent ( btDbvtNode . obtainForArgument ( arg 0  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ICollide_Descent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . Process ( btDbvtNode . obtainForArgument ( arg 0  ,    false )  ,    btDbvtNode . obtainForArgument ( arg 1  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ICollide_Process__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . Process ( btDbvtNode . obtainForArgument ( arg 0  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ICollide_Process__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . Process ( btDbvtNode . obtainForArgument ( n ,    false )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_ICollide_Process__SWIG_2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . addSingleResult ( new   LocalRayResult ( rayResult ,    false )  ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_RayResultCallback_addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needsCollision (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_RayResultCallback_needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . process (  ( proxy    =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBroadphaseAabbCallback_process"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . process (  ( proxy    =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBroadphaseRayCallback_process"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . processTriangle (  ( triangle    =  =     0     ?    null    :    new   btVector 3  ( triangle ,    false )  )  ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btConvexTriangleCallback_processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . removeOverlappingPair (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  ,     ( proxy 1     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 1  ,    false )  )  ,     ( dispatcher    =  =     0     ?    null    :    new   btDispatcher ( dispatcher ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btGhostPairCallback_removeOverlappingPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . removeOverlappingPairsContainingProxy (  ( arg 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( arg 0  ,    false )  )  ,     ( arg 1     =  =     0     ?    null    :    new   btDispatcher ( arg 1  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btGhostPairCallback_removeOverlappingPairsContainingProxy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . internalProcessTriangleIndex (  ( triangle    =  =     0     ?    null    :    new   btVector 3  ( triangle ,    false )  )  ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btInternalTriangleIndexCallback_internalProcessTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . processNode ( subPart ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btNodeOverlapCallback_processNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . processOverlap ( pair )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btOverlapCallback_processOverlap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . needBroadphaseCollision (  ( proxy 0     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 0  ,    false )  )  ,     ( proxy 1     =  =     0     ?    null    :    new   btBroadphaseProxy ( proxy 1  ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btOverlapFilterCallback_needBroadphaseCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . processTriangle (  ( triangle    =  =     0     ?    null    :    new   btVector 3  ( triangle ,    false )  )  ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btTriangleCallback_processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . processTriangle (  ( triangle    =  =     0     ?    null    :    new   btVector 3  ( triangle ,    false )  )  ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btTriangleConvexcastCallback_processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . reportHit ( hitNormalLocal ,    hitPointLocal ,    hitFraction ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btTriangleConvexcastCallback_reportHit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "jself . processTriangle (  ( triangle    =  =     0     ?    null    :    new   btVector 3  ( triangle ,    false )  )  ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btTriangleRaycastCallback_processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . reportHit ( hitNormalLocal ,    hitFraction ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btTriangleRaycastCallback_reportHit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionJNI"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObjectWrapper . internalTemp ( CollisionJNI . CollisionObjectWrapper _ getWrapper ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWrapper"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactCache _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactCache _ disable ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["disable"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactCache _ enable ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["enable"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactCache _ cacheTime _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCacheTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactCache _ isEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactCache _ onContactEnded ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    match 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactCache _ onContactStarted ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifold )  ,    manifold ,    match 0  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactCache _ cacheTime _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCacheTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactCache _ update ( swigCPtr ,    this ,    delta )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ disable ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["disable"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ disableOnAdded ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["disableOnAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ disableOnDestroyed ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["disableOnDestroyed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ disableOnEnded ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["disableOnEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ disableOnProcessed ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["disableOnProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ disableOnStarted ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["disableOnStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ enable ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["enable"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ enableOnAdded ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["enableOnAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ enableOnDestroyed ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["enableOnDestroyed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ enableOnEnded ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["enableOnEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ enableOnProcessed ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["enableOnProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ enableOnStarted ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["enableOnStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ isOnAddedEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isOnAddedEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ isOnDestroyedEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isOnDestroyedEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ isOnEndedEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isOnEndedEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ isOnProcessedEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isOnProcessedEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ isOnStartedEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isOnStartedEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  1  0  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  7  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    partId 0  ,    index 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  9  ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( colObj 0 Wrap )  ,    colObj 0 Wrap ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObjectWrapper . getCPtr ( colObj 1 Wrap )  ,    colObj 1 Wrap ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  6  ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( colObj 0 Wrap )  ,    colObj 0 Wrap ,    partId 0  ,    index 0  ,    btCollisionObjectWrapper . getCPtr ( colObj 1 Wrap )  ,    colObj 1 Wrap ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  4  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  1  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    partId 0  ,    index 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  3  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObjectWrapper . getCPtr ( colObj 0 Wrap )  ,    colObj 0 Wrap ,    partId 0  ,    index 0  ,    match 0  ,    btCollisionObjectWrapper . getCPtr ( colObj 1 Wrap )  ,    colObj 1 Wrap ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  0  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObjectWrapper . getCPtr ( colObj 0 Wrap )  ,    colObj 0 Wrap ,    partId 0  ,    index 0  ,    btCollisionObjectWrapper . getCPtr ( colObj 1 Wrap )  ,    colObj 1 Wrap ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  5  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    userValue 0  ,    partId 0  ,    index 0  ,    match 0  ,    userValue 1  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  2  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    userValue 0  ,    partId 0  ,    index 0  ,    userValue 1  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  1  1  ( swigCPtr ,    this ,    userValue 0  ,    partId 0  ,    index 0  ,    match 0  ,    userValue 1  ,    partId 1  ,    index 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ onContactAdded _  _ SWIG _  8  ( swigCPtr ,    this ,    userValue 0  ,    partId 0  ,    index 0  ,    userValue 1  ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactAdded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactDestroyed ( swigCPtr ,    this ,    manifoldPointUserValue )  ;", "}", "METHOD_END"], "methodName": ["onContactDestroyed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactEnded _  _ SWIG _  4  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    match 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactEnded _  _ SWIG _  1  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactEnded _  _ SWIG _  0  ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifold )  ,    manifold )  ;", "}", "METHOD_END"], "methodName": ["onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactEnded _  _ SWIG _  3  ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifold )  ,    manifold ,    match 0  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactEnded _  _ SWIG _  5  ( swigCPtr ,    this ,    userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactEnded _  _ SWIG _  2  ( swigCPtr ,    this ,    userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactEnded"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  6  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    match 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  4  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  2  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    match 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  0  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  3  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  1  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  7  ( swigCPtr ,    this ,    userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactProcessed _  _ SWIG _  5  ( swigCPtr ,    this ,    userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactProcessed"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactStarted _  _ SWIG _  4  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    match 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactStarted _  _ SWIG _  1  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj 0  )  ,    colObj 0  ,    btCollisionObject . getCPtr ( colObj 1  )  ,    colObj 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactStarted _  _ SWIG _  0  ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifold )  ,    manifold )  ;", "}", "METHOD_END"], "methodName": ["onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactStarted _  _ SWIG _  3  ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifold )  ,    manifold ,    match 0  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactStarted _  _ SWIG _  5  ( swigCPtr ,    this ,    userValue 0  ,    match 0  ,    userValue 1  ,    match 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactListener _ onContactStarted _  _ SWIG _  2  ( swigCPtr ,    this ,    userValue 0  ,    userValue 1  )  ;", "}", "METHOD_END"], "methodName": ["onContactStarted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactListener _ setEvents ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setEvents"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactListener"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactResultCallback _ addSingleResult ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( cp )  ,    cp ,    btCollisionObjectWrapper . getCPtr ( colObj 0 Wrap )  ,    colObj 0 Wrap ,    partId 0  ,    index 0  ,    btCollisionObjectWrapper . getCPtr ( colObj 1 Wrap )  ,    colObj 1 Wrap ,    partId 1  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactResultCallback _ closestDistanceThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClosestDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactResultCallback _ collisionFilterGroup _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ContactResultCallback _ collisionFilterMask _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( ContactResultCallback . class )     ?    CollisionJNI . ContactResultCallback _ needsCollision ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  )     :    CollisionJNI . ContactResultCallback _ needsCollisionSwigExplicitContactResultCallback ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  )  ;", "}", "METHOD_END"], "methodName": ["needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactResultCallback _ closestDistanceThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClosestDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactResultCallback _ collisionFilterGroup _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ContactResultCallback _ collisionFilterMask _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ContactResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ConvexResultCallback _ addSingleResult ( swigCPtr ,    this ,    LocalConvexResult . getCPtr ( convexResult )  ,    convexResult ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ConvexResultCallback _ closestHitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClosestHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ConvexResultCallback _ collisionFilterGroup _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ConvexResultCallback _ collisionFilterMask _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . ConvexResultCallback _ hasHit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasHit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( ConvexResultCallback . class )     ?    CollisionJNI . ConvexResultCallback _ needsCollision ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  )     :    CollisionJNI . ConvexResultCallback _ needsCollisionSwigExplicitConvexResultCallback ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  )  ;", "}", "METHOD_END"], "methodName": ["needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ConvexResultCallback _ closestHitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClosestHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ConvexResultCallback _ collisionFilterGroup _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . ConvexResultCallback _ collisionFilterMask _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ConvexResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CustomCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( CustomCollisionDispatcher . class )     ?    CollisionJNI . CustomCollisionDispatcher _ needsCollision ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )     :    CollisionJNI . CustomCollisionDispatcher _ needsCollisionSwigExplicitCustomCollisionDispatcher ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CustomCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( CustomCollisionDispatcher . class )     ?    CollisionJNI . CustomCollisionDispatcher _ needsResponse ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )     :    CollisionJNI . CustomCollisionDispatcher _ needsResponseSwigExplicitCustomCollisionDispatcher ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["needsResponse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CustomCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CustomCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CustomCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.CustomCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.DISTANCE_PLANE_3D_FUNC"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ appy _ transform ( swigCPtr ,    this ,    trans )  ;", "}", "METHOD_END"], "methodName": ["appy_transform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ AABB _ collide _ plane ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["collide_plane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ AABB _ collide _ ray ( swigCPtr ,    this ,    vorigin ,    vdir )  ;", "}", "METHOD_END"], "methodName": ["collide_ray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ AABB _ collide _ triangle _ exact ( swigCPtr ,    this ,    p 1  ,    p 2  ,    p 3  ,    btVector 4  . getCPtr ( triangle _ plane )  ,    triangle _ plane )  ;", "}", "METHOD_END"], "methodName": ["collide_triangle_exact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ copy _ with _ margin ( swigCPtr ,    this ,    GIM _ AABB . getCPtr ( other )  ,    other ,    margin )  ;", "}", "METHOD_END"], "methodName": ["copy_with_margin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ find _ intersection ( swigCPtr ,    this ,    GIM _ AABB . getCPtr ( other )  ,    other ,    GIM _ AABB . getCPtr ( intersection )  ,    intersection )  ;", "}", "METHOD_END"], "methodName": ["find_intersection"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ AABB _ max _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ AABB _ min _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ get _ center _ extend ( swigCPtr ,    this ,    center ,    extend )  ;", "}", "METHOD_END"], "methodName": ["get_center_extend"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ AABB _ has _ collision ( swigCPtr ,    this ,    GIM _ AABB . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["has_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ increment _ margin ( swigCPtr ,    this ,    margin )  ;", "}", "METHOD_END"], "methodName": ["increment_margin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ invalidate ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["invalidate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ merge ( swigCPtr ,    this ,    GIM _ AABB . getCPtr ( box )  ,    box )  ;", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ AABB _ overlapping _ trans _ cache ( swigCPtr ,    this ,    GIM _ AABB . getCPtr ( box )  ,    box ,    GIM _ BOX _ BOX _ TRANSFORM _ CACHE . getCPtr ( transcache )  ,    transcache ,    fulltest )  ;", "}", "METHOD_END"], "methodName": ["overlapping_trans_cache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ AABB _ overlapping _ trans _ conservative ( swigCPtr ,    this ,    GIM _ AABB . getCPtr ( box )  ,    box ,    trans 1  _ to _  0  )  ;", "}", "METHOD_END"], "methodName": ["overlapping_trans_conservative"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ AABB _ plane _ classify ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["plane_classify"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ projection _ interval ( swigCPtr ,    this ,    direction ,    SWIGTYPE _ p _ float . getCPtr ( vmin )  ,    SWIGTYPE _ p _ float . getCPtr ( vmax )  )  ;", "}", "METHOD_END"], "methodName": ["projection_interval"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ max _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ AABB _ min _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_AABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ calc _ absolute _ matrix ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calc_absolute_matrix"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ calc _ from _ full _ invert ( swigCPtr ,    this ,    trans 0  ,    trans 1  )  ;", "}", "METHOD_END"], "methodName": ["calc_from_full_invert"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ calc _ from _ homogenic ( swigCPtr ,    this ,    trans 0  ,    trans 1  )  ;", "}", "METHOD_END"], "methodName": ["calc_from_homogenic"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ AR _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAR"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ R 1 to 0  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getR1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ T 1 to 0  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getT1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ AR _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAR"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ R 1 to 0  _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setR1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ T 1 to 0  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setT1to0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ BOX _ BOX _ TRANSFORM _ CACHE _ transform ( swigCPtr ,    this ,    point )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BOX_BOX_TRANSFORM_CACHE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ BVH _ DATA _ bound _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btAABB ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_DATA"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_DATA"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ BVH _ DATA _ data _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_DATA"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BVH _ DATA _ bound _ set ( swigCPtr ,    this ,    btAABB . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_DATA"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BVH _ DATA _ data _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_DATA"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_DATA_ARRAY"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ BVH _ TREE _ NODE _ bound _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btAABB ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ BVH _ TREE _ NODE _ getDataIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDataIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ BVH _ TREE _ NODE _ getEscapeIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ BVH _ TREE _ NODE _ isLeafNode ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isLeafNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BVH _ TREE _ NODE _ bound _ set ( swigCPtr ,    this ,    btAABB . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BVH _ TREE _ NODE _ setDataIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setDataIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ BVH _ TREE _ NODE _ setEscapeIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_BVH_TREE_NODE_ARRAY"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ CONTACT _ calc _ key _ contact ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calc_key_contact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ CONTACT _ depth _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDepth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ CONTACT _ distance _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ CONTACT _ feature 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFeature1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ CONTACT _ feature 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFeature2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ CONTACT _ normal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ CONTACT _ point _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ CONTACT _ interpolate _ normals ( swigCPtr ,    this ,    btVector 3  . getCPtr ( normals )  ,    normals ,    normal _ count )  ;", "}", "METHOD_END"], "methodName": ["interpolate_normals"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ CONTACT _ depth _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDepth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ CONTACT _ distance _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ CONTACT _ feature 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFeature1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ CONTACT _ feature 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFeature2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ CONTACT _ normal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ CONTACT _ point _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_HASH_NODE_CMP_KEY_MACRO"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_HASH_NODE_CMP_MACRO"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_HASH_NODE_GET_KEY"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_PAIR"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ PAIR _ index 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndex1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_PAIR"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ PAIR _ index 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndex2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_PAIR"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ PAIR _ index 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndex1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_PAIR"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ PAIR _ index 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndex2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_PAIR"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_QUANTIZED_BVH_NODE_ARRAY"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ RSORT _ TOKEN _ key _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getKey"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ RSORT _ TOKEN _ value _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ RSORT _ TOKEN _ operatorGreaterThan ( swigCPtr ,    this ,    GIM _ RSORT _ TOKEN . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorGreaterThan"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ RSORT _ TOKEN _ operatorLessThan ( swigCPtr ,    this ,    GIM _ RSORT _ TOKEN . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorLessThan"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ RSORT _ TOKEN _ key _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setKey"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ RSORT _ TOKEN _ value _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN_COMPARATOR"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ RSORT _ TOKEN _ COMPARATOR _ operatorFunctionCall ( swigCPtr ,    this ,    GIM _ RSORT _ TOKEN . getCPtr ( a )  ,    a ,    GIM _ RSORT _ TOKEN . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["operatorFunctionCall"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_RSORT_TOKEN_COMPARATOR"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ apply _ transform ( swigCPtr ,    this ,    trans )  ;", "}", "METHOD_END"], "methodName": ["apply_transform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ collide _ triangle ( swigCPtr ,    this ,    GIM _ TRIANGLE . getCPtr ( other )  ,    other ,    GIM _ TRIANGLE _ CONTACT _ DATA . getCPtr ( contact _ data )  ,    contact _ data )  ;", "}", "METHOD_END"], "methodName": ["collide_triangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ collide _ triangle _ hard _ test ( swigCPtr ,    this ,    GIM _ TRIANGLE . getCPtr ( other )  ,    other ,    GIM _ TRIANGLE _ CONTACT _ DATA . getCPtr ( contact _ data )  ,    contact _ data )  ;", "}", "METHOD_END"], "methodName": ["collide_triangle_hard_test"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ margin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ TRIANGLE _ vertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ AABB ( CollisionJNI . GIM _ TRIANGLE _ get _ box ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["get_box"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ get _ edge _ plane ( swigCPtr ,    this ,    edge _ index ,    triangle _ normal ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["get_edge_plane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ get _ normal ( swigCPtr ,    this ,    normal )  ;", "}", "METHOD_END"], "methodName": ["get_normal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ get _ plane ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["get_plane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ get _ triangle _ transform ( swigCPtr ,    this ,    triangle _ transform )  ;", "}", "METHOD_END"], "methodName": ["get_triangle_transform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ get _ uv _ parameters ( swigCPtr ,    this ,    point ,    tri _ plane ,    SWIGTYPE _ p _ float . getCPtr ( u )  ,    SWIGTYPE _ p _ float . getCPtr ( v )  )  ;", "}", "METHOD_END"], "methodName": ["get_uv_parameters"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ is _ point _ inside ( swigCPtr ,    this ,    point ,    tri _ normal )  ;", "}", "METHOD_END"], "methodName": ["is_point_inside"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ ray _ collision _  _ SWIG _  1  ( swigCPtr ,    this ,    vPoint ,    vDir ,    pout ,    triangle _ normal ,    SWIGTYPE _ p _ float . getCPtr ( tparam )  )  ;", "}", "METHOD_END"], "methodName": ["ray_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ ray _ collision _  _ SWIG _  0  ( swigCPtr ,    this ,    vPoint ,    vDir ,    pout ,    triangle _ normal ,    SWIGTYPE _ p _ float . getCPtr ( tparam )  ,    tmax )  ;", "}", "METHOD_END"], "methodName": ["ray_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ ray _ collision _ front _ side _  _ SWIG _  1  ( swigCPtr ,    this ,    vPoint ,    vDir ,    pout ,    triangle _ normal ,    SWIGTYPE _ p _ float . getCPtr ( tparam )  )  ;", "}", "METHOD_END"], "methodName": ["ray_collision_front_side"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ ray _ collision _ front _ side _  _ SWIG _  0  ( swigCPtr ,    this ,    vPoint ,    vDir ,    pout ,    triangle _ normal ,    SWIGTYPE _ p _ float . getCPtr ( tparam )  ,    tmax )  ;", "}", "METHOD_END"], "methodName": ["ray_collision_front_side"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ margin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ vertices _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ copy _ from ( swigCPtr ,    this ,    GIM _ TRIANGLE _ CONTACT . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["copy_from"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ CONTACT _ penetration _ depth _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPenetration_depth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ CONTACT _ point _ count _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPoint_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ TRIANGLE _ CONTACT _ points _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ TRIANGLE _ CONTACT _ separating _ normal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 4  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSeparating_normal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ merge _ points ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane ,    margin ,    btVector 3  . getCPtr ( points )  ,    points ,    point _ count )  ;", "}", "METHOD_END"], "methodName": ["merge_points"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ penetration _ depth _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPenetration_depth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ point _ count _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPoint_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ points _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ separating _ normal _ set ( swigCPtr ,    this ,    btVector 4  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSeparating_normal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ copy _ from ( swigCPtr ,    this ,    GIM _ TRIANGLE _ CONTACT _ DATA . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["copy_from"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ penetration _ depth _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPenetration_depth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ point _ count _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPoint_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ points _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ separating _ normal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 4  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSeparating_normal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ merge _ points ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane ,    margin ,    btVector 3  . getCPtr ( points )  ,    points ,    point _ count )  ;", "}", "METHOD_END"], "methodName": ["merge_points"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ penetration _ depth _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPenetration_depth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ point _ count _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPoint_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ points _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GIM _ TRIANGLE _ CONTACT _ DATA _ separating _ normal _ set ( swigCPtr ,    this ,    btVector 4  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSeparating_normal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GIM_TRIANGLE_CONTACT_DATA"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GdxCollisionObjectBridge"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GdxCollisionObjectBridge _ contactCallbackFilter _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactCallbackFilter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GdxCollisionObjectBridge"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GdxCollisionObjectBridge _ contactCallbackFlag _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactCallbackFlag"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GdxCollisionObjectBridge"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . GdxCollisionObjectBridge _ userValue _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GdxCollisionObjectBridge"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GdxCollisionObjectBridge _ contactCallbackFilter _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactCallbackFilter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GdxCollisionObjectBridge"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GdxCollisionObjectBridge _ contactCallbackFlag _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactCallbackFlag"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GdxCollisionObjectBridge"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . GdxCollisionObjectBridge _ userValue _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.GdxCollisionObjectBridge"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( ICollide . class )     ?    CollisionJNI . ICollide _ AllLeaves ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  )     :    CollisionJNI . ICollide _ AllLeavesSwigExplicitICollide ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  )  ;", "}", "METHOD_END"], "methodName": ["AllLeaves"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( ICollide . class )     ?    CollisionJNI . ICollide _ Descent ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  )     :    CollisionJNI . ICollide _ DescentSwigExplicitICollide ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  )  ;", "}", "METHOD_END"], "methodName": ["Descent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "CollisionJNI _ Process _  _ SWIG _  1  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  )  ;", "else", "CollisionJNI _ ProcessSwigExplici _  _ SWIG _  1  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  )  ;", "}", "METHOD_END"], "methodName": ["Process"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "CollisionJNI _ Process _  _ SWIG _  0  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  ,    btDbvtNode . getCPtr ( arg 1  )  ,    arg 1  )  ;", "else", "CollisionJNI _ ProcessSwigExplici _  _ SWIG _  0  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( arg 0  )  ,    arg 0  ,    btDbvtNode . getCPtr ( arg 1  )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["Process"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "CollisionJNI _ Process _  _ SWIG _  2  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( n )  ,    n ,    arg 1  )  ;", "else", "CollisionJNI _ ProcessSwigExplici _  _ SWIG _  2  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( n )  ,    n ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["Process"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.ICollide"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . LocalConvexResult _ hitCollisionObject _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHitCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . LocalConvexResult _ hitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalConvexResult _ getHitNormalLocal ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getHitNormalLocal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalConvexResult _ getHitPointLocal ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getHitPointLocal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . LocalConvexResult _ localShapeInfo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   LocalShapeInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalShapeInfo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalConvexResult _ hitCollisionObject _ set ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalConvexResult _ hitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalConvexResult _ setHitNormalLocal ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitNormalLocal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalConvexResult _ setHitPointLocal ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitPointLocal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalConvexResult _ localShapeInfo _ set ( swigCPtr ,    this ,    LocalShapeInfo . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalShapeInfo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalConvexResult"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . LocalRayResult _ collisionObject _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . LocalRayResult _ hitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . LocalRayResult _ hitNormalLocal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHitNormalLocal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . LocalRayResult _ localShapeInfo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   LocalShapeInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalShapeInfo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalRayResult _ collisionObject _ set ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalRayResult _ hitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalRayResult _ hitNormalLocal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitNormalLocal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalRayResult _ localShapeInfo _ set ( swigCPtr ,    this ,    LocalShapeInfo . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalShapeInfo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalRayResult"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalShapeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . LocalShapeInfo _ shapePart _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getShapePart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalShapeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . LocalShapeInfo _ triangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalShapeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalShapeInfo _ shapePart _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setShapePart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalShapeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . LocalShapeInfo _ triangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.LocalShapeInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . MyCallback _ ignorePart _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIgnorePart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . MyCallback _ ignoreTriangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIgnoreTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . MyCallback _ ignorePart _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIgnorePart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . MyCallback _ ignoreTriangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIgnoreTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . MyInternalTriangleIndexCallback _ colShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCompoundShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getColShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . MyInternalTriangleIndexCallback _ depth _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDepth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . MyInternalTriangleIndexCallback _ gimpactShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGImpactMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGimpactShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . MyInternalTriangleIndexCallback _ colShape _ set ( swigCPtr ,    this ,    btCompoundShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setColShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . MyInternalTriangleIndexCallback _ depth _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDepth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . MyInternalTriangleIndexCallback _ gimpactShape _ set ( swigCPtr ,    this ,    btGImpactMeshShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGimpactShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.MyInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . RayResultCallback _ addSingleResult ( swigCPtr ,    this ,    LocalRayResult . getCPtr ( rayResult )  ,    rayResult ,    normalInWorldSpace )  ;", "}", "METHOD_END"], "methodName": ["addSingleResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . RayResultCallback _ closestHitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClosestHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . RayResultCallback _ collisionFilterGroup _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . RayResultCallback _ collisionFilterMask _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . RayResultCallback _ collisionObject _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . RayResultCallback _ flags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . RayResultCallback _ hasHit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasHit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( RayResultCallback . class )     ?    CollisionJNI . RayResultCallback _ needsCollision ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  )     :    CollisionJNI . RayResultCallback _ needsCollisionSwigExplicitRayResultCallback ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  )  ;", "}", "METHOD_END"], "methodName": ["needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . RayResultCallback _ closestHitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClosestHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . RayResultCallback _ collisionFilterGroup _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . RayResultCallback _ collisionFilterMask _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . RayResultCallback _ collisionObject _ set ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . RayResultCallback _ flags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.RayResultCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_GREAL"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_GUINT"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_PHY_ScalarType"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_a_4__GREAL"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btAlignedObjectArrayT_btDbvtNode_const_p_t_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btBvhSubtreeInfo_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btDbvtNode_const_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNN_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btDbvt__sStkNPS_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btFace_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btIndexedMesh_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhNode_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_btSimplePair_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_btAlignedObjectArrayT_int_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_f_p_q_const__btCollisionShape_p_q_const__btCollisionShape__bool"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_f_p_void__void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_f_p_void_size_t_size_t__p_void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_f_r_btBroadphasePair_r_btCollisionDispatcher_r_q_const__btDispatcherInfo__void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_f_r_btManifoldPoint_p_q_const__btCollisionObjectWrapper_int_int_p_q_const__btCollisionObjectWrapper_int_int__bool"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_f_size_t__p_void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_float"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_gim_arrayT_GUINT_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_int"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_p_btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_p_btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_p_btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_p_btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_p_btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_p_btVector3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_p_unsigned_char"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_size_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SWIGTYPE_p_unsigned_int"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . SphereTriangleDetector _ collide ( swigCPtr ,    this ,    sphereCenter ,    point ,    resultNormal ,    SWIGTYPE _ p _ float . getCPtr ( depth )  ,    SWIGTYPE _ p _ float . getCPtr ( timeOfImpact )  ,    contactBreakingThreshold )  ;", "}", "METHOD_END"], "methodName": ["collide"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SphereTriangleDetector"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SphereTriangleDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . SphereTriangleDetector _ getClosestPoints _  _ SWIG _  1  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SphereTriangleDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . SphereTriangleDetector _ getClosestPoints _  _ SWIG _  0  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw ,    swapResults )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.SphereTriangleDetector"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSimplex_t"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI .  _ btMprSimplex _ t _ last _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLast"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSimplex_t"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI .  _ btMprSimplex _ t _ ps _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new    _ btMprSupport _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPs"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSimplex_t"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI .  _ btMprSimplex _ t _ last _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLast"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSimplex_t"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI .  _ btMprSimplex _ t _ ps _ set ( swigCPtr ,    this ,     _ btMprSupport _ t . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPs"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSimplex_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSupport_t"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI .  _ btMprSupport _ t _ v _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getV"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSupport_t"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI .  _ btMprSupport _ t _ v 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getV1"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSupport_t"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI .  _ btMprSupport _ t _ v 2  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getV2"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSupport_t"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI .  _ btMprSupport _ t _ v _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setV"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSupport_t"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI .  _ btMprSupport _ t _ v 1  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setV1"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSupport_t"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI .  _ btMprSupport _ t _ v 2  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setV2"], "fileName": "com.badlogic.gdx.physics.bullet.collision._btMprSupport_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.bt32BitAxisSweep3"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ appy _ transform ( swigCPtr ,    this ,    trans )  ;", "}", "METHOD_END"], "methodName": ["appy_transform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ appy _ transform _ trans _ cache ( swigCPtr ,    this ,    BT _ BOX _ BOX _ TRANSFORM _ CACHE . getCPtr ( trans )  ,    trans )  ;", "}", "METHOD_END"], "methodName": ["appy_transform_trans_cache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ collide _ plane ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["collide_plane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ collide _ ray ( swigCPtr ,    this ,    vorigin ,    vdir )  ;", "}", "METHOD_END"], "methodName": ["collide_ray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ collide _ triangle _ exact ( swigCPtr ,    this ,    p 1  ,    p 2  ,    p 3  ,    btVector 4  . getCPtr ( triangle _ plane )  ,    triangle _ plane )  ;", "}", "METHOD_END"], "methodName": ["collide_triangle_exact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ copy _ with _ margin ( swigCPtr ,    this ,    btAABB . getCPtr ( other )  ,    other ,    margin )  ;", "}", "METHOD_END"], "methodName": ["copy_with_margin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ find _ intersection ( swigCPtr ,    this ,    btAABB . getCPtr ( other )  ,    other ,    btAABB . getCPtr ( intersection )  ,    intersection )  ;", "}", "METHOD_END"], "methodName": ["find_intersection"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btAABB _ max _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btAABB _ min _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ get _ center _ extend ( swigCPtr ,    this ,    center ,    extend )  ;", "}", "METHOD_END"], "methodName": ["get_center_extend"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ has _ collision ( swigCPtr ,    this ,    btAABB . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["has_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ increment _ margin ( swigCPtr ,    this ,    margin )  ;", "}", "METHOD_END"], "methodName": ["increment_margin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ invalidate ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["invalidate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ merge ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box )  ;", "}", "METHOD_END"], "methodName": ["merge"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ overlapping _ trans _ cache ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box ,    BT _ BOX _ BOX _ TRANSFORM _ CACHE . getCPtr ( transcache )  ,    transcache ,    fulltest )  ;", "}", "METHOD_END"], "methodName": ["overlapping_trans_cache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ overlapping _ trans _ conservative ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box ,    trans 1  _ to _  0  )  ;", "}", "METHOD_END"], "methodName": ["overlapping_trans_conservative"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ overlapping _ trans _ conservative 2  ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box ,    BT _ BOX _ BOX _ TRANSFORM _ CACHE . getCPtr ( trans 1  _ to _  0  )  ,    trans 1  _ to _  0  )  ;", "}", "METHOD_END"], "methodName": ["overlapping_trans_conservative2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAABB _ plane _ classify ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["plane_classify"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ projection _ interval ( swigCPtr ,    this ,    direction ,    SWIGTYPE _ p _ float . getCPtr ( vmin )  ,    SWIGTYPE _ p _ float . getCPtr ( vmax )  )  ;", "}", "METHOD_END"], "methodName": ["projection_interval"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ max _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAABB _ min _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAABB"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btActivatingCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalInt _ addHandle ( swigCPtr ,    this ,    aabbMin ,    aabbMax ,    pOwner ,    collisionFilterGroup ,    collisionFilterMask ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["addHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btAxisSweep 3 InternalInt _ getHandle ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btAxisSweep 3 InternalInt . Handle ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalInt _ getNumHandles ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumHandles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btAxisSweep 3 InternalInt _ getOverlappingPairUserCallback ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlappingPairCallback ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairUserCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalInt _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalInt _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalInt _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalInt _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "assert   out . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ quantize ( swigCPtr ,    this ,    out ,    point ,    isMax )  ;", "}", "}", "METHOD_END"], "methodName": ["quantize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ rayTest _  _ SWIG _  2  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ rayTest _  _ SWIG _  1  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ rayTest _  _ SWIG _  0  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ removeHandle ( swigCPtr ,    this ,    handle ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["removeHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ setOverlappingPairUserCallback ( swigCPtr ,    this ,    btOverlappingPairCallback . getCPtr ( pairCallback )  ,    pairCallback )  ;", "}", "METHOD_END"], "methodName": ["setOverlappingPairUserCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalInt _ testAabbOverlap ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ;", "}", "METHOD_END"], "methodName": ["testAabbOverlap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ unQuantize ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy )  ,    proxy ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["unQuantize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalInt _ updateHandle ( swigCPtr ,    this ,    handle ,    aabbMin ,    aabbMax ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["updateHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalInt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalShort _ addHandle ( swigCPtr ,    this ,    aabbMin ,    aabbMax ,    pOwner ,    collisionFilterGroup ,    collisionFilterMask ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["addHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btAxisSweep 3 InternalShort _ getHandle ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btAxisSweep 3 InternalShort . Handle ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalShort _ getNumHandles ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumHandles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btAxisSweep 3 InternalShort _ getOverlappingPairUserCallback ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlappingPairCallback ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairUserCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalShort _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalShort _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalShort _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalShort _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "assert   out . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ quantize ( swigCPtr ,    this ,    out ,    point ,    isMax )  ;", "}", "}", "METHOD_END"], "methodName": ["quantize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ rayTest _  _ SWIG _  2  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ rayTest _  _ SWIG _  1  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ rayTest _  _ SWIG _  0  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ removeHandle ( swigCPtr ,    this ,    handle ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["removeHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ setOverlappingPairUserCallback ( swigCPtr ,    this ,    btOverlappingPairCallback . getCPtr ( pairCallback )  ,    pairCallback )  ;", "}", "METHOD_END"], "methodName": ["setOverlappingPairUserCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btAxisSweep 3 InternalShort _ testAabbOverlap ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ;", "}", "METHOD_END"], "methodName": ["testAabbOverlap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ unQuantize ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy )  ,    proxy ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["unQuantize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btAxisSweep 3 InternalShort _ updateHandle ( swigCPtr ,    this ,    handle ,    aabbMin ,    aabbMax ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["updateHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btAxisSweep3InternalShort"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBU _ Simplex 1 to 4  _ addVertex ( swigCPtr ,    this ,    pt )  ;", "}", "METHOD_END"], "methodName": ["addVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBU _ Simplex 1 to 4  _ getIndex ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBU _ Simplex 1 to 4  _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBU _ Simplex 1 to 4  _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBU _ Simplex 1 to 4  _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBU _ Simplex 1 to 4  _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBU _ Simplex 1 to 4  _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBU _ Simplex 1 to 4  _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBU _ Simplex 1 to 4  _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBU _ Simplex 1 to 4  _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBU _ Simplex 1 to 4  _ reset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBU_Simplex1to4"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dBox2dCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ getCentroid ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCentroid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ getHalfExtentsWithMargin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfExtentsWithMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ getHalfExtentsWithoutMargin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfExtentsWithoutMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBox 2 dShape _ getNormals ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormals"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBox 2 dShape _ getPlaneEquation ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane ,    i )  ;", "}", "METHOD_END"], "methodName": ["getPlaneEquation"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ getVertexCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVertexCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBox 2 dShape _ getVertices ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBox 2 dShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBox 2 dShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBox 2 dShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBox 2 dShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBox 2 dShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBox2dShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBoxBoxDetector _ box 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBoxShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBox1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxDetector"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBoxBoxDetector _ box 2  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBoxShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBox2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxDetector"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxBoxDetector _ getClosestPoints _  _ SWIG _  1  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxBoxDetector _ getClosestPoints _  _ SWIG _  0  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw ,    swapResults )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxBoxDetector _ box 1  _ set ( swigCPtr ,    this ,    btBoxShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBox1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxBoxDetector _ box 2  _ set ( swigCPtr ,    this ,    btBoxShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBox2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxBoxDetector"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBoxShape _ getHalfExtentsWithMargin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfExtentsWithMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBoxShape _ getHalfExtentsWithoutMargin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfExtentsWithoutMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxShape _ getPlaneEquation ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane ,    i )  ;", "}", "METHOD_END"], "methodName": ["getPlaneEquation"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBoxShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBoxShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBoxShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBoxShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBoxShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBoxShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseAabbCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseAabbCallback _ process ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy )  ,    proxy )  ;", "}", "METHOD_END"], "methodName": ["process"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseAabbCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseAabbCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseAabbCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseAabbCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ aabbTest ( swigCPtr ,    this ,    aabbMin ,    aabbMax ,    btBroadphaseAabbCallback . getCPtr ( callback )  ,    callback )  ;", "}", "METHOD_END"], "methodName": ["aabbTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ calculateOverlappingPairs ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["calculateOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphaseProxy . internalTemp ( CollisionJNI . btBroadphaseInterface _ createProxy ( swigCPtr ,    this ,    aabbMin ,    aabbMax ,    shapeType ,    userPtr ,    collisionFilterGroup ,    collisionFilterMask ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["createProxy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ destroyProxy ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy )  ,    proxy ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["destroyProxy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ getAabb ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy )  ,    proxy ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ getBroadphaseAabb ( swigCPtr ,    this ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getBroadphaseAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBroadphaseInterface _ getOverlappingPairCache ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlappingPairCache ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairCache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBroadphaseInterface _ getOverlappingPairCacheConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlappingPairCache ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairCacheConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ printStats ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["printStats"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ rayTest _  _ SWIG _  2  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ rayTest _  _ SWIG _  1  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ rayTest _  _ SWIG _  0  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ resetPool ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["resetPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseInterface _ setAabb ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy )  ,    proxy ,    aabbMin ,    aabbMax ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["setAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseInterface"}, {"methodBody": ["METHOD_START", "{", "inst . dispose (  )  ;", "pool . free ( inst )  ;", "}", "METHOD_END"], "methodName": ["free"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBroadphasePair _ algorithm _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionAlgorithm ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePair _ internalInfo 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInternalInfo1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePair _ internalTmpValue _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInternalTmpValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphaseProxy . internalTemp ( CollisionJNI . btBroadphasePair _ pProxy 0  _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPProxy0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphaseProxy . internalTemp ( CollisionJNI . btBroadphasePair _ pProxy 1  _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPProxy1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "btBroadphasePair . temp . reset ( cPtr ,    own )  ;", "return   btBroadphasePair . temp ;", "}", "METHOD_END"], "methodName": ["internalTemp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "final   btBroadphasePair   result    =    pool . obtain (  )  ;", "result . reset ( cPtr ,    own )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtain"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePair _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePair _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePair _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePair _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ algorithm _ set ( swigCPtr ,    this ,    btCollisionAlgorithm . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ internalInfo 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInternalInfo1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ internalTmpValue _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInternalTmpValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ pProxy 0  _ set ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPProxy0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphasePair _ pProxy 1  _ set ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPProxy1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePair"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphasePair . internalTemp ( CollisionJNI . btBroadphasePairArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray"}, {"methodBody": ["METHOD_START", "{", "final   int   c    =    getCollisionObjects ( tempArray ,    tempArray . length ,     (  ( int )     ( btCollisionObject . getCPtr ( other )  )  )  )  ;", "for    ( int   i    =     0  ;    i    <    c ;    i +  +  )", "out . add ( btCollisionObject . getInstance ( tempArray [ i ]  ,    false )  )  ;", "return   out ;", "}", "METHOD_END"], "methodName": ["getCollisionObjects"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePairArray _ getCollisionObjects ( swigCPtr ,    this ,    result ,    max ,    other )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjects"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray"}, {"methodBody": ["METHOD_START", "{", "return   getCollisionObjectsValue ( out ,    out . length ,     (  ( int )     ( btCollisionObject . getCPtr ( other )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectsValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePairArray _ getCollisionObjectsValue ( swigCPtr ,    this ,    result ,    max ,    other )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectsValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePairArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairSortPredicate"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphasePairSortPredicate _ operatorFunctionCall ( swigCPtr ,    this ,    a ,    b )  ;", "}", "METHOD_END"], "methodName": ["operatorFunctionCall"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphasePairSortPredicate"}, {"methodBody": ["METHOD_START", "{", "inst . dispose (  )  ;", "pool . free ( inst )  ;", "}", "METHOD_END"], "methodName": ["free"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBroadphaseProxy _ aabbMax _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBroadphaseProxy _ aabbMin _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ clientObject _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClientObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ collisionFilterGroup _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ collisionFilterMask _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ getUid ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ uniqueId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUniqueId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "btBroadphaseProxy . temp . reset ( cPtr ,    own )  ;", "return   btBroadphaseProxy . temp ;", "}", "METHOD_END"], "methodName": ["internalTemp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isCompound ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isCompound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isConcave ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isConcave"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isConvex ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isConvex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isConvex 2 d ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isConvex2d"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isInfinite ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isInfinite"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isNonMoving ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isNonMoving"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isPolyhedral ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isPolyhedral"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ isSoftBody ( proxyType )  ;", "}", "METHOD_END"], "methodName": ["isSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "final   btBroadphaseProxy   result    =    pool . obtain (  )  ;", "result . reset ( cPtr ,    own )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtain"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseProxy _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ aabbMax _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ aabbMin _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ clientObject _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClientObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ collisionFilterGroup _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ collisionFilterMask _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseProxy _ uniqueId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUniqueId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseRayCallback _ lambda _ max _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLambda_max"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBroadphaseRayCallback _ rayDirectionInverse _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRayDirectionInverse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBroadphaseRayCallback _ signs _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSigns"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseRayCallback _ lambda _ max _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLambda_max"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseRayCallback _ rayDirectionInverse _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRayDirectionInverse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBroadphaseRayCallback _ signs _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSigns"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBroadphaseRayCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ quantizedAabbMax _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ quantizedAabbMin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ rootNodeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRootNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ subtreeSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSubtreeSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfo _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ setAabbFromQuantizeNode ( swigCPtr ,    this ,    btQuantizedBvhNode . getCPtr ( quantizedNode )  ,    quantizedNode )  ;", "}", "METHOD_END"], "methodName": ["setAabbFromQuantizeNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ quantizedAabbMax _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ quantizedAabbMin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ rootNodeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRootNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfo _ subtreeSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSubtreeSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfoData _ quantizedAabbMax _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfoData _ quantizedAabbMin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfoData _ rootNodeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRootNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhSubtreeInfoData _ subtreeSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSubtreeSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfoData _ quantizedAabbMax _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfoData _ quantizedAabbMin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfoData _ rootNodeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRootNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhSubtreeInfoData _ subtreeSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSubtreeSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhSubtreeInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTree _ build _ tree ( swigCPtr ,    this ,    GIM _ BVH _ DATA _ ARRAY . getCPtr ( primitive _ boxes )  ,    primitive _ boxes )  ;", "}", "METHOD_END"], "methodName": ["build_tree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTree _ clearNodes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTree _ getEscapeNodeIndex ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getEscapeNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTree _ getLeftNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getLeftNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTree _ getNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["getNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTree _ getNodeCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTree _ getNodeData ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getNodeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTree _ getRightNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getRightNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBvhTree _ get _ node _ pointer _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ BVH _ TREE _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBvhTree _ get _ node _ pointer _  _ SWIG _  0  ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ BVH _ TREE _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTree _ isLeafNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["isLeafNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTree _ setNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["setNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTree"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ buildOptimizedBvh ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["buildOptimizedBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "if    (  ( meshInterface )     !  =    null )", "meshInterface . release (  )  ;", "meshInterface    =    null ;", "super . dispose (  )  ;", "}", "METHOD_END"], "methodName": ["dispose"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "for    ( final   btBvhTriangleMeshShape   instance    :    btBvhTriangleMeshShape . instances )     {", "if    (  (  ( instance . meshInterface )    instanceof   btTriangleIndexVertexArray )     &  &     ( btTriangleIndexVertexArray . compare (  (  ( btTriangleIndexVertexArray )     ( instance . meshInterface )  )  ,    meshParts )  )  )", "return   instance ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   meshInterface ;", "}", "METHOD_END"], "methodName": ["getMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBvhTriangleMeshShape _ getOptimizedBvh ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOptimizedBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTriangleMeshShape _ getOwnsBvh ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOwnsBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btBvhTriangleMeshShape _ getTriangleInfoMap _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfoMap ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "btBvhTriangleMeshShape   result    =    btBvhTriangleMeshShape . getInstance ( meshParts )  ;", "if    ( result    =  =    null )     {", "result    =    new   btBvhTriangleMeshShape ( btTriangleIndexVertexArray . obtain ( meshParts )  ,    true )  ;", "btBvhTriangleMeshShape . instances . add ( result )  ;", "}", "result . obtain (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtain"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTriangleMeshShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTriangleMeshShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTriangleMeshShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTriangleMeshShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ partialRefitTree ( swigCPtr ,    this ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["partialRefitTree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ performConvexcast ( swigCPtr ,    this ,    btTriangleCallback . getCPtr ( callback )  ,    callback ,    boxSource ,    boxTarget ,    boxMin ,    boxMax )  ;", "}", "METHOD_END"], "methodName": ["performConvexcast"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ performRaycast ( swigCPtr ,    this ,    btTriangleCallback . getCPtr ( callback )  ,    callback ,    raySource ,    rayTarget )  ;", "}", "METHOD_END"], "methodName": ["performRaycast"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ refitTree ( swigCPtr ,    this ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["refitTree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ serializeSingleBvh ( swigCPtr ,    this ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serializeSingleBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ serializeSingleTriangleInfoMap ( swigCPtr ,    this ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serializeSingleTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ setOptimizedBvh _  _ SWIG _  1  ( swigCPtr ,    this ,    btOptimizedBvh . getCPtr ( bvh )  ,    bvh )  ;", "}", "METHOD_END"], "methodName": ["setOptimizedBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ setOptimizedBvh _  _ SWIG _  0  ( swigCPtr ,    this ,    btOptimizedBvh . getCPtr ( bvh )  ,    bvh ,    localScaling )  ;", "}", "METHOD_END"], "methodName": ["setOptimizedBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btBvhTriangleMeshShape _ setTriangleInfoMap ( swigCPtr ,    this ,    btTriangleInfoMap . getCPtr ( triangleInfoMap )  ,    triangleInfoMap )  ;", "}", "METHOD_END"], "methodName": ["setTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btBvhTriangleMeshShape _ usesQuantizedAabbCompression ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["usesQuantizedAabbCompression"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShape _ deSerializeFloat ( swigCPtr ,    this ,    btCapsuleShapeData . getCPtr ( dataBuffer )  ,    dataBuffer )  ;", "}", "METHOD_END"], "methodName": ["deSerializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShape _ getHalfHeight ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfHeight"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShape _ getRadius ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShape _ getUpAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCapsuleShapeData _ convexInternalShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexInternalShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShapeData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCapsuleShapeData _ upAxis _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShapeData _ convexInternalShapeData _ set ( swigCPtr ,    this ,    btConvexInternalShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShapeData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCapsuleShapeData _ upAxis _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeX"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCapsuleShapeZ"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCharIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCharIndexTripletData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCharIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCharIndexTripletData _ values _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCharIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCharIndexTripletData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCharIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCharIndexTripletData _ values _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCharIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionAlgorithm _ calculateTimeOfImpact ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  ,    btDispatcherInfo . getCPtr ( dispatchInfo )  ,    dispatchInfo ,    btManifoldResult . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["calculateTimeOfImpact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionAlgorithm _ getAllContactManifolds ( swigCPtr ,    this ,    btPersistentManifoldArray . getCPtr ( manifoldArray )  ,    manifoldArray )  ;", "}", "METHOD_END"], "methodName": ["getAllContactManifolds"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionAlgorithm _ processCollision ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap ,    btDispatcherInfo . getCPtr ( dispatchInfo )  ,    dispatchInfo ,    btManifoldResult . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["processCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionAlgorithmConstructionInfo _ dispatcher 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDispatcher ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDispatcher1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionAlgorithmConstructionInfo _ manifold _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionAlgorithmConstructionInfo _ dispatcher 1  _ set ( swigCPtr ,    this ,    btDispatcher . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDispatcher1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionAlgorithmConstructionInfo _ manifold _ set ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionAlgorithmCreateFunc _ CreateCollisionAlgorithm ( swigCPtr ,    this ,    btCollisionAlgorithmConstructionInfo . getCPtr ( arg 0  )  ,    arg 0  ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionAlgorithm ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreateCollisionAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmCreateFunc"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmCreateFunc"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionAlgorithmCreateFunc _ swapped _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSwapped"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmCreateFunc"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionAlgorithmCreateFunc _ swapped _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSwapped"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionAlgorithmCreateFunc"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionConfiguration _ getClosestPointsAlgorithmCreateFunc ( swigCPtr ,    this ,    proxyType 0  ,    proxyType 1  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionAlgorithmCreateFunc ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getClosestPointsAlgorithmCreateFunc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionConfiguration _ getCollisionAlgorithmCreateFunc ( swigCPtr ,    this ,    proxyType 0  ,    proxyType 1  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionAlgorithmCreateFunc ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionAlgorithmCreateFunc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionConfiguration _ getCollisionAlgorithmPool ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoolAllocator ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionAlgorithmPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionConfiguration _ getPersistentManifoldPool ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoolAllocator ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPersistentManifoldPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionDispatcher _ defaultNearCallback ( collisionPair ,    btCollisionDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btDispatcherInfo . getCPtr ( dispatchInfo )  ,    dispatchInfo )  ;", "}", "METHOD_END"], "methodName": ["defaultNearCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionDispatcher _ getCollisionConfiguration ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionConfiguration ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionConfiguration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionDispatcher _ getCollisionConfigurationConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionConfiguration ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionConfigurationConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionDispatcher _ getDispatcherFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDispatcherFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionDispatcher _ getManifoldByIndexInternalConst ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getManifoldByIndexInternalConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionDispatcher _ getNearCallback ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ r _ btBroadphasePair _ r _ btCollisionDispatcher _ r _ q _ const _  _ btDispatcherInfo _  _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNearCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionDispatcher _ registerClosestPointsCreateFunc ( swigCPtr ,    this ,    proxyType 0  ,    proxyType 1  ,    btCollisionAlgorithmCreateFunc . getCPtr ( createFunc )  ,    createFunc )  ;", "}", "METHOD_END"], "methodName": ["registerClosestPointsCreateFunc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionDispatcher _ registerCollisionCreateFunc ( swigCPtr ,    this ,    proxyType 0  ,    proxyType 1  ,    btCollisionAlgorithmCreateFunc . getCPtr ( createFunc )  ,    createFunc )  ;", "}", "METHOD_END"], "methodName": ["registerCollisionCreateFunc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionDispatcher _ setCollisionConfiguration ( swigCPtr ,    this ,    btCollisionConfiguration . getCPtr ( config )  ,    config )  ;", "}", "METHOD_END"], "methodName": ["setCollisionConfiguration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionDispatcher _ setDispatcherFlags ( swigCPtr ,    this ,    flags )  ;", "}", "METHOD_END"], "methodName": ["setDispatcherFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionDispatcher _ setNearCallback ( swigCPtr ,    this ,    SWIGTYPE _ p _ f _ r _ btBroadphasePair _ r _ btCollisionDispatcher _ r _ q _ const _  _ btDispatcherInfo _  _ void . getCPtr ( nearCallback )  )  ;", "}", "METHOD_END"], "methodName": ["setNearCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionDispatcherMt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ activate _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["activate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ activate _  _ SWIG _  0  ( swigCPtr ,    this ,    forceActivation )  ;", "}", "METHOD_END"], "methodName": ["activate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "instances . put ( btCollisionObject . getCPtr ( obj )  ,    obj )  ;", "}", "METHOD_END"], "methodName": ["addInstance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ calculateSerializeBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ checkCollideWith ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( co )  ,    co )  ;", "}", "METHOD_END"], "methodName": ["checkCollideWith"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ checkCollideWithOverride ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( co )  ,    co )  ;", "}", "METHOD_END"], "methodName": ["checkCollideWithOverride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ forceActivationState ( swigCPtr ,    this ,    newState )  ;", "}", "METHOD_END"], "methodName": ["forceActivationState"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getActivationState ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getActivationState"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getAnisotropicFriction _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ getAnisotropicFriction _  _ SWIG _  1  ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphaseProxy . internalTemp ( CollisionJNI . btCollisionObject _ getBroadphaseHandle _  _ SWIG _  0  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBroadphaseHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getCcdMotionThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCcdMotionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getCcdSquareMotionThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCcdSquareMotionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getCcdSweptSphereRadius ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCcdSweptSphereRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getCollisionFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   collisionShape ;", "}", "METHOD_END"], "methodName": ["getCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getCompanionId ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   contactCallbackFilter ;", "}", "METHOD_END"], "methodName": ["getContactCallbackFilter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   contactCallbackFlag ;", "}", "METHOD_END"], "methodName": ["getContactCallbackFlag"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getContactDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactDamping"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getContactProcessingThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getContactStiffness ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getCustomDebugColor ( swigCPtr ,    this ,    colorRGB )  ;", "}", "METHOD_END"], "methodName": ["getCustomDebugColor"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getDeactivationTime ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getFriction ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getHitFraction ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   swigCPtr    =  =     0     ?    null    :    instances . get ( swigCPtr )  ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "if    ( swigCPtr    =  =     0  )", "return   null ;", "result    =    instances . get ( swigCPtr )  ;", "if    ( result    =  =    null )", "result    =    new    ( swigCPtr ,    owner )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getInternalType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInternalType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getInterpolationAngularVelocity _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ getInterpolationAngularVelocity _  _ SWIG _  1  ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getInterpolationLinearVelocity _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ getInterpolationLinearVelocity _  _ SWIG _  1  ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getInterpolationWorldTransform _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ getInterpolationWorldTransform _  _ SWIG _  2  ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getIslandTag ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIslandTag"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getRestitution ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getRollingFriction ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getSpinningFriction ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpinningFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getUpdateRevisionInternal ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpdateRevisionInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getUserIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getUserIndex 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserIndex2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getUserPointer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   userValue ;", "}", "METHOD_END"], "methodName": ["getUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getWorldArrayIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWorldArrayIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ getWorldTransform _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ getWorldTransform _  _ SWIG _  2  ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ hasAnisotropicFriction _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ hasAnisotropicFriction _  _ SWIG _  0  ( swigCPtr ,    this ,    frictionMode )  ;", "}", "METHOD_END"], "methodName": ["hasAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ hasContactResponse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasContactResponse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObject _ internalGetCollisionShape _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["internalGetCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ internalGetExtensionPointer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetExtensionPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObject _ internalGetGdxBridge ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   GdxCollisionObjectBridge ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["internalGetGdxBridge"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ internalSetCollisionShape ( swigCPtr ,    this ,    btCollisionShape . getCPtr ( collisionShape )  ,    collisionShape )  ;", "}", "METHOD_END"], "methodName": ["internalSetCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ internalSetExtensionPointer ( swigCPtr ,    this ,    pointer )  ;", "}", "METHOD_END"], "methodName": ["internalSetExtensionPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ internalSetGdxBridge ( swigCPtr ,    this ,    GdxCollisionObjectBridge . getCPtr ( bridge )  ,    bridge )  ;", "}", "METHOD_END"], "methodName": ["internalSetGdxBridge"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ isActive ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isActive"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ isKinematicObject ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isKinematicObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ isStaticObject ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isStaticObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ isStaticOrKinematicObject ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isStaticOrKinematicObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ mergesSimulationIslands ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["mergesSimulationIslands"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "if    (  ( collisionShape )     =  =    shape )", "return ;", "if    (  ( collisionShape )     !  =    null )", "collisionShape . release (  )  ;", "collisionShape    =    shape ;", "collisionShape . obtain (  )  ;", "}", "METHOD_END"], "methodName": ["refCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ removeCustomDebugColor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["removeCustomDebugColor"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "instances . remove ( btCollisionObject . getCPtr ( obj )  )  ;", "}", "METHOD_END"], "methodName": ["removeInstance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObject _ serialize ( swigCPtr ,    this ,    dataBuffer ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ serializeSingleObject ( swigCPtr ,    this ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serializeSingleObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setActivationState ( swigCPtr ,    this ,    newState )  ;", "}", "METHOD_END"], "methodName": ["setActivationState"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setAnisotropicFriction _  _ SWIG _  1  ( swigCPtr ,    this ,    anisotropicFriction )  ;", "}", "METHOD_END"], "methodName": ["setAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setAnisotropicFriction _  _ SWIG _  0  ( swigCPtr ,    this ,    anisotropicFriction ,    frictionMode )  ;", "}", "METHOD_END"], "methodName": ["setAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setBroadphaseHandle ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( handle )  ,    handle )  ;", "}", "METHOD_END"], "methodName": ["setBroadphaseHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setCcdMotionThreshold ( swigCPtr ,    this ,    ccdMotionThreshold )  ;", "}", "METHOD_END"], "methodName": ["setCcdMotionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setCcdSweptSphereRadius ( swigCPtr ,    this ,    radius )  ;", "}", "METHOD_END"], "methodName": ["setCcdSweptSphereRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setCollisionFlags ( swigCPtr ,    this ,    flags )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "refCollisionShape ( shape )  ;", "internalSeShape ( shape )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setCompanionId ( swigCPtr ,    this ,    id )  ;", "}", "METHOD_END"], "methodName": ["setCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "gdxBridge . setContactCallbackFilter (  ( contactCallbackFilter    =    filter )  )  ;", "}", "METHOD_END"], "methodName": ["setContactCallbackFilter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "gdxBridge . setContactCallbackFlag (  ( contactCallbackFlag    =    flag )  )  ;", "}", "METHOD_END"], "methodName": ["setContactCallbackFlag"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setContactProcessingThreshold ( swigCPtr ,    this ,    contactProcessingThreshold )  ;", "}", "METHOD_END"], "methodName": ["setContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setContactStiffnessAndDamping ( swigCPtr ,    this ,    stiffness ,    damping )  ;", "}", "METHOD_END"], "methodName": ["setContactStiffnessAndDamping"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setCustomDebugColor ( swigCPtr ,    this ,    colorRGB )  ;", "}", "METHOD_END"], "methodName": ["setCustomDebugColor"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setDeactivationTime ( swigCPtr ,    this ,    time )  ;", "}", "METHOD_END"], "methodName": ["setDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setFriction ( swigCPtr ,    this ,    frict )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setHitFraction ( swigCPtr ,    this ,    hitFraction )  ;", "}", "METHOD_END"], "methodName": ["setHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setIgnoreCollisionCheck ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( co )  ,    co ,    ignoreCollisionCheck )  ;", "}", "METHOD_END"], "methodName": ["setIgnoreCollisionCheck"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setInterpolationAngularVelocity ( swigCPtr ,    this ,    angvel )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setInterpolationLinearVelocity ( swigCPtr ,    this ,    linvel )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setInterpolationWorldTransform ( swigCPtr ,    this ,    trans )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setIslandTag ( swigCPtr ,    this ,    tag )  ;", "}", "METHOD_END"], "methodName": ["setIslandTag"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setRestitution ( swigCPtr ,    this ,    rest )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setRollingFriction ( swigCPtr ,    this ,    frict )  ;", "}", "METHOD_END"], "methodName": ["setRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setSpinningFriction ( swigCPtr ,    this ,    frict )  ;", "}", "METHOD_END"], "methodName": ["setSpinningFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setUserIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setUserIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setUserIndex 2  ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setUserIndex2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setUserPointer ( swigCPtr ,    this ,    userPointer )  ;", "}", "METHOD_END"], "methodName": ["setUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "gdxBridge . setUserValue (  ( userValue    =    value )  )  ;", "}", "METHOD_END"], "methodName": ["setUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setWorldArrayIndex ( swigCPtr ,    this ,    ix )  ;", "}", "METHOD_END"], "methodName": ["setWorldArrayIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObject _ setWorldTransform ( swigCPtr ,    this ,    worldTrans )  ;", "}", "METHOD_END"], "methodName": ["setWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionObjectArray _ atConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ copyFromArray ( swigCPtr ,    this ,    btCollisionObjectArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectArray _ findBinarySearch ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findBinarySearch"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectArray _ findLinearSearch ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectArray _ findLinearSearch 2  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btCollisionObjectArray ( CollisionJNI . btCollisionObjectArray _ operatorAssignment ( swigCPtr ,    this ,    btCollisionObjectArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionObjectArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ push _ back ( swigCPtr ,    this ,    btCollisionObject . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ remove ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    btCollisionObject . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectConstArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionObjectConstArray _ atConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectConstArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ copyFromArray ( swigCPtr ,    this ,    btCollisionObjectConstArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectConstArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectConstArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectConstArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectConstArray _ findBinarySearch ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findBinarySearch"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectConstArray _ findLinearSearch ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectConstArray _ findLinearSearch 2  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btCollisionObjectConstArray ( CollisionJNI . btCollisionObjectConstArray _ operatorAssignment ( swigCPtr ,    this ,    btCollisionObjectConstArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btCollisionObject ( CollisionJNI . btCollisionObjectConstArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionObjectConstArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ push _ back ( swigCPtr ,    this ,    btCollisionObject . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ remove ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    btCollisionObject . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectConstArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectConstArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectConstArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ activationState 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getActivationState1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectDoubleData _ anisotropicFriction _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ broadphaseHandle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBroadphaseHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ ccdMotionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCcdMotionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ ccdSweptSphereRadius _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCcdSweptSphereRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ checkCollideWith _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCheckCollideWith"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ collisionFlags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ collisionShape _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ companionId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ contactDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactDamping"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ contactProcessingThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ contactStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ deactivationTime _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ hasAnisotropicFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHasAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ hitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ internalType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInternalType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectDoubleData _ interpolationAngularVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectDoubleData _ interpolationLinearVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectDoubleData _ interpolationWorldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ islandTag 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIslandTag1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ name _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ restitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectDoubleData _ rollingFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectDoubleData _ rootCollisionShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRootCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectDoubleData _ worldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ activationState 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setActivationState1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ anisotropicFriction _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ broadphaseHandle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBroadphaseHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ ccdMotionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCcdMotionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ ccdSweptSphereRadius _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCcdSweptSphereRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ checkCollideWith _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCheckCollideWith"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ collisionFlags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ collisionShape _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ companionId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ contactDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactDamping"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ contactProcessingThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ contactStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ deactivationTime _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ hasAnisotropicFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHasAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ hitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ internalType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInternalType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ interpolationAngularVelocity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ interpolationLinearVelocity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ interpolationWorldTransform _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ islandTag 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIslandTag1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ name _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ restitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ rollingFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ rootCollisionShape _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRootCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectDoubleData _ worldTransform _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ activationState 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getActivationState1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectFloatData _ anisotropicFriction _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ broadphaseHandle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBroadphaseHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ ccdMotionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCcdMotionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ ccdSweptSphereRadius _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCcdSweptSphereRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ checkCollideWith _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCheckCollideWith"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ collisionFlags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ collisionShape _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ companionId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ contactDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactDamping"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ contactProcessingThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ contactStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ deactivationTime _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ hasAnisotropicFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHasAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ hitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ internalType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInternalType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectFloatData _ interpolationAngularVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectFloatData _ interpolationLinearVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectFloatData _ interpolationWorldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInterpolationWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ islandTag 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIslandTag1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ name _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ restitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectFloatData _ rollingFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectFloatData _ rootCollisionShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRootCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectFloatData _ worldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ activationState 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setActivationState1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ anisotropicFriction _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ broadphaseHandle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBroadphaseHandle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ ccdMotionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCcdMotionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ ccdSweptSphereRadius _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCcdSweptSphereRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ checkCollideWith _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCheckCollideWith"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ collisionFlags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ collisionShape _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ companionId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ contactDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactDamping"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ contactProcessingThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ contactStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ deactivationTime _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ hasAnisotropicFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHasAnisotropicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ hitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ internalType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInternalType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ interpolationAngularVelocity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ interpolationLinearVelocity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ interpolationWorldTransform _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInterpolationWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ islandTag 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIslandTag1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ name _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ restitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ rollingFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ rootCollisionShape _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRootCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectFloatData _ worldTransform _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionObjectWrapper _ collisionObject _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectWrapper _ getCollisionShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectWrapper _ index _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObjectWrapper . internalTemp ( CollisionJNI . btCollisionObjectWrapper _ parent _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectWrapper _ partId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPartId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionObjectWrapper _ shape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionObjectWrapper _ worldTransform _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "btCollisionObjectWrapper . temp . reset ( cPtr ,    own )  ;", "return   btCollisionObjectWrapper . temp ;", "}", "METHOD_END"], "methodName": ["internalTemp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "btCollisionObjectWrapper   instance    =    btCollisionObjectWrapper . argumentInstances [  ( btCollisionObjectWrapper . argumentIndex    =     (  ( btCollisionObjectWrapper . argumentIndex )     +     1  )     &     3  )  ]  ;", "instance . reset ( swigCPtr ,    owner )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["obtainForArgument"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectWrapper _ collisionObject _ set ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectWrapper _ index _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectWrapper _ parent _ set ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectWrapper _ partId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPartId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionObjectWrapper _ shape _ set ( swigCPtr ,    this ,    btCollisionShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionObjectWrapper"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ calculateLocalInertia ( swigCPtr ,    this ,    mass ,    inertia )  ;", "}", "METHOD_END"], "methodName": ["calculateLocalInertia"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ calculateSerializeBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ calculateTemporalAabb ( swigCPtr ,    this ,    curTrans ,    linvel ,    angvel ,    timeStep ,    temporalAabbMin ,    temporalAabbMax )  ;", "}", "METHOD_END"], "methodName": ["calculateTemporalAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ getAabb ( swigCPtr ,    this ,    t ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getAngularMotionDisc ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularMotionDisc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getAnisotropicRollingFrictionDirection ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAnisotropicRollingFrictionDirection"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ getBoundingSphere ( swigCPtr ,    this ,    center ,    SWIGTYPE _ p _ float . getCPtr ( radius )  )  ;", "}", "METHOD_END"], "methodName": ["getBoundingSphere"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getContactBreakingThreshold ( swigCPtr ,    this ,    defaultContactThresholdFactor )  ;", "}", "METHOD_END"], "methodName": ["getContactBreakingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getLocalScaling ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getMargin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getName ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getShapeType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getUserIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ getUserPointer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isCompound ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isCompound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isConcave ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isConcave"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isConvex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isConvex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isConvex 2 d ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isConvex2d"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isInfinite ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isInfinite"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isNonMoving ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isNonMoving"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isPolyhedral ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isPolyhedral"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ isSoftBody ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "if    ( swigCPtr    =  =     0  )     {", "return   null ;", "}", "final   int   shapeType    =    CollisionJNI _ getShapeType ( swigCPtr ,    null )  ;", "switch    ( shapeType )     {", "case   BroadphaseNativeTypes . BOX _ SHAPE _ PROXYTYPE    :", "return   new   btBoxShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . TRIANGLE _ SHAPE _ PROXYTYPE    :", "return   new   btTriangleShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . TETRAHEDRAL _ SHAPE _ PROXYTYPE    :", "return   new   btBU _ Simplex 1 to 4  ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CONVEX _ TRIANGLEMESH _ SHAPE _ PROXYTYPE    :", "return   new   btConvexTriangleMeshShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CONVEX _ HULL _ SHAPE _ PROXYTYPE    :", "return   new   btConvexHullShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CONVEX _ POINT _ CLOUD _ SHAPE _ PROXYTYPE    :", "return   new   btConvexPointCloudShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CUSTOM _ POLYHEDRAL _ SHAPE _ TYPE    :", "break ;", "case   BroadphaseNativeTypes . SPHERE _ SHAPE _ PROXYTYPE    :", "return   new   btSphereShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . MULTI _ SPHERE _ SHAPE _ PROXYTYPE    :", "return   new   btMultiSphereShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CAPSULE _ SHAPE _ PROXYTYPE    :", "return   new   btCapsuleShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CONE _ SHAPE _ PROXYTYPE    :", "return   new   btConeShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CONVEX _ SHAPE _ PROXYTYPE    :", "return   new   btConvexShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CYLINDER _ SHAPE _ PROXYTYPE    :", "return   new   btCylinderShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . UNIFORM _ SCALING _ SHAPE _ PROXYTYPE    :", "return   new   btUniformScalingShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . MINKOWSKI _ SUM _ SHAPE _ PROXYTYPE    :", "break ;", "case   BroadphaseNativeTypes . MINKOWSKI _ DIFFERENCE _ SHAPE _ PROXYTYPE    :", "return   new   btMinkowskiSumShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . BOX _  2 D _ SHAPE _ PROXYTYPE    :", "return   new   btBox 2 dShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CONVEX _  2 D _ SHAPE _ PROXYTYPE    :", "return   new   btConvex 2 dShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CUSTOM _ CONVEX _ SHAPE _ TYPE    :", "break ;", "case   BroadphaseNativeTypes . TRIANGLE _ MESH _ SHAPE _ PROXYTYPE    :", "return   new   btBvhTriangleMeshShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . SCALED _ TRIANGLE _ MESH _ SHAPE _ PROXYTYPE    :", "return   new   btScaledBvhTriangleMeshShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . FAST _ CONCAVE _ MESH _ PROXYTYPE    :", "break ;", "case   BroadphaseNativeTypes . TERRAIN _ SHAPE _ PROXYTYPE    :", "return   new   btHeightfieldTerrainShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . MULTIMATERIAL _ TRIANGLE _ MESH _ PROXYTYPE    :", "return   new   btMultimaterialTriangleMeshShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . EMPTY _ SHAPE _ PROXYTYPE    :", "return   new   btEmptyShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . STATIC _ PLANE _ PROXYTYPE    :", "return   new   btStaticPlaneShape ( swigCPtr ,    owner )  ;", "case   BroadphaseNativeTypes . CUSTOM _ CONCAVE _ SHAPE _ TYPE    :", "break ;", "case   BroadphaseNativeTypes . COMPOUND _ SHAPE _ PROXYTYPE    :", "return   new   btCompoundShape ( swigCPtr ,    owner )  ;", "}", "throw   new   RuntimeException (  (  \" Unknown   shape   type    \"     +     ( Integer . toString ( shapeType )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["newDerivedObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShape _ serialize ( swigCPtr ,    this ,    dataBuffer ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ serializeSingleShape ( swigCPtr ,    this ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serializeSingleShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ setLocalScaling ( swigCPtr ,    this ,    scaling )  ;", "}", "METHOD_END"], "methodName": ["setLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ setMargin ( swigCPtr ,    this ,    margin )  ;", "}", "METHOD_END"], "methodName": ["setMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ setUserIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setUserIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShape _ setUserPointer ( swigCPtr ,    this ,    userPtr )  ;", "}", "METHOD_END"], "methodName": ["setUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShapeData _ name _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShapeData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionShapeData _ shapeType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShapeData _ name _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShapeData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionShapeData _ shapeType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ addCollisionObject _  _ SWIG _  2  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject )  ;", "}", "METHOD_END"], "methodName": ["addCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ addCollisionObject _  _ SWIG _  1  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    collisionFilterGroup )  ;", "}", "METHOD_END"], "methodName": ["addCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ addCollisionObject _  _ SWIG _  0  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    collisionFilterGroup ,    collisionFilterMask )  ;", "}", "METHOD_END"], "methodName": ["addCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ computeOverlappingPairs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["computeOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ contactPairTest ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObjA )  ,    colObjA ,    btCollisionObject . getCPtr ( colObjB )  ,    colObjB ,    ContactResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["contactPairTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ contactTest ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj )  ,    colObj ,    ContactResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["contactTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ convexSweepTest _  _ SWIG _  1  ( swigCPtr ,    this ,    btConvexShape . getCPtr ( castShape )  ,    castShape ,    from ,    to ,    ConvexResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["convexSweepTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ convexSweepTest _  _ SWIG _  0  ( swigCPtr ,    this ,    btConvexShape . getCPtr ( castShape )  ,    castShape ,    from ,    to ,    ConvexResultCallback . getCPtr ( resultCallback )  ,    resultCallback ,    allowedCcdPenetration )  ;", "}", "METHOD_END"], "methodName": ["convexSweepTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ debugDrawObject ( swigCPtr ,    this ,    worldTransform ,    btCollisionShape . getCPtr ( shape )  ,    shape ,    color )  ;", "}", "METHOD_END"], "methodName": ["debugDrawObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ debugDrawWorld ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["debugDrawWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorld _ getBroadphase ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBroadphaseInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBroadphase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorld _ getBroadphaseConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBroadphaseInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBroadphaseConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btCollisionObjectArray ( CollisionJNI . btCollisionWorld _ getCollisionObjectArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btCollisionObjectArray ( CollisionJNI . btCollisionWorld _ getCollisionObjectArrayConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectArrayConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorld _ getDebugDrawer ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btIDebugDraw ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDebugDrawer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btDispatcherInfo ( CollisionJNI . btCollisionWorld _ getDispatchInfo ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDispatchInfo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btDispatcherInfo ( CollisionJNI . btCollisionWorld _ getDispatchInfoConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDispatchInfoConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorld _ getDispatcher ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDispatcher ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDispatcher"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorld _ getDispatcherConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDispatcher ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDispatcherConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorld _ getForceUpdateAllAabbs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getForceUpdateAllAabbs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorld _ getNumCollisionObjects ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumCollisionObjects"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorld _ getPairCache ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlappingPairCache ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPairCache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ objectQuerySingle ( btConvexShape . getCPtr ( castShape )  ,    castShape ,    rayFromTrans ,    rayToTrans ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    btCollisionShape . getCPtr ( collisionShape )  ,    collisionShape ,    colObjWorldTransform ,    ConvexResultCallback . getCPtr ( resultCallback )  ,    resultCallback ,    allowedPenetration )  ;", "}", "METHOD_END"], "methodName": ["objectQuerySingle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ objectQuerySingleInternal ( btConvexShape . getCPtr ( castShape )  ,    castShape ,    convexFromTrans ,    convexToTrans ,    btCollisionObjectWrapper . getCPtr ( colObjWrap )  ,    colObjWrap ,    ConvexResultCallback . getCPtr ( resultCallback )  ,    resultCallback ,    allowedPenetration )  ;", "}", "METHOD_END"], "methodName": ["objectQuerySingleInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ performDiscreteCollisionDetection ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["performDiscreteCollisionDetection"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ rayTest ( swigCPtr ,    this ,    rayFromWorld ,    rayToWorld ,    RayResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ rayTestSingle ( rayFromTrans ,    rayToTrans ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    btCollisionShape . getCPtr ( collisionShape )  ,    collisionShape ,    colObjWorldTransform ,    RayResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTestSingle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ rayTestSingleInternal ( rayFromTrans ,    rayToTrans ,    btCollisionObjectWrapper . getCPtr ( collisionObjectWrap )  ,    collisionObjectWrap ,    RayResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTestSingleInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ removeCollisionObject ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject )  ;", "}", "METHOD_END"], "methodName": ["removeCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ serialize ( swigCPtr ,    this ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ setBroadphase ( swigCPtr ,    this ,    btBroadphaseInterface . getCPtr ( pairCache )  ,    pairCache )  ;", "}", "METHOD_END"], "methodName": ["setBroadphase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ setDebugDrawer ( swigCPtr ,    this ,    btIDebugDraw . getCPtr ( debugDrawer )  ,    debugDrawer )  ;", "}", "METHOD_END"], "methodName": ["setDebugDrawer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ setForceUpdateAllAabbs ( swigCPtr ,    this ,    forceUpdateAllAabbs )  ;", "}", "METHOD_END"], "methodName": ["setForceUpdateAllAabbs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ updateAabbs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateAabbs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorld _ updateSingleAabb ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( colObj )  ,    colObj )  ;", "}", "METHOD_END"], "methodName": ["updateSingleAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorld"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorldImporter _ convertAllObjects ( swigCPtr ,    this ,    btBulletSerializedArrays . getCPtr ( arrays )  ,    arrays )  ;", "}", "METHOD_END"], "methodName": ["convertAllObjects"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createBoxShape ( swigCPtr ,    this ,    halfExtents )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createBoxShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createBvhTriangleMeshShape ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( trimesh )  ,    trimesh ,    btOptimizedBvh . getCPtr ( bvh )  ,    bvh )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBvhTriangleMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createBvhTriangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createCapsuleShapeX ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCapsuleShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createCapsuleShapeY ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCapsuleShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createCapsuleShapeZ ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCapsuleShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionWorldImporter _ createCollisionObject ( swigCPtr ,    this ,    startTransform ,    btCollisionShape . getCPtr ( shape )  ,    shape ,    bodyName )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createCompoundShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCompoundShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCompoundShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createConeShapeX ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createConeShapeY ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createConeShapeZ ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createConvexHullShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexHullShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConvexHullShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createConvexTriangleMeshShape ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( trimesh )  ,    trimesh )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConvexTriangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createCylinderShapeX ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCylinderShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createCylinderShapeY ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCylinderShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createCylinderShapeZ ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCylinderShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createMeshInterface ( swigCPtr ,    this ,    btStridingMeshInterfaceData . getCPtr ( meshData )  ,    meshData )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleIndexVertexArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "assert   radi . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "long   cPtr    =    CollisionJNI _ createMultiSphereShape ( swigCPtr ,    this ,    btVector 3  . getCPtr ( positions )  ,    positions ,    radi ,    numSpheres )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiSphereShape ( cPtr ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["createMultiSphereShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createOptimizedBvh ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createOptimizedBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createPlaneShape ( swigCPtr ,    this ,    planeNormal ,    planeConstant )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createPlaneShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createScaledTrangleMeshShape ( swigCPtr ,    this ,    btBvhTriangleMeshShape . getCPtr ( meshShape )  ,    meshShape ,    localScalingbtBvhTriangleMeshShape )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScaledBvhTriangleMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createScaledTrangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createSphereShape ( swigCPtr ,    this ,    radius )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createSphereShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createStridingMeshInterfaceData ( swigCPtr ,    this ,    btStridingMeshInterfaceData . getCPtr ( interfaceData )  ,    interfaceData )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterfaceData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createStridingMeshInterfaceData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createTriangleInfoMap ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfoMap ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ createTriangleMeshContainer ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleIndexVertexArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTriangleMeshContainer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorldImporter _ deleteAllData ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["deleteAllData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ getBvhByIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionWorldImporter _ getCollisionObjectByName ( swigCPtr ,    this ,    name )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectByName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ getCollisionShapeByIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ getCollisionShapeByName ( swigCPtr ,    this ,    name )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeByName"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorldImporter _ getNameForPointer ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["getNameForPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorldImporter _ getNumBvhs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumBvhs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorldImporter _ getNumCollisionShapes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumCollisionShapes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorldImporter _ getNumRigidBodies ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumRigidBodies"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorldImporter _ getNumTriangleInfoMaps ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTriangleInfoMaps"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btCollisionWorldImporter _ getRigidBodyByIndex ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCollisionWorldImporter _ getTriangleInfoMapByIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfoMap ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTriangleInfoMapByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCollisionWorldImporter _ getVerboseMode ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVerboseMode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCollisionWorldImporter _ setVerboseMode ( swigCPtr ,    this ,    verboseMode )  ;", "}", "METHOD_END"], "methodName": ["setVerboseMode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCollisionWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundCollisionAlgorithm _ getChildAlgorithm ( swigCPtr ,    this ,    n )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionAlgorithm ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundCompoundCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundFromGimpactShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundFromGimpactShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundFromGimpactShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundFromGimpactShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundFromGimpactShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundFromGimpactShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundFromGimpactShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundFromGimpactShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundFromGimpactShape"}, {"methodBody": ["METHOD_START", "{", "internalAddChildShape ( localTransform ,    shape )  ;", "children . add ( shape )  ;", "shape . obtain (  )  ;", "}", "METHOD_END"], "methodName": ["addChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "assert   masses . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ calculatePrincipalAxisTransform ( swigCPtr ,    this ,    masses ,    principal ,    inertia )  ;", "}", "}", "METHOD_END"], "methodName": ["calculatePrincipalAxisTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ createAabbTreeFromChildren ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["createAabbTreeFromChildren"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShape _ getChildList ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCompoundShapeChild ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildList"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   children . get ( index )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ getChildTransform ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getChildTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ getChildTransformConst ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getChildTransformConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShape _ getDynamicAabbTree ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDynamicAabbTree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShape _ getDynamicAabbTreeConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDynamicAabbTreeConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ getNumChildShapes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumChildShapes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ getUpdateRevision ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpdateRevision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ internalAddChildShape ( swigCPtr ,    this ,    localTransform ,    btCollisionShape . getCPtr ( shape )  ,    shape )  ;", "}", "METHOD_END"], "methodName": ["internalAddChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ internalRemoveChildShape ( swigCPtr ,    this ,    btCollisionShape . getCPtr ( shape )  ,    shape )  ;", "}", "METHOD_END"], "methodName": ["internalRemoveChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ internalRemoveChildShapeByIndex ( swigCPtr ,    this ,    childShapeindex )  ;", "}", "METHOD_END"], "methodName": ["internalRemoveChildShapeByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ recalculateLocalAabb ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["recalculateLocalAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "internalRemoveChildShape ( shape )  ;", "final   int   idx    =    children . indexOf ( shape ,    false )  ;", "if    ( idx    >  =     0  )", "children . removeIndex ( idx )  . release (  )  ;", "}", "METHOD_END"], "methodName": ["removeChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "internalRemoveChildShapeByIndex ( index )  ;", "children . removeIndex ( index )  . release (  )  ;", "}", "METHOD_END"], "methodName": ["removeChildShapeByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ updateChildTransform _  _ SWIG _  1  ( swigCPtr ,    this ,    childIndex ,    newChildTransform )  ;", "}", "METHOD_END"], "methodName": ["updateChildTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShape _ updateChildTransform _  _ SWIG _  0  ( swigCPtr ,    this ,    childIndex ,    newChildTransform ,    shouldRecalculateLocalAabb )  ;", "}", "METHOD_END"], "methodName": ["updateChildTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChild _ childMargin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getChildMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShapeChild _ childShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChild _ childShapeType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getChildShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btCompoundShapeChild _ node _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShapeChild _ transform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChild _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChild _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChild _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChild _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ childMargin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ childShape _ set ( swigCPtr ,    this ,    btCollisionShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ childShapeType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ node _ set ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChild _ transform _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChild"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChildData _ childMargin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getChildMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShapeChildData _ childShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeChildData _ childShapeType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getChildShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShapeChildData _ transform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChildData _ childMargin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChildData _ childShape _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChildData _ childShapeType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeChildData _ transform _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeChildData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShapeData _ childShapePtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCompoundShapeChildData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShapePtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeData _ collisionMargin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCompoundShapeData _ collisionShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCompoundShapeData _ numChildShapes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumChildShapes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeData _ childShapePtr _ set ( swigCPtr ,    this ,    btCompoundShapeChildData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildShapePtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeData _ collisionMargin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeData _ collisionShapeData _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCompoundShapeData _ numChildShapes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumChildShapes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCompoundShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConcaveShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConcaveShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConcaveShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConcaveShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConcaveShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConcaveShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConcaveShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConcaveShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConcaveShape _ processAllTriangles ( swigCPtr ,    this ,    btTriangleCallback . getCPtr ( callback )  ,    callback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["processAllTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConcaveShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShape _ getConeUpIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getConeUpIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShape _ getHeight ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHeight"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShape _ getRadius ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShape _ setConeUpIndex ( swigCPtr ,    this ,    upIndex )  ;", "}", "METHOD_END"], "methodName": ["setConeUpIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShape _ setHeight ( swigCPtr ,    this ,    height )  ;", "}", "METHOD_END"], "methodName": ["setHeight"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShape _ setRadius ( swigCPtr ,    this ,    radius )  ;", "}", "METHOD_END"], "methodName": ["setRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConeShapeData _ convexInternalShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexInternalShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShapeData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConeShapeData _ upIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShapeData _ convexInternalShapeData _ set ( swigCPtr ,    this ,    btConvexInternalShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShapeData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConeShapeData _ upIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeX"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConeShapeZ"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConstraintRow _ accumImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAccumImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConstraintRow _ jacDiagInv _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJacDiagInv"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConstraintRow _ lowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConstraintRow _ normal _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConstraintRow _ rhs _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRhs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConstraintRow _ upperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConstraintRow _ accumImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAccumImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConstraintRow _ jacDiagInv _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJacDiagInv"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConstraintRow _ lowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConstraintRow _ normal _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConstraintRow _ rhs _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRhs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConstraintRow _ upperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConstraintRow"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btContactArray _ merge _ contacts _  _ SWIG _  1  ( swigCPtr ,    this ,    btContactArray . getCPtr ( contacts )  ,    contacts )  ;", "}", "METHOD_END"], "methodName": ["merge_contacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btContactArray _ merge _ contacts _  _ SWIG _  0  ( swigCPtr ,    this ,    btContactArray . getCPtr ( contacts )  ,    contacts ,    normal _ contact _ average )  ;", "}", "METHOD_END"], "methodName": ["merge_contacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btContactArray _ merge _ contacts _ unique ( swigCPtr ,    this ,    btContactArray . getCPtr ( contacts )  ,    contacts )  ;", "}", "METHOD_END"], "methodName": ["merge_contacts_unique"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btContactArray _ push _ contact ( swigCPtr ,    this ,    point ,    normal ,    depth ,    feature 1  ,    feature 2  )  ;", "}", "METHOD_END"], "methodName": ["push_contact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btContactArray _ push _ triangle _ contacts ( swigCPtr ,    this ,    GIM _ TRIANGLE _ CONTACT . getCPtr ( tricontact )  ,    tricontact ,    feature 1  ,    feature 2  )  ;", "}", "METHOD_END"], "methodName": ["push_triangle_contacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btContactArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btContinuousConvexCollision"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dConvex2dAlgorithm"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvex 2 dConvex 2 dAlgorithm _ getManifold ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dConvex2dAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvex 2 dConvex 2 dAlgorithm _ setLowLevelOfDetail ( swigCPtr ,    this ,    useLowLevel )  ;", "}", "METHOD_END"], "methodName": ["setLowLevelOfDetail"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dConvex2dAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvex 2 dShape _ getChildShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvex 2 dShape _ getChildShapeConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShapeConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvex 2 dShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvex 2 dShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvex 2 dShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvex 2 dShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvex 2 dShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvex 2 dShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvex 2 dShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvex 2 dShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvex2dShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexCast _ calcTimeOfImpact ( swigCPtr ,    this ,    fromA ,    toA ,    fromB ,    toB ,    btConvexCast . CastResult . getCPtr ( result )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["calcTimeOfImpact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexCast"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexCast"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexConcaveCollisionAlgorithm _ clearCache ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexConcaveCollisionAlgorithm _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConvexAlgorithm"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexConvexAlgorithm _ getManifold ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConvexAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexConvexAlgorithm _ setLowLevelOfDetail ( swigCPtr ,    this ,    useLowLevel )  ;", "}", "METHOD_END"], "methodName": ["setLowLevelOfDetail"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexConvexAlgorithm"}, {"methodBody": ["METHOD_START", "{", "assert   points . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   CollisionJNI . new _  _  _ SWIG _  2  ( points )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtConvexHullShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "assert   points . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   CollisionJNI . new _  _  _ SWIG _  1  ( points ,    numPoints )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtConvexHullShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "assert   points . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   CollisionJNI . new _  _  _ SWIG _  0  ( points ,    numPoints ,    stride )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtConvexHullShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShape _ addPoint _  _ SWIG _  1  ( swigCPtr ,    this ,    point )  ;", "}", "METHOD_END"], "methodName": ["addPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShape _ addPoint _  _ SWIG _  0  ( swigCPtr ,    this ,    point ,    recalculateLocalAabb )  ;", "}", "METHOD_END"], "methodName": ["addPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShape _ getNumPoints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexHullShape _ getPoints ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShape _ getScaledPoint ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getScaledPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexHullShape _ getUnscaledPoints ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUnscaledPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexHullShape _ getUnscaledPointsConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUnscaledPointsConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShape _ optimizeConvexHull ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["optimizeConvexHull"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexHullShapeData _ convexInternalShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexInternalShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShapeData _ numUnscaledPoints _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumUnscaledPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexHullShapeData _ padding 3  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexHullShapeData _ unscaledPointsDoublePtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUnscaledPointsDoublePtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexHullShapeData _ unscaledPointsFloatPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUnscaledPointsFloatPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShapeData _ convexInternalShapeData _ set ( swigCPtr ,    this ,    btConvexInternalShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShapeData _ numUnscaledPoints _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumUnscaledPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShapeData _ padding 3  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShapeData _ unscaledPointsDoublePtr _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnscaledPointsDoublePtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexHullShapeData _ unscaledPointsFloatPtr _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnscaledPointsFloatPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexHullShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalAabbCachingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalAabbCachingShape _ recalcLocalAabb ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["recalcLocalAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalAabbCachingShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShape _ getImplicitShapeDimensions ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getImplicitShapeDimensions"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShape _ getLocalScalingNV ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLocalScalingNV"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShape _ getMarginNV ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMarginNV"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ setImplicitShapeDimensions ( swigCPtr ,    this ,    dimensions )  ;", "}", "METHOD_END"], "methodName": ["setImplicitShapeDimensions"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ setSafeMargin _  _ SWIG _  3  ( swigCPtr ,    this ,    halfExtents )  ;", "}", "METHOD_END"], "methodName": ["setSafeMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ setSafeMargin _  _ SWIG _  2  ( swigCPtr ,    this ,    halfExtents ,    defaultMarginMultiplier )  ;", "}", "METHOD_END"], "methodName": ["setSafeMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ setSafeMargin _  _ SWIG _  1  ( swigCPtr ,    this ,    minDimension )  ;", "}", "METHOD_END"], "methodName": ["setSafeMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShape _ setSafeMargin _  _ SWIG _  0  ( swigCPtr ,    this ,    minDimension ,    defaultMarginMultiplier )  ;", "}", "METHOD_END"], "methodName": ["setSafeMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShapeData _ collisionMargin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexInternalShapeData _ collisionShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexInternalShapeData _ implicitShapeDimensions _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getImplicitShapeDimensions"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexInternalShapeData _ localScaling _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexInternalShapeData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShapeData _ collisionMargin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShapeData _ collisionShapeData _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShapeData _ implicitShapeDimensions _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setImplicitShapeDimensions"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShapeData _ localScaling _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexInternalShapeData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexInternalShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPenetrationDepthSolver _ calcPenDepth ( swigCPtr ,    this ,    btVoronoiSimplexSolver . getCPtr ( simplexSolver )  ,    simplexSolver ,    btConvexShape . getCPtr ( convexA )  ,    convexA ,    btConvexShape . getCPtr ( convexB )  ,    convexB ,    transA ,    transB ,    v ,    pa ,    pb ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw )  ;", "}", "METHOD_END"], "methodName": ["calcPenDepth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPenetrationDepthSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPenetrationDepthSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPlaneCollisionAlgorithm _ collideSingleContact ( swigCPtr ,    this ,    perturbeRot ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap ,    btDispatcherInfo . getCPtr ( dispatchInfo )  ,    dispatchInfo ,    btManifoldResult . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["collideSingleContact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPlaneCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPlaneCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPointCloudShape _ getNumPoints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPointCloudShape _ getScaledPoint ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getScaledPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPointCloudShape _ getUnscaledPoints ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUnscaledPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPointCloudShape _ getUnscaledPointsConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUnscaledPointsConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPointCloudShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPointCloudShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPointCloudShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPointCloudShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPointCloudShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPointCloudShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPointCloudShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPointCloudShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPointCloudShape _ setPoints _  _ SWIG _  2  ( swigCPtr ,    this ,    btVector 3  . getCPtr ( points )  ,    points ,    numPoints )  ;", "}", "METHOD_END"], "methodName": ["setPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPointCloudShape _ setPoints _  _ SWIG _  1  ( swigCPtr ,    this ,    btVector 3  . getCPtr ( points )  ,    points ,    numPoints ,    computeAabb )  ;", "}", "METHOD_END"], "methodName": ["setPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPointCloudShape _ setPoints _  _ SWIG _  0  ( swigCPtr ,    this ,    btVector 3  . getCPtr ( points )  ,    points ,    numPoints ,    computeAabb ,    localScaling )  ;", "}", "METHOD_END"], "methodName": ["setPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPointCloudShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPolyhedron _ extents _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getExtents"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPolyhedron _ faces _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btFace _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFaces"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPolyhedron _ localCenter _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalCenter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPolyhedron _ mC _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMC"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPolyhedron _ mE _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getME"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPolyhedron _ radius _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPolyhedron _ uniqueEdges _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUniqueEdges"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexPolyhedron _ vertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ initialize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPolyhedron _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPolyhedron _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPolyhedron _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPolyhedron _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ project ( swigCPtr ,    this ,    trans ,    dir ,    SWIGTYPE _ p _ float . getCPtr ( minProj )  ,    SWIGTYPE _ p _ float . getCPtr ( maxProj )  ,    witnesPtMin ,    witnesPtMax )  ;", "}", "METHOD_END"], "methodName": ["project"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ extents _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setExtents"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ faces _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btFace _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setFaces"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ localCenter _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalCenter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ mC _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMC"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ mE _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setME"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ radius _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ uniqueEdges _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUniqueEdges"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexPolyhedron _ vertices _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexPolyhedron _ testContainment ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["testContainment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexPolyhedron"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ batchedUnitVectorGetSupportingVertexWithoutMargin ( swigCPtr ,    this ,    btVector 3  . getCPtr ( vectors )  ,    vectors ,    btVector 3  . getCPtr ( supportVerticesOut )  ,    supportVerticesOut ,    numVectors )  ;", "}", "METHOD_END"], "methodName": ["batchedUnitVectorGetSupportingVertexWithoutMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ getAabbNonVirtual ( swigCPtr ,    this ,    t ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getAabbNonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ getAabbSlow ( swigCPtr ,    this ,    t ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getAabbSlow"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ getMarginNonVirtual ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMarginNonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ getNumPreferredPenetrationDirections ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumPreferredPenetrationDirections"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ getPreferredPenetrationDirection ( swigCPtr ,    this ,    index ,    penetrationVector )  ;", "}", "METHOD_END"], "methodName": ["getPreferredPenetrationDirection"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ localGetSupportVertexNonVirtual ( swigCPtr ,    this ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localGetSupportVertexNonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ localGetSupportVertexWithoutMarginNonVirtual ( swigCPtr ,    this ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localGetSupportVertexWithoutMarginNonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ localGetSupportingVertex ( swigCPtr ,    this ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localGetSupportingVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ localGetSupportingVertexWithoutMargin ( swigCPtr ,    this ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localGetSupportingVertexWithoutMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexShape _ project ( swigCPtr ,    this ,    trans ,    dir ,    SWIGTYPE _ p _ float . getCPtr ( minProj )  ,    SWIGTYPE _ p _ float . getCPtr ( maxProj )  ,    witnesPtMin ,    witnesPtMax )  ;", "}", "METHOD_END"], "methodName": ["project"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ clearCache ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ clearWrapperData ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearWrapperData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleCallback _ getAabbMax ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleCallback _ getAabbMin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexTriangleCallback _ manifoldPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getManifoldPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleCallback _ triangleCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleCallback _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleCallback _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleCallback _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleCallback _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     ( btConvexTriangleCallback . class )  )", "CollisionJNI . btConvexTriangleCallback _ processTriangle ( swigCPtr ,    this ,    linearmath . btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "else", "CollisionJNI . btConvexTriangleCallback _ processTriangleSwigExplicitbtConvexTriangleCallback ( swigCPtr ,    this ,    linearmath . btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ manifoldPtr _ set ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setManifoldPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ setTimeStepAndCounters ( swigCPtr ,    this ,    collisionMarginTriangle ,    btDispatcherInfo . getCPtr ( dispatchInfo )  ,    dispatchInfo ,    btCollisionObjectWrapper . getCPtr ( convexBodyWrap )  ,    convexBodyWrap ,    btCollisionObjectWrapper . getCPtr ( triBodyWrap )  ,    triBodyWrap ,    btManifoldResult . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["setTimeStepAndCounters"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleCallback _ triangleCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleMeshShape _ calculatePrincipalAxisTransform ( swigCPtr ,    this ,    principal ,    inertia ,    SWIGTYPE _ p _ float . getCPtr ( volume )  )  ;", "}", "METHOD_END"], "methodName": ["calculatePrincipalAxisTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexTriangleMeshShape _ getMeshInterface ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btConvexTriangleMeshShape _ getMeshInterfaceConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterfaceConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleMeshShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleMeshShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btConvexTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleMeshShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleMeshShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleMeshShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btConvexTriangleMeshShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btConvexTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ getHalfExtentsWithMargin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfExtentsWithMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ getHalfExtentsWithoutMargin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfExtentsWithoutMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ getRadius ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ getUpAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btCylinderShapeData _ convexInternalShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexInternalShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeData _ upAxis _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeData _ convexInternalShapeData _ set ( swigCPtr ,    this ,    btConvexInternalShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeData _ upAxis _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeX _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeX _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeX _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeX _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeX _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeX _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeX _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeX _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeX"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeZ _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeZ _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeZ _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btCylinderShapeZ _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeZ _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeZ _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeZ _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btCylinderShapeZ _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btCylinderShapeZ"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ allocate ( SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( ifree )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btDbvt _  _ sStkNPS _ t . getCPtr ( stock )  ,    btDbvt . sStkNPS . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["allocate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ benchmark (  )  ;", "}", "METHOD_END"], "methodName": ["benchmark"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ clone _  _ SWIG _  1  ( swigCPtr ,    this ,    btDbvt . getCPtr ( dest )  ,    dest )  ;", "}", "METHOD_END"], "methodName": ["clone"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ clone _  _ SWIG _  0  ( swigCPtr ,    this ,    btDbvt . getCPtr ( dest )  ,    dest ,    btDbvt . IClone . getCPtr ( iclone )  ,    iclone )  ;", "}", "METHOD_END"], "methodName": ["clone"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "assert   offsets . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CJNI . btDbvt _ collideKDOP _  _ SWIG _  0  ( btDbvtNode . getCPtr ( root )  ,    root ,    btVector 3  . getCPtr ( normals )  ,    normals ,    offsets ,    count ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "}", "METHOD_END"], "methodName": ["collideKDOP"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "assert   normals . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   offsets . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CJNI . btDbvt _ collideKDOP _  _ SWIG _  1  ( btDbvtNode . getCPtr ( root )  ,    root ,    normals ,    offsets ,    count ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "}", "METHOD_END"], "methodName": ["collideKDOP"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "assert   offsets . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CJNI . btDbvt _ collideOCL _  _ SWIG _  1  ( btDbvtNode . getCPtr ( root )  ,    root ,    btVector 3  . getCPtr ( normals )  ,    normals ,    offsets ,    sortaxis ,    count ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "}", "METHOD_END"], "methodName": ["collideOCL"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "assert   offsets . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CJNI . btDbvt _ collideOCL _  _ SWIG _  0  ( btDbvtNode . getCPtr ( root )  ,    root ,    btVector 3  . getCPtr ( normals )  ,    normals ,    offsets ,    sortaxis ,    count ,    ICollide . getCPtr ( policy )  ,    policy ,    fullsort )  ;", "}", "}", "METHOD_END"], "methodName": ["collideOCL"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "assert   normals . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   offsets . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CJNI . btDbvt _ collideOCL _  _ SWIG _  3  ( btDbvtNode . getCPtr ( root )  ,    root ,    normals ,    offsets ,    sortaxis ,    count ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "}", "METHOD_END"], "methodName": ["collideOCL"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "assert   normals . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   offsets . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CJNI . btDbvt _ collideOCL _  _ SWIG _  2  ( btDbvtNode . getCPtr ( root )  ,    root ,    normals ,    offsets ,    sortaxis ,    count ,    ICollide . getCPtr ( policy )  ,    policy ,    fullsort )  ;", "}", "}", "METHOD_END"], "methodName": ["collideOCL"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ collideTT ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( root 0  )  ,    root 0  ,    btDbvtNode . getCPtr ( root 1  )  ,    root 1  ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["collideTT"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ collideTTpersistentStack ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( root 0  )  ,    root 0  ,    btDbvtNode . getCPtr ( root 1  )  ,    root 1  ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["collideTTpersistentStack"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ collideTU ( btDbvtNode . getCPtr ( root )  ,    root ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["collideTU"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ collideTV ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( root )  ,    root ,    btDbvtAabbMm . getCPtr ( volume )  ,    volume ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["collideTV"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ collideTVNoStackAlloc ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( root )  ,    root ,    btDbvtAabbMm . getCPtr ( volume )  ,    volume ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btDbvtNode _ const _ p _ t . getCPtr ( stack )  ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["collideTVNoStackAlloc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ countLeaves ( btDbvtNode . getCPtr ( node )  ,    node )  ;", "}", "METHOD_END"], "methodName": ["countLeaves"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ empty ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["empty"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ enumLeaves ( btDbvtNode . getCPtr ( root )  ,    root ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["enumLeaves"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ enumNodes ( btDbvtNode . getCPtr ( root )  ,    root ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["enumNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ extractLeaves ( btDbvtNode . getCPtr ( node )  ,    node ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btDbvtNode _ const _ p _ t . getCPtr ( leaves )  )  ;", "}", "METHOD_END"], "methodName": ["extractLeaves"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvt _ free _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ leaves _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLeaves"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ lkhd _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLkhd"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ opath _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOpath"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvt _ root _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRoot"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvt _ stkStack _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btDbvt _  _ sStkNN _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getStkStack"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvt _ insert ( swigCPtr ,    this ,    btDbvtAabbMm . getCPtr ( box )  ,    box ,    data )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["insert"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ maxdepth ( btDbvtNode . getCPtr ( node )  ,    node )  ;", "}", "METHOD_END"], "methodName": ["maxdepth"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "assert   i . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   CJNI . btDbvt _ nearest ( i ,    btDbvt . sStkNPS . getCPtr ( a )  ,    a ,    v ,    l ,    h )  ;", "}", "}", "METHOD_END"], "methodName": ["nearest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ optimizeBottomUp ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["optimizeBottomUp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ optimizeIncremental ( swigCPtr ,    this ,    passes )  ;", "}", "METHOD_END"], "methodName": ["optimizeIncremental"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ optimizeTopDown _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["optimizeTopDown"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ optimizeTopDown _  _ SWIG _  0  ( swigCPtr ,    this ,    bu _ treshold )  ;", "}", "METHOD_END"], "methodName": ["optimizeTopDown"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ rayTest ( btDbvtNode . getCPtr ( root )  ,    root ,    rayFrom ,    rayTo ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ rayTestInternal ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( root )  ,    root ,    rayFrom ,    rayTo ,    rayDirectionInverse ,    signs ,    lambda _ max ,    aabbMin ,    aabbMax ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btDbvtNode _ const _ p _ t . getCPtr ( stack )  ,    ICollide . getCPtr ( policy )  ,    policy )  ;", "}", "METHOD_END"], "methodName": ["rayTestInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ remove ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( leaf )  ,    leaf )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ free _ set ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ leaves _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLeaves"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ lkhd _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLkhd"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ opath _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOpath"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ root _ set ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRoot"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ stkStack _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btDbvt _  _ sStkNN _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setStkStack"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ update _  _ SWIG _  1  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( leaf )  ,    leaf )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ update _  _ SWIG _  2  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( leaf )  ,    leaf ,    btDbvtAabbMm . getCPtr ( volume )  ,    volume )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ update _  _ SWIG _  4  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( leaf )  ,    leaf ,    btDbvtAabbMm . getCPtr ( volume )  ,    volume ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ update _  _ SWIG _  3  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( leaf )  ,    leaf ,    btDbvtAabbMm . getCPtr ( volume )  ,    volume ,    velocity ,    margin )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvt _ update _  _ SWIG _  5  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( leaf )  ,    leaf ,    btDbvtAabbMm . getCPtr ( volume )  ,    volume ,    margin )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ update _  _ SWIG _  0  ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( leaf )  ,    leaf ,    lookahead )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvt _ write ( swigCPtr ,    this ,    btDbvt . IWriter . getCPtr ( iwriter )  ,    iwriter )  ;", "}", "METHOD_END"], "methodName": ["write"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvt"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ Center ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Center"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ Classify ( swigCPtr ,    this ,    n ,    o ,    s )  ;", "}", "METHOD_END"], "methodName": ["Classify"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ Contain ( swigCPtr ,    this ,    btDbvtAabbMm . getCPtr ( a )  ,    a )  ;", "}", "METHOD_END"], "methodName": ["Contain"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtAabbMm _ Expand ( swigCPtr ,    this ,    e )  ;", "}", "METHOD_END"], "methodName": ["Expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ Extents ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Extents"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   new   btDbvtAabbMm ( CollisionJNI . btDbvtAabbMm _ FromCE ( c ,    e )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["FromCE"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   new   btDbvtAabbMm ( CollisionJNI . btDbvtAabbMm _ FromCR ( c ,    r )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["FromCR"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   new   btDbvtAabbMm ( CollisionJNI . btDbvtAabbMm _ FromMM ( mi ,    mx )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["FromMM"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   new   btDbvtAabbMm ( CollisionJNI . btDbvtAabbMm _ FromPoints _  _ SWIG _  1  ( SWIGTYPE _ p _ p _ btVector 3  . getCPtr ( ppts )  ,    n )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["FromPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   new   btDbvtAabbMm ( CollisionJNI . btDbvtAabbMm _ FromPoints _  _ SWIG _  0  ( btVector 3  . getCPtr ( pts )  ,    pts ,    n )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["FromPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ Lengths ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Lengths"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ Maxs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Maxs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ Mins ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Mins"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ ProjectMinimum ( swigCPtr ,    this ,    v ,    signs )  ;", "}", "METHOD_END"], "methodName": ["ProjectMinimum"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtAabbMm _ SignedExpand ( swigCPtr ,    this ,    e )  ;", "}", "METHOD_END"], "methodName": ["SignedExpand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "btDbvtAabbMm . temp . reset ( cPtr ,    own )  ;", "return   btDbvtAabbMm . temp ;", "}", "METHOD_END"], "methodName": ["internalTemp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "btDbvtAabbMm   instance    =    btDbvtAabbMm . argumentInstances [  ( btDbvtAabbMm . argumentIndex    =     (  ( btDbvtAabbMm . argumentIndex )     +     1  )     &     3  )  ]  ;", "instance . reset ( swigCPtr ,    owner )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["obtainForArgument"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ tMaxs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["tMaxs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtAabbMm _ tMins ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["tMins"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtAabbMm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ benchmark ( btBroadphaseInterface . getCPtr ( arg 0  )  ,    arg 0  )  ;", "}", "METHOD_END"], "methodName": ["benchmark"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ collide ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["collide"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ cid _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ cupdates _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCupdates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ deferedcollide _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDeferedcollide"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ dupdates _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDupdates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ fixedleft _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFixedleft"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ fupdates _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFupdates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ gid _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ needcleanup _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNeedcleanup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ newpairs _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNewpairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtBroadphase _ paircache _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlappingPairCache ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPaircache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ pid _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ prediction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPrediction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtBroadphase _ rayTestStacks _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btAlignedObjectArrayT _ btDbvtNode _ const _ p _ t _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRayTestStacks"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ releasepaircache _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getReleasepaircache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtBroadphase _ getSet ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSet"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtBroadphase _ getSet 0  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSet0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtBroadphase _ getSet 1  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSet1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtBroadphase _ sets _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSets"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ stageCurrent _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStageCurrent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtBroadphase _ stageRoots _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ p _ btDbvtProxy ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getStageRoots"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ updates _ call _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpdates_call"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ updates _ done _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpdates_done"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ updates _ ratio _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpdates_ratio"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtBroadphase _ getVelocityPrediction ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVelocityPrediction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ optimize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["optimize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ performDeferredRemoval ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["performDeferredRemoval"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ rayTest _  _ SWIG _  2  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ rayTest _  _ SWIG _  1  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ rayTest _  _ SWIG _  0  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ setAabbForceUpdate ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( absproxy )  ,    absproxy ,    aabbMin ,    aabbMax ,    btDispatcher . getCPtr ( arg 3  )  ,    arg 3  )  ;", "}", "METHOD_END"], "methodName": ["setAabbForceUpdate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ cid _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ cupdates _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCupdates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ deferedcollide _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeferedcollide"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ dupdates _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDupdates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ fixedleft _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFixedleft"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ fupdates _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFupdates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ gid _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ needcleanup _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNeedcleanup"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ newpairs _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNewpairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ paircache _ set ( swigCPtr ,    this ,    btOverlappingPairCache . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPaircache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ pid _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ prediction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPrediction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ rayTestStacks _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btAlignedObjectArrayT _ btDbvtNode _ const _ p _ t _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setRayTestStacks"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ releasepaircache _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setReleasepaircache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ sets _ set ( swigCPtr ,    this ,    btDbvt . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSets"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ stageCurrent _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStageCurrent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ stageRoots _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ btDbvtProxy . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setStageRoots"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ updates _ call _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpdates_call"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ updates _ done _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpdates_done"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ updates _ ratio _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpdates_ratio"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtBroadphase _ setVelocityPrediction ( swigCPtr ,    this ,    prediction )  ;", "}", "METHOD_END"], "methodName": ["setVelocityPrediction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvtNode _ getChild ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChild"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvtNode _ getChild 0  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChild0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvtNode _ getChild 1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChild1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtNode _ childs _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ p _ btDbvtNode ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChilds"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtNode _ data _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtNode _ dataAsInt _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDataAsInt"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphaseProxy . internalTemp ( CollisionJNI . btDbvtNode _ getDataAsProxy ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDataAsProxy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btDbvtNode _ getDataAsProxyClientObject ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDataAsProxyClientObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvtNode _ parent _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtAabbMm . internalTemp ( CollisionJNI . btDbvtNode _ volume _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVolume"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "btDbvtNode . temp . reset ( cPtr ,    own )  ;", "return   btDbvtNode . temp ;", "}", "METHOD_END"], "methodName": ["internalTemp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtNode _ isinternal ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isinternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtNode _ isleaf ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isleaf"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "btDbvtNode   instance    =    btDbvtNode . argumentInstances [  ( btDbvtNode . argumentIndex    =     (  ( btDbvtNode . argumentIndex )     +     1  )     &     3  )  ]  ;", "instance . reset ( swigCPtr ,    owner )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["obtainForArgument"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtNode _ childs _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ btDbvtNode . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setChilds"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtNode _ data _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtNode _ dataAsInt _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDataAsInt"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtNode _ parent _ set ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtNode _ volume _ set ( swigCPtr ,    this ,    btDbvtAabbMm . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVolume"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtNode"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "return   btDbvtNode . internalTemp ( CollisionJNI . btDbvtProxy _ leaf _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLeaf"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDbvtProxy _ links _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ p _ btDbvtProxy ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDbvtProxy _ stage _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStage"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtProxy _ leaf _ set ( swigCPtr ,    this ,    btDbvtNode . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLeaf"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtProxy _ links _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ btDbvtProxy . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setLinks"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDbvtProxy _ stage _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStage"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDbvtProxy"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConfiguration _ setConvexConvexMultipointIterations _  _ SWIG _  2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setConvexConvexMultipointIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConfiguration _ setConvexConvexMultipointIterations _  _ SWIG _  1  ( swigCPtr ,    this ,    numPerturbationIterations )  ;", "}", "METHOD_END"], "methodName": ["setConvexConvexMultipointIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConfiguration _ setConvexConvexMultipointIterations _  _ SWIG _  0  ( swigCPtr ,    this ,    numPerturbationIterations ,    minimumPointsPerturbationThreshold )  ;", "}", "METHOD_END"], "methodName": ["setConvexConvexMultipointIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConfiguration _ setPlaneConvexMultipointIterations _  _ SWIG _  2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setPlaneConvexMultipointIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConfiguration _ setPlaneConvexMultipointIterations _  _ SWIG _  1  ( swigCPtr ,    this ,    numPerturbationIterations )  ;", "}", "METHOD_END"], "methodName": ["setPlaneConvexMultipointIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConfiguration _ setPlaneConvexMultipointIterations _  _ SWIG _  0  ( swigCPtr ,    this ,    numPerturbationIterations ,    minimumPointsPerturbationThreshold )  ;", "}", "METHOD_END"], "methodName": ["setPlaneConvexMultipointIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDefaultCollisionConstructionInfo _ collisionAlgorithmPool _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoolAllocator ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionAlgorithmPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDefaultCollisionConstructionInfo _ customCollisionAlgorithmMaxElementSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCustomCollisionAlgorithmMaxElementSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDefaultCollisionConstructionInfo _ defaultMaxCollisionAlgorithmPoolSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDefaultMaxCollisionAlgorithmPoolSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDefaultCollisionConstructionInfo _ defaultMaxPersistentManifoldPoolSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDefaultMaxPersistentManifoldPoolSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDefaultCollisionConstructionInfo _ persistentManifoldPool _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoolAllocator ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPersistentManifoldPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDefaultCollisionConstructionInfo _ useEpaPenetrationAlgorithm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseEpaPenetrationAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConstructionInfo _ collisionAlgorithmPool _ set ( swigCPtr ,    this ,    btPoolAllocator . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionAlgorithmPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConstructionInfo _ customCollisionAlgorithmMaxElementSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCustomCollisionAlgorithmMaxElementSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConstructionInfo _ defaultMaxCollisionAlgorithmPoolSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDefaultMaxCollisionAlgorithmPoolSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConstructionInfo _ defaultMaxPersistentManifoldPoolSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDefaultMaxPersistentManifoldPoolSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConstructionInfo _ persistentManifoldPool _ set ( swigCPtr ,    this ,    btPoolAllocator . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPersistentManifoldPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDefaultCollisionConstructionInfo _ useEpaPenetrationAlgorithm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseEpaPenetrationAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDefaultCollisionConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDiscreteCollisionDetectorInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDiscreteCollisionDetectorInterface _ getClosestPoints _  _ SWIG _  1  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDiscreteCollisionDetectorInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDiscreteCollisionDetectorInterface _ getClosestPoints _  _ SWIG _  0  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw ,    swapResults )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDiscreteCollisionDetectorInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcher _ allocateCollisionAlgorithm ( swigCPtr ,    this ,    size )  ;", "}", "METHOD_END"], "methodName": ["allocateCollisionAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcher _ clearManifold ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifold )  ,    manifold )  ;", "}", "METHOD_END"], "methodName": ["clearManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcher _ dispatchAllCollisionPairs ( swigCPtr ,    this ,    btOverlappingPairCache . getCPtr ( pairCache )  ,    pairCache ,    btDispatcherInfo . getCPtr ( dispatchInfo )  ,    dispatchInfo ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["dispatchAllCollisionPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDispatcher _ findAlgorithm ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap ,    btPersistentManifold . getCPtr ( sharedManifold )  ,    sharedManifold ,    queryType )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionAlgorithm ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["findAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcher _ freeCollisionAlgorithm ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["freeCollisionAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDispatcher _ getInternalManifoldPointer ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ p _ btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInternalManifoldPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDispatcher _ getInternalManifoldPool ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoolAllocator ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInternalManifoldPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDispatcher _ getInternalManifoldPoolConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoolAllocator ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInternalManifoldPoolConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDispatcher _ getManifoldByIndexInternal ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getManifoldByIndexInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDispatcher _ getNewManifold ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( b 0  )  ,    b 0  ,    btCollisionObject . getCPtr ( b 1  )  ,    b 1  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNewManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcher _ getNumManifolds ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumManifolds"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcher _ needsCollision ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["needsCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcher _ needsResponse ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["needsResponse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcher _ releaseManifold ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifold )  ,    manifold )  ;", "}", "METHOD_END"], "methodName": ["releaseManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcher"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ allowedCcdPenetration _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAllowedCcdPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ convexConservativeDistanceThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getConvexConservativeDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btDispatcherInfo _ debugDraw _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btIDebugDraw ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDebugDraw"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ dispatchFunc _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDispatchFunc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ enableSPU _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableSPU"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ enableSatConvex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableSatConvex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ stepCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStepCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ timeOfImpact _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeOfImpact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ timeStep _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ useContinuous _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseContinuous"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ useConvexConservativeDistanceUtil _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseConvexConservativeDistanceUtil"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btDispatcherInfo _ useEpa _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseEpa"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ allowedCcdPenetration _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAllowedCcdPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ convexConservativeDistanceThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexConservativeDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ debugDraw _ set ( swigCPtr ,    this ,    btIDebugDraw . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDebugDraw"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ dispatchFunc _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDispatchFunc"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ enableSPU _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableSPU"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ enableSatConvex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableSatConvex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ stepCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStepCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ timeOfImpact _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTimeOfImpact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ timeStep _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ useContinuous _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseContinuous"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ useConvexConservativeDistanceUtil _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseConvexConservativeDistanceUtil"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btDispatcherInfo _ useEpa _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseEpa"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btDispatcherInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btElement"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btElement _ id _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btElement"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btElement _ sz _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSz"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btElement"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btElement _ id _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btElement"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btElement _ sz _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSz"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btElement"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btEmptyShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btEmptyShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btEmptyShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btEmptyShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btEmptyShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btEmptyShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btEmptyShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btEmptyShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btEmptyShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btFace"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btFace _ indices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIndices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btFace"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btFace _ plane _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btFace"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btFace _ indices _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setIndices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btFace"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btFace _ plane _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btFace"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ boxQuery ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( collided _ results )  )  ;", "}", "METHOD_END"], "methodName": ["boxQuery"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ boxQueryTrans ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box ,    transform ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( collided _ results )  )  ;", "}", "METHOD_END"], "methodName": ["boxQueryTrans"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactBvh _ buildSet ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["buildSet"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactBvh _ find _ collision ( btGImpactBvh . getCPtr ( boxset 1  )  ,    boxset 1  ,    trans 1  ,    btGImpactBvh . getCPtr ( boxset 2  )  ,    boxset 2  ,    trans 2  ,    btPairSet . getCPtr ( collision _ pairs )  ,    collision _ pairs )  ;", "}", "METHOD_END"], "methodName": ["find_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ getEscapeNodeIndex ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getEscapeNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   new   btAABB ( CollisionJNI . btGImpactBvh _ getGlobalBox ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getGlobalBox"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ getLeftNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getLeftNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactBvh _ getNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["getNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ getNodeCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ getNodeData ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getNodeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactBvh _ getNodeTriangle ( swigCPtr ,    this ,    nodeindex ,    btPrimitiveTriangle . getCPtr ( triangle )  ,    triangle )  ;", "}", "METHOD_END"], "methodName": ["getNodeTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactBvh _ getPrimitiveManager ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPrimitiveManagerBase ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPrimitiveManager"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ getRightNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getRightNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactBvh _ get _ node _ pointer _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ BVH _ TREE _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactBvh _ get _ node _ pointer _  _ SWIG _  0  ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ BVH _ TREE _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ hasHierarchy ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasHierarchy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ isLeafNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["isLeafNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ isTrimesh ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isTrimesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactBvh _ rayQuery ( swigCPtr ,    this ,    ray _ dir ,    ray _ origin ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( collided _ results )  )  ;", "}", "METHOD_END"], "methodName": ["rayQuery"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactBvh _ setNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["setNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactBvh _ setPrimitiveManager ( swigCPtr ,    this ,    btPrimitiveManagerBase . getCPtr ( primitive _ manager )  ,    primitive _ manager )  ;", "}", "METHOD_END"], "methodName": ["setPrimitiveManager"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactBvh _ update ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactBvh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactCollisionAlgorithm _ getFace 0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFace0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactCollisionAlgorithm _ getFace 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFace1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactCollisionAlgorithm _ getPart 0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPart0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactCollisionAlgorithm _ getPart 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPart1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ gimpact _ vs _ compoundshape ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap ,    btGImpactShapeInterface . getCPtr ( shape 0  )  ,    shape 0  ,    btCompoundShape . getCPtr ( shape 1  )  ,    shape 1  ,    swapped )  ;", "}", "METHOD_END"], "methodName": ["gimpact_vs_compoundshape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ gimpact _ vs _ concave ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap ,    btGImpactShapeInterface . getCPtr ( shape 0  )  ,    shape 0  ,    btConcaveShape . getCPtr ( shape 1  )  ,    shape 1  ,    swapped )  ;", "}", "METHOD_END"], "methodName": ["gimpact_vs_concave"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ gimpact _ vs _ gimpact ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap ,    btGImpactShapeInterface . getCPtr ( shape 0  )  ,    shape 0  ,    btGImpactShapeInterface . getCPtr ( shape 1  )  ,    shape 1  )  ;", "}", "METHOD_END"], "methodName": ["gimpact_vs_gimpact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ gimpact _ vs _ shape ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( body 0 Wrap )  ,    body 0 Wrap ,    btCollisionObjectWrapper . getCPtr ( body 1 Wrap )  ,    body 1 Wrap ,    btGImpactShapeInterface . getCPtr ( shape 0  )  ,    shape 0  ,    btCollisionShape . getCPtr ( shape 1  )  ,    shape 1  ,    swapped )  ;", "}", "METHOD_END"], "methodName": ["gimpact_vs_shape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactCollisionAlgorithm _ internalGetResultOut ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btManifoldResult ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["internalGetResultOut"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ registerAlgorithm ( btCollisionDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["registerAlgorithm"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ setFace 0  ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFace0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ setFace 1  ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFace1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ setPart 0  ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPart0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCollisionAlgorithm _ setPart 1  ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPart1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCompoundShape _ addChildShape _  _ SWIG _  0  ( swigCPtr ,    this ,    localTransform ,    btCollisionShape . getCPtr ( shape )  ,    shape )  ;", "}", "METHOD_END"], "methodName": ["addChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCompoundShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactCompoundShape _ addChildShape _  _ SWIG _  1  ( swigCPtr ,    this ,    btCollisionShape . getCPtr ( shape )  ,    shape )  ;", "}", "METHOD_END"], "methodName": ["addChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCompoundShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactCompoundShape _ getCompoundPrimitiveManager ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGImpactCompoundShape . CompoundPrimitiveManager ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCompoundPrimitiveManager"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactCompoundShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShape _ getMeshInterface ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShape _ getMeshInterfaceConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterfaceConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShape _ getMeshPart ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGImpactMeshShapePart ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShape _ getMeshPartConst ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGImpactMeshShapePart ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshPartConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactMeshShape _ getMeshPartCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMeshPartCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactMeshShapeData _ collisionMargin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShapeData _ collisionShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactMeshShapeData _ gimpactSubType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGimpactSubType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShapeData _ localScaling _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShapeData _ meshInterface _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterfaceData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactMeshShapeData _ collisionMargin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactMeshShapeData _ collisionShapeData _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactMeshShapeData _ gimpactSubType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGimpactSubType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactMeshShapeData _ localScaling _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactMeshShapeData _ meshInterface _ set ( swigCPtr ,    this ,    btStridingMeshInterfaceData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapePart"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactMeshShapePart _ getPart ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapePart"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactMeshShapePart _ getTrimeshPrimitiveManager ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGImpactMeshShapePart . TrimeshPrimitiveManager ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTrimeshPrimitiveManager"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapePart"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactMeshShapePart _ getVertex ( swigCPtr ,    this ,    vertex _ index ,    vertex )  ;", "}", "METHOD_END"], "methodName": ["getVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapePart"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactMeshShapePart _ getVertexCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVertexCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactMeshShapePart"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ boxQuery ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( collided _ results )  )  ;", "}", "METHOD_END"], "methodName": ["boxQuery"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ boxQueryTrans ( swigCPtr ,    this ,    btAABB . getCPtr ( box )  ,    box ,    transform ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( collided _ results )  )  ;", "}", "METHOD_END"], "methodName": ["boxQueryTrans"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactQuantizedBvh _ buildSet ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["buildSet"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactQuantizedBvh _ find _ collision ( btGImpactQuantizedBvh . getCPtr ( boxset 1  )  ,    boxset 1  ,    trans 1  ,    btGImpactQuantizedBvh . getCPtr ( boxset 2  )  ,    boxset 2  ,    trans 2  ,    btPairSet . getCPtr ( collision _ pairs )  ,    collision _ pairs )  ;", "}", "METHOD_END"], "methodName": ["find_collision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ getEscapeNodeIndex ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getEscapeNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   new   btAABB ( CollisionJNI . btGImpactQuantizedBvh _ getGlobalBox ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getGlobalBox"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ getLeftNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getLeftNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactQuantizedBvh _ getNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["getNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ getNodeCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ getNodeData ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getNodeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactQuantizedBvh _ getNodeTriangle ( swigCPtr ,    this ,    nodeindex ,    btPrimitiveTriangle . getCPtr ( triangle )  ,    triangle )  ;", "}", "METHOD_END"], "methodName": ["getNodeTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactQuantizedBvh _ getPrimitiveManager ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPrimitiveManagerBase ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPrimitiveManager"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ getRightNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getRightNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactQuantizedBvh _ get _ node _ pointer _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   BT _ QUANTIZED _ BVH _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactQuantizedBvh _ get _ node _ pointer _  _ SWIG _  0  ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   BT _ QUANTIZED _ BVH _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ hasHierarchy ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasHierarchy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ isLeafNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["isLeafNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ isTrimesh ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isTrimesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactQuantizedBvh _ rayQuery ( swigCPtr ,    this ,    ray _ dir ,    ray _ origin ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( collided _ results )  )  ;", "}", "METHOD_END"], "methodName": ["rayQuery"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactQuantizedBvh _ setNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["setNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactQuantizedBvh _ setPrimitiveManager ( swigCPtr ,    this ,    btPrimitiveManagerBase . getCPtr ( primitive _ manager )  ,    primitive _ manager )  ;", "}", "METHOD_END"], "methodName": ["setPrimitiveManager"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactQuantizedBvh _ update ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ childrenHasTransform ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["childrenHasTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactShapeInterface _ getBoxSet ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGImpactQuantizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBoxSet"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ getBulletTetrahedron ( swigCPtr ,    this ,    prim _ index ,    btTetrahedronShapeEx . getCPtr ( tetrahedron )  ,    tetrahedron )  ;", "}", "METHOD_END"], "methodName": ["getBulletTetrahedron"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ getBulletTriangle ( swigCPtr ,    this ,    prim _ index ,    btTriangleShapeEx . getCPtr ( triangle )  ,    triangle )  ;", "}", "METHOD_END"], "methodName": ["getBulletTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ getChildAabb ( swigCPtr ,    this ,    child _ index ,    t ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getChildAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactShapeInterface _ getChildShape ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactShapeInterface _ getChildShapeConst ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShapeConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ getChildTransform ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getChildTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ getGImpactShapeType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGImpactShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   new   btAABB ( CollisionJNI . btGImpactShapeInterface _ getLocalBox ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalBox"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ getNumChildShapes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumChildShapes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGImpactShapeInterface _ getPrimitiveManager ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPrimitiveManagerBase ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPrimitiveManager"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ getPrimitiveTriangle ( swigCPtr ,    this ,    index ,    btPrimitiveTriangle . getCPtr ( triangle )  ,    triangle )  ;", "}", "METHOD_END"], "methodName": ["getPrimitiveTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ getShapeType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ hasBoxSet ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasBoxSet"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ lockChildShapes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["lockChildShapes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ needsRetrieveTetrahedrons ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["needsRetrieveTetrahedrons"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGImpactShapeInterface _ needsRetrieveTriangles ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["needsRetrieveTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ postUpdate ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["postUpdate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ processAllTrianglesRay ( swigCPtr ,    this ,    btTriangleCallback . getCPtr ( arg 0  )  ,    arg 0  ,    arg 1  ,    arg 2  )  ;", "}", "METHOD_END"], "methodName": ["processAllTrianglesRay"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ rayTest ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    RayResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ setChildTransform ( swigCPtr ,    this ,    index ,    transform )  ;", "}", "METHOD_END"], "methodName": ["setChildTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ unlockChildShapes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["unlockChildShapes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGImpactShapeInterface _ updateBound ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGImpactShapeInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ allocate ( swigCPtr ,    this ,    size _ bytes )  ;", "}", "METHOD_END"], "methodName": ["allocate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericMemoryPool _ end _ pool ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["end_pool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ freeMemory ( swigCPtr ,    this ,    pointer )  ;", "}", "METHOD_END"], "methodName": ["freeMemory"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ gem _ element _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["gem_element_size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ allocated _ count _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAllocated_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGenericMemoryPool _ allocated _ sizes _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ size _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAllocated_sizes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGenericMemoryPool _ free _ nodes _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ size _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFree_nodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ free _ nodes _ count _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFree_nodes_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ pool _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ get _ allocated _ count ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["get_allocated_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ get _ element _ data ( swigCPtr ,    this ,    element _ index )  ;", "}", "METHOD_END"], "methodName": ["get_element_data"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ get _ free _ positions _ count ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["get_free_positions_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ get _ max _ element _ count ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["get_max_element_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericMemoryPool _ get _ pool _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["get_pool_capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericMemoryPool _ init _ pool ( swigCPtr ,    this ,    element _ size ,    element _ count )  ;", "}", "METHOD_END"], "methodName": ["init_pool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericMemoryPool _ allocated _ count _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAllocated_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericMemoryPool _ allocated _ sizes _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ size _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setAllocated_sizes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericMemoryPool _ free _ nodes _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ size _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setFree_nodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericMemoryPool _ free _ nodes _ count _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFree_nodes_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ pool _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setPool"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericMemoryPool"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericPoolAllocator _ allocate ( swigCPtr ,    this ,    size _ bytes )  ;", "}", "METHOD_END"], "methodName": ["allocate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericPoolAllocator _ freeMemory ( swigCPtr ,    this ,    pointer )  ;", "}", "METHOD_END"], "methodName": ["freeMemory"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericPoolAllocator _ pool _ count _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPool_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGenericPoolAllocator _ pools _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ p _ btGenericMemoryPool ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPools"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGenericPoolAllocator _ get _ pool _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["get_pool_capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericPoolAllocator _ pool _ count _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPool_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGenericPoolAllocator _ pools _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ btGenericMemoryPool . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setPools"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGenericPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGhostObject _ addOverlappingObjectInternal _  _ SWIG _  1  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy )  ;", "}", "METHOD_END"], "methodName": ["addOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGhostObject _ addOverlappingObjectInternal _  _ SWIG _  0  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy ,    btBroadphaseProxy . getCPtr ( thisProxy )  ,    thisProxy )  ;", "}", "METHOD_END"], "methodName": ["addOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGhostObject _ convexSweepTest _  _ SWIG _  1  ( swigCPtr ,    this ,    btConvexShape . getCPtr ( castShape )  ,    castShape ,    convexFromWorld ,    convexToWorld ,    ConvexResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["convexSweepTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGhostObject _ convexSweepTest _  _ SWIG _  0  ( swigCPtr ,    this ,    btConvexShape . getCPtr ( castShape )  ,    castShape ,    convexFromWorld ,    convexToWorld ,    ConvexResultCallback . getCPtr ( resultCallback )  ,    resultCallback ,    allowedCcdPenetration )  ;", "}", "METHOD_END"], "methodName": ["convexSweepTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGhostObject _ getNumOverlappingObjects ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumOverlappingObjects"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btGhostObject _ getOverlappingObject ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btGhostObject _ getOverlappingObjectConst ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingObjectConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   new   btCollisionObjectArray ( CollisionJNI . btGhostObject _ getOverlappingPairs ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   new   btCollisionObjectArray ( CollisionJNI . btGhostObject _ getOverlappingPairsConst ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairsConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGhostObject _ rayTest ( swigCPtr ,    this ,    rayFromWorld ,    rayToWorld ,    RayResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGhostObject _ removeOverlappingObjectInternal _  _ SWIG _  1  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGhostObject _ removeOverlappingObjectInternal _  _ SWIG _  0  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btBroadphaseProxy . getCPtr ( thisProxy )  ,    thisProxy )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGhostObject _ upcast ( btCollisionObject . getCPtr ( colObj )  ,    colObj )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGhostObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["upcast"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGhostObject _ upcastConstBtCollisionObject ( btCollisionObject . getCPtr ( colObj )  ,    colObj )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGhostObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["upcastConstBtCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostPairCallback"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( btGhostPairCallback . class )     ?    CollisionJNI . btGhostPairCallback _ removeOverlappingPair ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )     :    CollisionJNI . btGhostPairCallback _ removeOverlappingPairSwigExplicitbtGhostPairCallback ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostPairCallback"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "CollisionJNI _ removeOverlappingPairsContainingProxy ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( arg 0  )  ,    arg 0  ,    btDispatcher . getCPtr ( arg 1  )  ,    arg 1  )  ;", "else", "CollisionJNI _ removeOverlappingPairsContainingProxySwigExplici ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( arg 0  )  ,    arg 0  ,    btDispatcher . getCPtr ( arg 1  )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingPairsContainingProxy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostPairCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostPairCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostPairCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGhostPairCallback"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ DATA ( CollisionJNI . btGimBvhDataArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ DATA ( CollisionJNI . btGimBvhDataArray _ atConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimBvhDataArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ copyFromArray ( swigCPtr ,    this ,    btGimBvhDataArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ DATA ( CollisionJNI . btGimBvhDataArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ DATA ( CollisionJNI . btGimBvhDataArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    GIM _ BVH _ DATA . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ DATA ( CollisionJNI . btGimBvhDataArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btGimBvhDataArray ( CollisionJNI . btGimBvhDataArray _ operatorAssignment ( swigCPtr ,    this ,    btGimBvhDataArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ DATA ( CollisionJNI . btGimBvhDataArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ DATA ( CollisionJNI . btGimBvhDataArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ push _ back ( swigCPtr ,    this ,    GIM _ BVH _ DATA . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    GIM _ BVH _ DATA . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimBvhDataArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhDataArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhDataArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ TREE _ NODE ( CollisionJNI . btGimBvhTreeNodeArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ TREE _ NODE ( CollisionJNI . btGimBvhTreeNodeArray _ atConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimBvhTreeNodeArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ copyFromArray ( swigCPtr ,    this ,    btGimBvhTreeNodeArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ TREE _ NODE ( CollisionJNI . btGimBvhTreeNodeArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ TREE _ NODE ( CollisionJNI . btGimBvhTreeNodeArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    GIM _ BVH _ TREE _ NODE . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ TREE _ NODE ( CollisionJNI . btGimBvhTreeNodeArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btGimBvhTreeNodeArray ( CollisionJNI . btGimBvhTreeNodeArray _ operatorAssignment ( swigCPtr ,    this ,    btGimBvhTreeNodeArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ TREE _ NODE ( CollisionJNI . btGimBvhTreeNodeArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ BVH _ TREE _ NODE ( CollisionJNI . btGimBvhTreeNodeArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ push _ back ( swigCPtr ,    this ,    GIM _ BVH _ TREE _ NODE . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    GIM _ BVH _ TREE _ NODE . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimBvhTreeNodeArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimBvhTreeNodeArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimBvhTreeNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . btGimContactArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . btGimContactArray _ atConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimContactArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ copyFromArray ( swigCPtr ,    this ,    btGimContactArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . btGimContactArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . btGimContactArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    GIM _ CONTACT . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . btGimContactArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btGimContactArray ( CollisionJNI . btGimContactArray _ operatorAssignment ( swigCPtr ,    this ,    btGimContactArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . btGimContactArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . btGimContactArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ push _ back ( swigCPtr ,    this ,    GIM _ CONTACT . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    GIM _ CONTACT . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimContactArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimContactArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimContactArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ PAIR ( CollisionJNI . btGimPairArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ PAIR ( CollisionJNI . btGimPairArray _ atConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimPairArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ copyFromArray ( swigCPtr ,    this ,    btGimPairArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ PAIR ( CollisionJNI . btGimPairArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ PAIR ( CollisionJNI . btGimPairArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    GIM _ PAIR . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ PAIR ( CollisionJNI . btGimPairArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btGimPairArray ( CollisionJNI . btGimPairArray _ operatorAssignment ( swigCPtr ,    this ,    btGimPairArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ PAIR ( CollisionJNI . btGimPairArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ PAIR ( CollisionJNI . btGimPairArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ push _ back ( swigCPtr ,    this ,    GIM _ PAIR . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    GIM _ PAIR . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimPairArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimPairArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimPairArray"}, {"methodBody": ["METHOD_START", "{", "return   new   BT _ QUANTIZED _ BVH _ NODE ( CollisionJNI . btGimQuantizedBvhNodeArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   BT _ QUANTIZED _ BVH _ NODE ( CollisionJNI . btGimQuantizedBvhNodeArray _ atConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimQuantizedBvhNodeArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ copyFromArray ( swigCPtr ,    this ,    btGimQuantizedBvhNodeArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   BT _ QUANTIZED _ BVH _ NODE ( CollisionJNI . btGimQuantizedBvhNodeArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   BT _ QUANTIZED _ BVH _ NODE ( CollisionJNI . btGimQuantizedBvhNodeArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    BT _ QUANTIZED _ BVH _ NODE . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   BT _ QUANTIZED _ BVH _ NODE ( CollisionJNI . btGimQuantizedBvhNodeArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btGimQuantizedBvhNodeArray ( CollisionJNI . btGimQuantizedBvhNodeArray _ operatorAssignment ( swigCPtr ,    this ,    btGimQuantizedBvhNodeArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   BT _ QUANTIZED _ BVH _ NODE ( CollisionJNI . btGimQuantizedBvhNodeArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   new   BT _ QUANTIZED _ BVH _ NODE ( CollisionJNI . btGimQuantizedBvhNodeArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ push _ back ( swigCPtr ,    this ,    BT _ QUANTIZED _ BVH _ NODE . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    BT _ QUANTIZED _ BVH _ NODE . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGimQuantizedBvhNodeArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGimQuantizedBvhNodeArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGimQuantizedBvhNodeArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btGjkCollisionDescription _ firstDir _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFirstDir"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkCollisionDescription _ gjkRelError 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGjkRelError2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkCollisionDescription _ maxGjkIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxGjkIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkCollisionDescription _ maximumDistanceSquared _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaximumDistanceSquared"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkCollisionDescription _ firstDir _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFirstDir"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkCollisionDescription _ gjkRelError 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGjkRelError2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkCollisionDescription _ maxGjkIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxGjkIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkCollisionDescription _ maximumDistanceSquared _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaximumDistanceSquared"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkConvexCast"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaPenetrationDepthSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkEpaSolver 2  _ Distance ( btConvexShape . getCPtr ( shape 0  )  ,    shape 0  ,    wtrs 0  ,    btConvexShape . getCPtr ( shape 1  )  ,    shape 1  ,    wtrs 1  ,    guess ,    btGjkEpaSolver 2  . sResults . getCPtr ( results )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["Distance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver2"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkEpaSolver 2  _ Penetration _  _ SWIG _  1  ( btConvexShape . getCPtr ( shape 0  )  ,    shape 0  ,    wtrs 0  ,    btConvexShape . getCPtr ( shape 1  )  ,    shape 1  ,    wtrs 1  ,    guess ,    btGjkEpaSolver 2  . sResults . getCPtr ( results )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["Penetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver2"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkEpaSolver 2  _ Penetration _  _ SWIG _  0  ( btConvexShape . getCPtr ( shape 0  )  ,    shape 0  ,    wtrs 0  ,    btConvexShape . getCPtr ( shape 1  )  ,    shape 1  ,    wtrs 1  ,    guess ,    btGjkEpaSolver 2  . sResults . getCPtr ( results )  ,    results ,    usemargins )  ;", "}", "METHOD_END"], "methodName": ["Penetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver2"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkEpaSolver 2  _ SignedDistance _  _ SWIG _  0  ( position ,    margin ,    btConvexShape . getCPtr ( shape )  ,    shape ,    wtrs ,    btGjkEpaSolver 2  . sResults . getCPtr ( results )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["SignedDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver2"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkEpaSolver 2  _ SignedDistance _  _ SWIG _  1  ( btConvexShape . getCPtr ( shape 0  )  ,    shape 0  ,    wtrs 0  ,    btConvexShape . getCPtr ( shape 1  )  ,    shape 1  ,    wtrs 1  ,    guess ,    btGjkEpaSolver 2  . sResults . getCPtr ( results )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["SignedDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver2"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkEpaSolver 2  _ StackSizeRequirement (  )  ;", "}", "METHOD_END"], "methodName": ["StackSizeRequirement"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkEpaSolver3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkPairDetector _ getCachedSeparatingAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCachedSeparatingAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkPairDetector _ getCachedSeparatingDistance ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCachedSeparatingDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkPairDetector _ catchDegeneracies _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCatchDegeneracies"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ getClosestPoints _  _ SWIG _  1  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ getClosestPoints _  _ SWIG _  0  ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw ,    swapResults )  ;", "}", "METHOD_END"], "methodName": ["getClosestPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ getClosestPointsNonVirtual ( swigCPtr ,    this ,    btDiscreteCollisionDetectorInterface . ClosestPointInput . getCPtr ( input )  ,    input ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( output )  ,    output ,    btIDebugDraw . getCPtr ( debugDraw )  ,    debugDraw )  ;", "}", "METHOD_END"], "methodName": ["getClosestPointsNonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkPairDetector _ curIter _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurIter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkPairDetector _ degenerateSimplex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDegenerateSimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkPairDetector _ fixContactNormalDirection _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFixContactNormalDirection"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btGjkPairDetector _ lastUsedMethod _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLastUsedMethod"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ setCachedSeperatingAxis ( swigCPtr ,    this ,    seperatingAxis )  ;", "}", "METHOD_END"], "methodName": ["setCachedSeperatingAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ catchDegeneracies _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCatchDegeneracies"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ curIter _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurIter"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ degenerateSimplex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDegenerateSimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ fixContactNormalDirection _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFixContactNormalDirection"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ setIgnoreMargin ( swigCPtr ,    this ,    ignoreMargin )  ;", "}", "METHOD_END"], "methodName": ["setIgnoreMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ lastUsedMethod _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLastUsedMethod"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ setMinkowskiA ( swigCPtr ,    this ,    btConvexShape . getCPtr ( minkA )  ,    minkA )  ;", "}", "METHOD_END"], "methodName": ["setMinkowskiA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ setMinkowskiB ( swigCPtr ,    this ,    btConvexShape . getCPtr ( minkB )  ,    minkB )  ;", "}", "METHOD_END"], "methodName": ["setMinkowskiB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btGjkPairDetector _ setPenetrationDepthSolver ( swigCPtr ,    this ,    btConvexPenetrationDepthSolver . getCPtr ( penetrationDepthSolver )  ,    penetrationDepthSolver )  ;", "}", "METHOD_END"], "methodName": ["setPenetrationDepthSolver"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btGjkPairDetector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ find ( swigCPtr ,    this ,    btHashInt . getCPtr ( key )  ,    key )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["find"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ findConst ( swigCPtr ,    this ,    btHashInt . getCPtr ( key )  ,    key )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["findConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ findIndex ( swigCPtr ,    this ,    btHashInt . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ getAtIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ getAtIndexConst ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAtIndexConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   btHashInt ( CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ getKeyAtIndex ( swigCPtr ,    this ,    index )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getKeyAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   new   btHashInt ( CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ getKeyAtIndexConst ( swigCPtr ,    this ,    index )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getKeyAtIndexConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ insert ( swigCPtr ,    this ,    btHashInt . getCPtr ( key )  ,    key ,    btTriangleInfo . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["insert"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ operatorSubscript ( swigCPtr ,    this ,    btHashInt . getCPtr ( key )  ,    key )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ operatorSubscriptConst ( swigCPtr ,    this ,    btHashInt . getCPtr ( key )  ,    key )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ remove ( swigCPtr ,    this ,    btHashInt . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashMapInternalShortBtHashIntBtTriangleInfo _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashMapInternalShortBtHashIntBtTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedOverlappingPairCache _ GetCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["GetCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashedOverlappingPairCache _ getOverlapFilterCallback ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlapFilterCallback ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlapFilterCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   new   btBroadphasePairArray ( CollisionJNI . btHashedOverlappingPairCache _ getOverlappingPairArrayConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArrayConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedOverlappingPairCache _ needsBroadphaseCollision ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ;", "}", "METHOD_END"], "methodName": ["needsBroadphaseCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashedOverlappingPairCache _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashedOverlappingPairCache _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashedOverlappingPairCache _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashedOverlappingPairCache _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedOverlappingPairCache _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedOverlappingPairCache _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedOverlappingPairCache _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedOverlappingPairCache _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedSimplePairCache _ GetCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["GetCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashedSimplePairCache _ addOverlappingPair ( swigCPtr ,    this ,    indexA ,    indexB )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSimplePair ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["addOverlappingPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashedSimplePairCache _ findPair ( swigCPtr ,    this ,    indexA ,    indexB )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSimplePair ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["findPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedSimplePairCache _ getNumOverlappingPairs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSimplePair _ t ( CollisionJNI . btHashedSimplePairCache _ getOverlappingPairArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSimplePair _ t ( CollisionJNI . btHashedSimplePairCache _ getOverlappingPairArrayConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArrayConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashedSimplePairCache _ getOverlappingPairArrayPtr ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSimplePair ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btHashedSimplePairCache _ getOverlappingPairArrayPtrConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSimplePair ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArrayPtrConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHashedSimplePairCache _ removeAllPairs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["removeAllPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHashedSimplePairCache _ removeOverlappingPair ( swigCPtr ,    this ,    indexA ,    indexB )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHashedSimplePairCache"}, {"methodBody": ["METHOD_START", "{", "assert   heightfieldData . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   CollisionJNI . new _  _  _ SWIG _  0  ( heightStickWidth ,    heightStickLength ,    heightfieldData ,    heightScale ,    minHeight ,    maxHeight ,    upAxis ,    flipQuadEdges )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtHeightfieldTerrainShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "assert   heightfieldData . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   CollisionJNI . new _  _  _ SWIG _  1  ( heightStickWidth ,    heightStickLength ,    heightfieldData ,    heightScale ,    minHeight ,    maxHeight ,    upAxis ,    flipQuadEdges )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtHeightfieldTerrainShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHeightfieldTerrainShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHeightfieldTerrainShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHeightfieldTerrainShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btHeightfieldTerrainShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ setUseDiamondSubdivision _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setUseDiamondSubdivision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ setUseDiamondSubdivision _  _ SWIG _  0  ( swigCPtr ,    this ,    useDiamondSubdivision )  ;", "}", "METHOD_END"], "methodName": ["setUseDiamondSubdivision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ setUseZigzagSubdivision _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setUseZigzagSubdivision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btHeightfieldTerrainShape _ setUseZigzagSubdivision _  _ SWIG _  0  ( swigCPtr ,    this ,    useZigzagSubdivision )  ;", "}", "METHOD_END"], "methodName": ["setUseZigzagSubdivision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btHeightfieldTerrainShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ indexType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndexType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "final   int   n    =    btIndexedMesh . instances . size ;", "for    ( int   i    =     0  ;    i    <    n ;    i +  +  )     {", "final   btIndexedMesh   mesh    =    btIndexedMesh . instances . get ( i )  ;", "if    ( tag . equals ( mesh . tag )  )", "return   mesh ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ numTriangles _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ numVertices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ triangleIndexBase _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ triangleIndexStride _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndexStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ vertexBase _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVertexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ vertexStride _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVertexStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ vertexType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVertexType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "if    ( meshPart    =  =    null )", "throw   new   utils . GdxRuntimeException (  \" meshPart   cannot   be   null \"  )  ;", "btIndexedMesh   result    =    btIndexedMesh . getInstance ( meshPart )  ;", "if    ( result    =  =    null )     {", "result    =    new   btIndexedMesh ( meshPart )  ;", "btIndexedMesh . instances . add ( result )  ;", "}", "result . obtain (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtain"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "if    ( tag    =  =    null )", "throw   new   utils . GdxRuntimeException (  \" tag   cannot   be   null \"  )  ;", "btIndexedMesh   result    =    btIndexedMesh . getInstance ( tag )  ;", "if    ( result    =  =    null )     {", "result    =    new   btIndexedMesh ( vertices ,    sizeInBytesOfEachVertex ,    vertexCount ,    positionOffsetInBytes ,    indices ,    indexOffset ,    indexCount )  ;", "result . tag    =    tag ;", "btIndexedMesh . instances . add ( result )  ;", "}", "result . obtain (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtain"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIndexedMesh _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "set ( mesh ,    mesh ,     0  ,    mesh . getNumIndices (  )  )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "set ( null ,    mesh ,    offset ,    count )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "if    (  ( meshPart . primitiveType )     !  =     ( GL 2  0  . GL _ TRIANGLES )  )", "throw   new   utils . GdxRuntimeException (  \" Mesh   must   be   indexed   and   triangulated \"  )  ;", "set ( meshPart ,    meshPart . mesh ,    meshPart . offset ,    meshPart . size )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "set ( tag ,    mesh ,     0  ,    mesh . getNumIndices (  )  )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "if    (  ( count    <  =     0  )     |  |     (  ( count    %     3  )     !  =     0  )  )", "throw   new   utils . GdxRuntimeException (  \" Mesh   must   be   indexed   and   triangulated \"  )  ;", "VertexAttribute   posAttr    =    mesh . getVertexAttribute ( Position )  ;", "if    ( posAttr    =  =    null )", "throw   new   utils . GdxRuntimeException (  \" Mesh   doesn ' t   have   a   position   attribute \"  )  ;", "set ( tag ,    mesh . getVerticesBuffer (  )  ,    mesh . getVertexSize (  )  ,    mesh . getNumVertices (  )  ,    posAttr . offset ,    mesh . getIndicesBuffer (  )  ,    offset ,    count )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "setVertices ( vertices ,    sizeInBytesOfEachVertex ,    vertexCount ,    positionOffsetInBytes )  ;", "seices ( indices ,    indexOffset ,    indexCount )  ;", "this . tag    =    tag ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "set ( null ,    vertices ,    sizeInBytesOfEachVertex ,    vertexCount ,    positionOffsetInBytes ,    indices ,    indexOffset ,    indexCount )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ indexType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndexType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "assert   indices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ setIndices ( swigCPtr ,    this ,    indices ,    indexOffset ,    indexCount )  ;", "}", "}", "METHOD_END"], "methodName": ["setIndices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ numTriangles _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ numVertices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ triangleIndexBase _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setTriangleIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "assert   data . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ setTriangleIndexBase ( swigCPtr ,    this ,    data )  ;", "}", "}", "METHOD_END"], "methodName": ["setTriangleIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ triangleIndexStride _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleIndexStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ vertexBase _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setVertexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "assert   data . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ setVertexBase ( swigCPtr ,    this ,    data )  ;", "}", "}", "METHOD_END"], "methodName": ["setVertexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ vertexStride _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertexStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIndexedMesh _ vertexType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertexType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "assert   vertices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ setVertices ( swigCPtr ,    this ,    vertices ,    sizeInBytesOfEachVertex ,    vertexCount ,    positionOffsetInBytes )  ;", "}", "}", "METHOD_END"], "methodName": ["setVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIndexedMesh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIntIndexData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btIntIndexData _ value _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIntIndexData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btIntIndexData _ value _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btIntIndexData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btInternalTriangleIndexCallback _ internalProcessTriangleIndex ( swigCPtr ,    this ,    btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["internalProcessTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btInternalTriangleIndexCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ appliedImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ appliedImpulseLateral 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulseLateral1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ appliedImpulseLateral 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulseLateral2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ combinedContactDamping 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCombinedContactDamping1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ combinedContactStiffness 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCombinedContactStiffness1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ combinedFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCombinedFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ combinedRestitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCombinedRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ combinedRollingFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCombinedRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ combinedSpinningFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCombinedSpinningFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ contactCFM _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactCFM"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ contactERP _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactERP"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ contactMotion 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactMotion1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ contactMotion 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactMotion2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ contactPointFlags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactPointFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ getDistance ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ distance 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDistance1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ frictionCFM _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionCFM"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ index 0  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndex0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ index 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndex1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ getLateralFrictionDir 1  ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getLateralFrictionDir1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ getLateralFrictionDir 2  ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getLateralFrictionDir2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ lifeTime _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLifeTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ getLocalPointA ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getLocalPointA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ getLocalPointB ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getLocalPointB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ getNormalWorldOnB ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getNormalWorldOnB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ partId 0  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPartId0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ partId 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPartId1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ getPositionWorldOnA ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getPositionWorldOnA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ getPositionWorldOnB ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getPositionWorldOnB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ userPersistentData _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserPersistentData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldPoint _ getUserValue ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "btManifoldPoint   instance    =    btManifoldPoint . argumentInstances [  ( btManifoldPoint . argumentIndex    =     (  ( btManifoldPoint . argumentIndex )     +     1  )     &     3  )  ]  ;", "instance . reset ( swigCPtr ,    owner )  ;", "return   instance ;", "}", "METHOD_END"], "methodName": ["obtainForArgument"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "btManifoldPoint . temp . reset ( cPtr ,    own )  ;", "return   btManifoldPoint . temp ;", "}", "METHOD_END"], "methodName": ["obtainTemp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ appliedImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ appliedImpulseLateral 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulseLateral1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ appliedImpulseLateral 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulseLateral2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ combinedContactDamping 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCombinedContactDamping1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ combinedContactStiffness 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCombinedContactStiffness1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ combinedFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCombinedFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ combinedRestitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCombinedRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ combinedRollingFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCombinedRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ combinedSpinningFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCombinedSpinningFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ contactCFM _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactCFM"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ contactERP _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactERP"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ contactMotion 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactMotion1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ contactMotion 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactMotion2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ contactPointFlags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactPointFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setDistance ( swigCPtr ,    this ,    dist )  ;", "}", "METHOD_END"], "methodName": ["setDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ distance 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDistance1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ frictionCFM _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionCFM"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ index 0  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndex0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ index 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndex1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setLateralFrictionDir 1  ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLateralFrictionDir1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setLateralFrictionDir 2  ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLateralFrictionDir2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ lifeTime _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLifeTime"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setLocalPointA ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalPointA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setLocalPointB ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalPointB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setNormalWorldOnB ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormalWorldOnB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ partId 0  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPartId0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ partId 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPartId1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setPositionWorldOnA ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPositionWorldOnA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setPositionWorldOnB ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPositionWorldOnB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ userPersistentData _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserPersistentData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldPoint _ setUserValue ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldPoint"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldResult _ calculateCombinedContactDamping ( btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["calculateCombinedContactDamping"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldResult _ calculateCombinedContactStiffness ( btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["calculateCombinedContactStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldResult _ calculateCombinedFriction ( btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["calculateCombinedFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldResult _ calculateCombinedRestitution ( btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["calculateCombinedRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldResult _ calculateCombinedRollingFriction ( btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["calculateCombinedRollingFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldResult _ calculateCombinedSpinningFriction ( btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["calculateCombinedSpinningFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btManifoldResult _ getBody 0 Internal ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBody0Internal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObjectWrapper . internalTemp ( CollisionJNI . btManifoldResult _ getBody 0 Wrap ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBody0Wrap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btManifoldResult _ getBody 1 Internal ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBody1Internal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObjectWrapper . internalTemp ( CollisionJNI . btManifoldResult _ getBody 1 Wrap ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBody1Wrap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btManifoldResult _ closestPointDistanceThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClosestPointDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btManifoldResult _ getPersistentManifold ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPersistentManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btManifoldResult _ getPersistentManifoldConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPersistentManifoldConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldResult _ refreshContactPoints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["refreshContactPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldResult _ setBody 0 Wrap ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( obj 0 Wrap )  ,    obj 0 Wrap )  ;", "}", "METHOD_END"], "methodName": ["setBody0Wrap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldResult _ setBody 1 Wrap ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( obj 1 Wrap )  ,    obj 1 Wrap )  ;", "}", "METHOD_END"], "methodName": ["setBody1Wrap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldResult _ closestPointDistanceThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClosestPointDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btManifoldResult _ setPersistentManifold ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( manifoldPtr )  ,    manifoldPtr )  ;", "}", "METHOD_END"], "methodName": ["setPersistentManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btManifoldResult"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterial"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterial _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterial"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterial _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterial"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterial _ restitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterial"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterial _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterial"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterial _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterial"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterial _ restitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterial"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ materialBase _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaterialBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ materialStride _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaterialStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ materialType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaterialType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ numMaterials _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ numTriangles _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ triangleMaterialStride _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleMaterialStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ triangleMaterialsBase _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleMaterialsBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMaterialProperties _ triangleType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ materialBase _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setMaterialBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterialProperties _ materialStride _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaterialStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterialProperties _ materialType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaterialType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterialProperties _ numMaterials _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterialProperties _ numTriangles _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterialProperties _ triangleMaterialStride _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleMaterialStride"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ triangleMaterialsBase _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setTriangleMaterialsBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMaterialProperties _ triangleType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleType"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMaterialProperties"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMeshPartData _  3 indices 1  6  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btShortIntIndexTripletData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get3indices16"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMeshPartData _  3 indices 8  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCharIndexTripletData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get3indices8"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMeshPartData _ indices 1  6  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btShortIntIndexData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIndices16"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMeshPartData _ indices 3  2  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btIntIndexData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIndices32"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMeshPartData _ numTriangles _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMeshPartData _ numVertices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMeshPartData _ vertices 3 d _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices3d"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMeshPartData _ vertices 3 f _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices3f"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _  3 indices 1  6  _ set ( swigCPtr ,    this ,    btShortIntIndexTripletData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["set3indices16"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _  3 indices 8  _ set ( swigCPtr ,    this ,    btCharIndexTripletData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["set3indices8"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _ indices 1  6  _ set ( swigCPtr ,    this ,    btShortIntIndexData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndices16"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _ indices 3  2  _ set ( swigCPtr ,    this ,    btIntIndexData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndices32"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _ numTriangles _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _ numVertices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _ vertices 3 d _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices3d"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMeshPartData _ vertices 3 f _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices3f"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMeshPartData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiPenetrationDepthSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMinkowskiSumShape _ GetTransformB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["GetTransformB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMinkowskiSumShape _ getShapeA ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getShapeA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMinkowskiSumShape _ getShapeB ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getShapeB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMinkowskiSumShape _ getTransformA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTransformA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMinkowskiSumShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMinkowskiSumShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMinkowskiSumShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMinkowskiSumShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMinkowskiSumShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMinkowskiSumShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMinkowskiSumShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMinkowskiSumShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMinkowskiSumShape _ setTransformA ( swigCPtr ,    this ,    transA )  ;", "}", "METHOD_END"], "methodName": ["setTransformA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMinkowskiSumShape _ setTransformB ( swigCPtr ,    this ,    transB )  ;", "}", "METHOD_END"], "methodName": ["setTransformB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMinkowskiSumShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMprCollisionDescription _ firstDir _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFirstDir"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprCollisionDescription _ gjkRelError 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGjkRelError2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprCollisionDescription _ maxGjkIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxGjkIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprCollisionDescription _ maximumDistanceSquared _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaximumDistanceSquared"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprCollisionDescription _ firstDir _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFirstDir"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprCollisionDescription _ gjkRelError 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGjkRelError2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprCollisionDescription _ maxGjkIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxGjkIterations"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprCollisionDescription _ maximumDistanceSquared _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaximumDistanceSquared"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprCollisionDescription"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMprDistanceInfo _ distance _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMprDistanceInfo _ normalBtoA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormalBtoA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMprDistanceInfo _ pointOnA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPointOnA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMprDistanceInfo _ pointOnB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPointOnB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprDistanceInfo _ distance _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprDistanceInfo _ normalBtoA _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormalBtoA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprDistanceInfo _ pointOnA _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPointOnA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMprDistanceInfo _ pointOnB _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPointOnB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMprDistanceInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShape _ getSphereCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSphereCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShape _ getSpherePosition ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getSpherePosition"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShape _ getSphereRadius ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getSphereRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMultiSphereShapeData _ convexInternalShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexInternalShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMultiSphereShapeData _ localPositionArrayPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPositionAndRadius ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalPositionArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShapeData _ localPositionArraySize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLocalPositionArraySize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultiSphereShapeData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShapeData _ convexInternalShapeData _ set ( swigCPtr ,    this ,    btConvexInternalShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexInternalShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShapeData _ localPositionArrayPtr _ set ( swigCPtr ,    this ,    btPositionAndRadius . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalPositionArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShapeData _ localPositionArraySize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalPositionArraySize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultiSphereShapeData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultiSphereShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btMultimaterialTriangleMeshShape _ getMaterialProperties ( swigCPtr ,    this ,    partID ,    triIndex )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMaterial ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaterialProperties"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultimaterialTriangleMeshShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultimaterialTriangleMeshShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultimaterialTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btMultimaterialTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultimaterialTriangleMeshShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultimaterialTriangleMeshShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultimaterialTriangleMeshShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btMultimaterialTriangleMeshShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btMultimaterialTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btNodeOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btNodeOverlapCallback _ processNode ( swigCPtr ,    this ,    subPart ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["processNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btNodeOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btNodeOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btNodeOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btNodeOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btNullPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ build ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( triangles )  ,    triangles ,    useQuantizedAabbCompression ,    bvhAabbMin ,    bvhAabbMax )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btOptimizedBvh _ deSerializeInPlace ( i _ alignedDataBuffer ,    i _ dataBufferSize ,    i _ swapEndian )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["deSerializeInPlace"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvh _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvh _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvh _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvh _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ refit ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( triangles )  ,    triangles ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["refit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ refitPartial ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( triangles )  ,    triangles ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["refitPartial"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvh _ serializeInPlace ( swigCPtr ,    this ,    o _ alignedDataBuffer ,    i _ dataBufferSize ,    i _ swapEndian )  ;", "}", "METHOD_END"], "methodName": ["serializeInPlace"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvh _ updateBvhNodes ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( meshInterface )  ,    meshInterface ,    firstNode ,    endNode ,    index )  ;", "}", "METHOD_END"], "methodName": ["updateBvhNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btOptimizedBvhNode _ aabbMaxOrg _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMaxOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btOptimizedBvhNode _ aabbMinOrg _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMinOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ escapeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ subPart _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSubPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ triangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNode _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ aabbMaxOrg _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMaxOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ aabbMinOrg _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMinOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ escapeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ subPart _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSubPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNode _ triangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btOptimizedBvhNodeDoubleData _ aabbMaxOrg _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMaxOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btOptimizedBvhNodeDoubleData _ aabbMinOrg _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMinOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeDoubleData _ escapeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeDoubleData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeDoubleData _ subPart _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSubPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeDoubleData _ triangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeDoubleData _ aabbMaxOrg _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMaxOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeDoubleData _ aabbMinOrg _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMinOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeDoubleData _ escapeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeDoubleData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeDoubleData _ subPart _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSubPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeDoubleData _ triangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btOptimizedBvhNodeFloatData _ aabbMaxOrg _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMaxOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btOptimizedBvhNodeFloatData _ aabbMinOrg _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAabbMinOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeFloatData _ escapeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeFloatData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeFloatData _ subPart _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSubPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOptimizedBvhNodeFloatData _ triangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeFloatData _ aabbMaxOrg _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMaxOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeFloatData _ aabbMinOrg _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAabbMinOrg"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeFloatData _ escapeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeFloatData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeFloatData _ subPart _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSubPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOptimizedBvhNodeFloatData _ triangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOptimizedBvhNodeFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOverlapCallback _ processOverlap ( swigCPtr ,    this ,    pair )  ;", "}", "METHOD_END"], "methodName": ["processOverlap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapFilterCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOverlapFilterCallback _ needBroadphaseCollision ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ;", "}", "METHOD_END"], "methodName": ["needBroadphaseCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapFilterCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapFilterCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapFilterCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlapFilterCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOverlappingPairCache _ cleanOverlappingPair ( swigCPtr ,    this ,    pair ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["cleanOverlappingPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOverlappingPairCache _ cleanProxyFromPairs ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy )  ,    proxy ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["cleanProxyFromPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphasePair . internalTemp ( CollisionJNI . btOverlappingPairCache _ findPair ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["findPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOverlappingPairCache _ getNumOverlappingPairs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   new   btBroadphasePairArray ( CollisionJNI . btOverlappingPairCache _ getOverlappingPairArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphasePair . internalTemp ( CollisionJNI . btOverlappingPairCache _ getOverlappingPairArrayPtr ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphasePair . internalTemp ( CollisionJNI . btOverlappingPairCache _ getOverlappingPairArrayPtrConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArrayPtrConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOverlappingPairCache _ hasDeferredRemoval ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasDeferredRemoval"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOverlappingPairCache _ processAllOverlappingPairs ( swigCPtr ,    this ,    btOverlapCallback . getCPtr ( arg 0  )  ,    arg 0  ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["processAllOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOverlappingPairCache _ setInternalGhostPairCallback ( swigCPtr ,    this ,    btOverlappingPairCallback . getCPtr ( ghostPairCallback )  ,    ghostPairCallback )  ;", "}", "METHOD_END"], "methodName": ["setInternalGhostPairCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOverlappingPairCache _ setOverlapFilterCallback ( swigCPtr ,    this ,    btOverlapFilterCallback . getCPtr ( callback )  ,    callback )  ;", "}", "METHOD_END"], "methodName": ["setOverlapFilterCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOverlappingPairCache _ sortOverlappingPairs ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["sortOverlappingPairs"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphasePair . internalTemp ( CollisionJNI . btOverlappingPairCallback _ addOverlappingPair ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addOverlappingPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btOverlappingPairCallback _ removeOverlappingPair ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingPair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btOverlappingPairCallback _ removeOverlappingPairsContainingProxy ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingPairsContainingProxy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btOverlappingPairCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPairCachingGhostObject _ addOverlappingObjectInternal _  _ SWIG _  1  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy )  ;", "}", "METHOD_END"], "methodName": ["addOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairCachingGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPairCachingGhostObject _ addOverlappingObjectInternal _  _ SWIG _  0  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy ,    btBroadphaseProxy . getCPtr ( thisProxy )  ,    thisProxy )  ;", "}", "METHOD_END"], "methodName": ["addOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairCachingGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairCachingGhostObject"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPairCachingGhostObject _ getOverlappingPairCache ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btHashedOverlappingPairCache ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairCache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairCachingGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPairCachingGhostObject _ removeOverlappingObjectInternal _  _ SWIG _  1  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairCachingGhostObject"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPairCachingGhostObject _ removeOverlappingObjectInternal _  _ SWIG _  0  ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( otherProxy )  ,    otherProxy ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btBroadphaseProxy . getCPtr ( thisProxy )  ,    thisProxy )  ;", "}", "METHOD_END"], "methodName": ["removeOverlappingObjectInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairCachingGhostObject"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairSet"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPairSet _ push _ pair ( swigCPtr ,    this ,    index 1  ,    index 2  )  ;", "}", "METHOD_END"], "methodName": ["push_pair"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairSet"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPairSet _ push _ pair _ inv ( swigCPtr ,    this ,    index 1  ,    index 2  )  ;", "}", "METHOD_END"], "methodName": ["push_pair_inv"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPairSet"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ addManifoldPoint _  _ SWIG _  1  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( newPoint )  ,    newPoint )  ;", "}", "METHOD_END"], "methodName": ["addManifoldPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ addManifoldPoint _  _ SWIG _  0  ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( newPoint )  ,    newPoint ,    isPredictive )  ;", "}", "METHOD_END"], "methodName": ["addManifoldPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ clearManifold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearManifold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ clearUserCache ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( pt )  ,    pt )  ;", "}", "METHOD_END"], "methodName": ["clearUserCache"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btPersistentManifold _ getBody 0  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBody0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( CollisionJNI . btPersistentManifold _ getBody 1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBody1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ getCacheEntry ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( newPoint )  ,    newPoint )  ;", "}", "METHOD_END"], "methodName": ["getCacheEntry"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ companionIdA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCompanionIdA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ companionIdB _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCompanionIdB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ getContactBreakingThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactBreakingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   new   btManifoldPoint ( CollisionJNI . btPersistentManifold _ getContactPoint ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   new   btManifoldPoint ( CollisionJNI . btPersistentManifold _ getContactPointConst ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactPointConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ getContactProcessingThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ index 1 a _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndex1a"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ getNumContacts ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumContacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ refreshContactPoints ( swigCPtr ,    this ,    trA ,    trB )  ;", "}", "METHOD_END"], "methodName": ["refreshContactPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ removeContactPoint ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ replaceContactPoint ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( newPoint )  ,    newPoint ,    insertIndex )  ;", "}", "METHOD_END"], "methodName": ["replaceContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ setBodies ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( body 0  )  ,    body 0  ,    btCollisionObject . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["setBodies"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ companionIdA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCompanionIdA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ companionIdB _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCompanionIdB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ setContactBreakingThreshold ( swigCPtr ,    this ,    contactBreakingThreshold )  ;", "}", "METHOD_END"], "methodName": ["setContactBreakingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ setContactProcessingThreshold ( swigCPtr ,    this ,    contactProcessingThreshold )  ;", "}", "METHOD_END"], "methodName": ["setContactProcessingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ index 1 a _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndex1a"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifold _ setNumContacts ( swigCPtr ,    this ,    cachedPoints )  ;", "}", "METHOD_END"], "methodName": ["setNumContacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifold _ validContactDistance ( swigCPtr ,    this ,    btManifoldPoint . getCPtr ( pt )  ,    pt )  ;", "}", "METHOD_END"], "methodName": ["validContactDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btPersistentManifold ( CollisionJNI . btPersistentManifoldArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPersistentManifoldArray _ atConst ( swigCPtr ,    this ,    n )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifoldArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ copyFromArray ( swigCPtr ,    this ,    btPersistentManifoldArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btPersistentManifold ( CollisionJNI . btPersistentManifoldArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btPersistentManifold ( CollisionJNI . btPersistentManifoldArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( fillValue )  ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btPersistentManifold ( CollisionJNI . btPersistentManifoldArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifoldArray _ findBinarySearch ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findBinarySearch"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifoldArray _ findLinearSearch ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifoldArray _ findLinearSearch 2  ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btPersistentManifoldArray ( CollisionJNI . btPersistentManifoldArray _ operatorAssignment ( swigCPtr ,    this ,    btPersistentManifoldArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ p _ btPersistentManifold ( CollisionJNI . btPersistentManifoldArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPersistentManifoldArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ push _ back ( swigCPtr ,    this ,    btPersistentManifold . getCPtr (  _ Val )  ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ remove ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( key )  ,    key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    btPersistentManifold . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPersistentManifoldArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPersistentManifoldArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPersistentManifoldArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPointCollector _ distance _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPointCollector _ hasResult _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHasResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPointCollector _ normalOnBInWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormalOnBInWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPointCollector _ pointInWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPointInWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPointCollector _ distance _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPointCollector _ hasResult _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHasResult"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPointCollector _ normalOnBInWorld _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormalOnBInWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPointCollector _ pointInWorld _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPointInWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPointCollector"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralContactClipping _ clipFace ( btVector 3 Array . getCPtr ( pVtxIn )  ,    pVtxIn ,    btVector 3 Array . getCPtr ( ppVtxOut )  ,    ppVtxOut ,    planeNormalWS ,    planeEqWS )  ;", "}", "METHOD_END"], "methodName": ["clipFace"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralContactClipping"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralContactClipping _ clipFaceAgainstHull ( separatingNormal ,    btConvexPolyhedron . getCPtr ( hullA )  ,    hullA ,    transA ,    btVector 3 Array . getCPtr ( worldVertsB 1  )  ,    worldVertsB 1  ,    btVector 3 Array . getCPtr ( worldVertsB 2  )  ,    worldVertsB 2  ,    minDist ,    maxDist ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["clipFaceAgainstHull"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralContactClipping"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralContactClipping _ clipHullAgainstHull ( separatingNormal 1  ,    btConvexPolyhedron . getCPtr ( hullA )  ,    hullA ,    btConvexPolyhedron . getCPtr ( hullB )  ,    hullB ,    transA ,    transB ,    minDist ,    maxDist ,    btVector 3 Array . getCPtr ( worldVertsB 1  )  ,    worldVertsB 1  ,    btVector 3 Array . getCPtr ( worldVertsB 2  )  ,    worldVertsB 2  ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["clipHullAgainstHull"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralContactClipping"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralContactClipping _ findSeparatingAxis ( btConvexPolyhedron . getCPtr ( hullA )  ,    hullA ,    btConvexPolyhedron . getCPtr ( hullB )  ,    hullB ,    transA ,    transB ,    sep ,    btDiscreteCollisionDetectorInterface . Result . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["findSeparatingAxis"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralContactClipping"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralContactClipping"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexAabbCachingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexAabbCachingShape _ getNonvirtualAabb ( swigCPtr ,    this ,    trans ,    aabbMin ,    aabbMax ,    margin )  ;", "}", "METHOD_END"], "methodName": ["getNonvirtualAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexAabbCachingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexAabbCachingShape _ recalcLocalAabb ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["recalcLocalAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexAabbCachingShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPolyhedralConvexShape _ getConvexPolyhedron ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexPolyhedron ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexPolyhedron"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexShape _ getEdge ( swigCPtr ,    this ,    i ,    pa ,    pb )  ;", "}", "METHOD_END"], "methodName": ["getEdge"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ getNumEdges ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumEdges"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ getNumPlanes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumPlanes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ getNumVertices ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexShape _ getPlane ( swigCPtr ,    this ,    planeNormal ,    planeSupport ,    i )  ;", "}", "METHOD_END"], "methodName": ["getPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexShape _ getVertex ( swigCPtr ,    this ,    i ,    vtx )  ;", "}", "METHOD_END"], "methodName": ["getVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ initializePolyhedralFeatures _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["initializePolyhedralFeatures"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ initializePolyhedralFeatures _  _ SWIG _  0  ( swigCPtr ,    this ,    shiftVerticesByMargin )  ;", "}", "METHOD_END"], "methodName": ["initializePolyhedralFeatures"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ isInside ( swigCPtr ,    this ,    pt ,    tolerance )  ;", "}", "METHOD_END"], "methodName": ["isInside"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPolyhedralConvexShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPolyhedralConvexShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPolyhedralConvexShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPositionAndRadius"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPositionAndRadius _ pos _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPos"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPositionAndRadius"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPositionAndRadius _ radius _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPositionAndRadius"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPositionAndRadius _ pos _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPos"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPositionAndRadius"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPositionAndRadius _ radius _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPositionAndRadius"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveManagerBase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveManagerBase _ get _ primitive _ box ( swigCPtr ,    this ,    prim _ index ,    btAABB . getCPtr ( primbox )  ,    primbox )  ;", "}", "METHOD_END"], "methodName": ["get_primitive_box"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveManagerBase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPrimitiveManagerBase _ get _ primitive _ count ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["get_primitive_count"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveManagerBase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveManagerBase _ get _ primitive _ triangle ( swigCPtr ,    this ,    prim _ index ,    btPrimitiveTriangle . getCPtr ( triangle )  ,    triangle )  ;", "}", "METHOD_END"], "methodName": ["get_primitive_triangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveManagerBase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPrimitiveManagerBase _ is _ trimesh ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["is_trimesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveManagerBase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveTriangle _ applyTransform ( swigCPtr ,    this ,    t )  ;", "}", "METHOD_END"], "methodName": ["applyTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveTriangle _ buildTriPlane ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["buildTriPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPrimitiveTriangle _ clip _ triangle ( swigCPtr ,    this ,    btPrimitiveTriangle . getCPtr ( other )  ,    other ,    btVector 3  . getCPtr ( clipped _ points )  ,    clipped _ points )  ;", "}", "METHOD_END"], "methodName": ["clip_triangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPrimitiveTriangle _ find _ triangle _ collision _ clip _ method ( swigCPtr ,    this ,    btPrimitiveTriangle . getCPtr ( other )  ,    other ,    GIM _ TRIANGLE _ CONTACT . getCPtr ( contacts )  ,    contacts )  ;", "}", "METHOD_END"], "methodName": ["find_triangle_collision_clip_method"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPrimitiveTriangle _ dummy _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDummy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPrimitiveTriangle _ margin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPrimitiveTriangle _ plane _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 4  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btPrimitiveTriangle _ vertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveTriangle _ get _ edge _ plane ( swigCPtr ,    this ,    edge _ index ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["get_edge_plane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btPrimitiveTriangle _ overlap _ test _ conservative ( swigCPtr ,    this ,    btPrimitiveTriangle . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["overlap_test_conservative"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveTriangle _ dummy _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDummy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveTriangle _ margin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveTriangle _ plane _ set ( swigCPtr ,    this ,    btVector 4  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btPrimitiveTriangle _ vertices _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btPrimitiveTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ buildInternal ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["buildInternal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ calculateSerializeBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ calculateSerializeBufferSizeNew ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSizeNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ deSerializeDouble ( swigCPtr ,    this ,    btQuantizedBvhDoubleData . getCPtr ( quantizedBvhDoubleData )  ,    quantizedBvhDoubleData )  ;", "}", "METHOD_END"], "methodName": ["deSerializeDouble"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ deSerializeFloat ( swigCPtr ,    this ,    btQuantizedBvhFloatData . getCPtr ( quantizedBvhFloatData )  ,    quantizedBvhFloatData )  ;", "}", "METHOD_END"], "methodName": ["deSerializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvh _ deSerializeInPlace ( i _ alignedDataBuffer ,    i _ dataBufferSize ,    i _ swapEndian )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuantizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["deSerializeInPlace"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ getAlignmentSerializationPadding (  )  ;", "}", "METHOD_END"], "methodName": ["getAlignmentSerializationPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuantizedBvhNode _ t ( CollisionJNI . btQuantizedBvh _ getLeafNodeArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLeafNodeArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuantizedBvhNode _ t ( CollisionJNI . btQuantizedBvh _ getQuantizedNodeArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedNodeArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btBvhSubtreeInfo _ t ( CollisionJNI . btQuantizedBvh _ getSubtreeInfoArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSubtreeInfoArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ isQuantized ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isQuantized"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "assert   out . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ quantize ( swigCPtr ,    this ,    out ,    point ,    isMax )  ;", "}", "}", "METHOD_END"], "methodName": ["quantize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "assert   out . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ quantizeWithClamp ( swigCPtr ,    this ,    out ,    point 2  ,    isMax )  ;", "}", "}", "METHOD_END"], "methodName": ["quantizeWithClamp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ reportAabbOverlappingNodex ( swigCPtr ,    this ,    btNodeOverlapCallback . getCPtr ( nodeCallback )  ,    nodeCallback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["reportAabbOverlappingNodex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ reportBoxCastOverlappingNodex ( swigCPtr ,    this ,    btNodeOverlapCallback . getCPtr ( nodeCallback )  ,    nodeCallback ,    raySource ,    rayTarget ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["reportBoxCastOverlappingNodex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ reportRayOverlappingNodex ( swigCPtr ,    this ,    btNodeOverlapCallback . getCPtr ( nodeCallback )  ,    nodeCallback ,    raySource ,    rayTarget )  ;", "}", "METHOD_END"], "methodName": ["reportRayOverlappingNodex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ serialize _  _ SWIG _  1  ( swigCPtr ,    this ,    dataBuffer ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvh _ serialize _  _ SWIG _  0  ( swigCPtr ,    this ,    o _ alignedDataBuffer ,    i _ dataBufferSize ,    i _ swapEndian )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ setQuantizationValues _  _ SWIG _  1  ( swigCPtr ,    this ,    bvhAabbMin ,    bvhAabbMax )  ;", "}", "METHOD_END"], "methodName": ["setQuantizationValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ setQuantizationValues _  _ SWIG _  0  ( swigCPtr ,    this ,    bvhAabbMin ,    bvhAabbMax ,    quantizationMargin )  ;", "}", "METHOD_END"], "methodName": ["setQuantizationValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvh _ setTraversalMode ( swigCPtr ,    this ,    traversalMode )  ;", "}", "METHOD_END"], "methodName": ["setTraversalMode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "assert   vecIn . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   CollisionJNI _ unQuantize ( swigCPtr ,    this ,    vecIn )  ;", "}", "}", "METHOD_END"], "methodName": ["unQuantize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvh"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhDoubleData _ bvhAabbMax _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhDoubleData _ bvhAabbMin _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhDoubleData _ bvhQuantization _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhDoubleData _ contiguousNodesPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvhNodeDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhDoubleData _ curNodeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhDoubleData _ numContiguousLeafNodes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumContiguousLeafNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhDoubleData _ numQuantizedContiguousNodes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumQuantizedContiguousNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhDoubleData _ numSubtreeHeaders _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumSubtreeHeaders"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhDoubleData _ quantizedContiguousNodesPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuantizedBvhNodeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhDoubleData _ subTreeInfoPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBvhSubtreeInfoData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSubTreeInfoPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhDoubleData _ traversalMode _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTraversalMode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhDoubleData _ useQuantization _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ bvhAabbMax _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBvhAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ bvhAabbMin _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBvhAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ bvhQuantization _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBvhQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ contiguousNodesPtr _ set ( swigCPtr ,    this ,    btOptimizedBvhNodeDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ curNodeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ numContiguousLeafNodes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumContiguousLeafNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ numQuantizedContiguousNodes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumQuantizedContiguousNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ numSubtreeHeaders _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumSubtreeHeaders"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ quantizedContiguousNodesPtr _ set ( swigCPtr ,    this ,    btQuantizedBvhNodeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ subTreeInfoPtr _ set ( swigCPtr ,    this ,    btBvhSubtreeInfoData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSubTreeInfoPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ traversalMode _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTraversalMode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhDoubleData _ useQuantization _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhFloatData _ bvhAabbMax _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhFloatData _ bvhAabbMin _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhFloatData _ bvhQuantization _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhFloatData _ contiguousNodesPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvhNodeFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhFloatData _ curNodeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhFloatData _ numContiguousLeafNodes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumContiguousLeafNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhFloatData _ numQuantizedContiguousNodes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumQuantizedContiguousNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhFloatData _ numSubtreeHeaders _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumSubtreeHeaders"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhFloatData _ quantizedContiguousNodesPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuantizedBvhNodeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhFloatData _ subTreeInfoPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBvhSubtreeInfoData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSubTreeInfoPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhFloatData _ traversalMode _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTraversalMode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhFloatData _ useQuantization _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ bvhAabbMax _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBvhAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ bvhAabbMin _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBvhAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ bvhQuantization _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBvhQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ contiguousNodesPtr _ set ( swigCPtr ,    this ,    btOptimizedBvhNodeFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ curNodeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ numContiguousLeafNodes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumContiguousLeafNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ numQuantizedContiguousNodes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumQuantizedContiguousNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ numSubtreeHeaders _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumSubtreeHeaders"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ quantizedContiguousNodesPtr _ set ( swigCPtr ,    this ,    btQuantizedBvhNodeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedContiguousNodesPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ subTreeInfoPtr _ set ( swigCPtr ,    this ,    btBvhSubtreeInfoData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSubTreeInfoPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ traversalMode _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTraversalMode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhFloatData _ useQuantization _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseQuantization"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ getEscapeIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ escapeIndexOrTriangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndexOrTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ getPartId ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPartId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ quantizedAabbMax _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ quantizedAabbMin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ getTriangleIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ isLeafNode ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isLeafNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNode _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNode _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNode _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNode _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNode _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNode _ escapeIndexOrTriangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndexOrTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNode _ quantizedAabbMax _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNode _ quantizedAabbMin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNode"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNodeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNodeData _ escapeIndexOrTriangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEscapeIndexOrTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNodeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNodeData _ quantizedAabbMax _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNodeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhNodeData _ quantizedAabbMin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNodeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNodeData _ escapeIndexOrTriangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEscapeIndexOrTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNodeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNodeData _ quantizedAabbMax _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNodeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhNodeData _ quantizedAabbMin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhNodeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhTree _ build _ tree ( swigCPtr ,    this ,    GIM _ BVH _ DATA _ ARRAY . getCPtr ( primitive _ boxes )  ,    primitive _ boxes )  ;", "}", "METHOD_END"], "methodName": ["build_tree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhTree _ clearNodes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearNodes"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhTree _ getEscapeNodeIndex ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getEscapeNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhTree _ getLeftNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getLeftNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhTree _ getNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["getNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhTree _ getNodeCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhTree _ getNodeData ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getNodeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhTree _ getRightNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["getRightNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhTree _ get _ node _ pointer _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   BT _ QUANTIZED _ BVH _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btQuantizedBvhTree _ get _ node _ pointer _  _ SWIG _  0  ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   BT _ QUANTIZED _ BVH _ NODE ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_node_pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btQuantizedBvhTree _ isLeafNode ( swigCPtr ,    this ,    nodeindex )  ;", "}", "METHOD_END"], "methodName": ["isLeafNode"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "assert   quantizedpoint . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ quantizePoint ( swigCPtr ,    this ,    quantizedpoint ,    point )  ;", "}", "}", "METHOD_END"], "methodName": ["quantizePoint"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btQuantizedBvhTree _ setNodeBound ( swigCPtr ,    this ,    nodeindex ,    btAABB . getCPtr ( bound )  ,    bound )  ;", "}", "METHOD_END"], "methodName": ["setNodeBound"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "assert   quantizedMin . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   quantizedMax . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   CollisionJNI _ testQuantizedBoxOverlapp ( swigCPtr ,    this ,    node _ index ,    quantizedMin ,    quantizedMax )  ;", "}", "}", "METHOD_END"], "methodName": ["testQuantizedBoxOverlapp"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btQuantizedBvhTree"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btScaledBvhTriangleMeshShape _ getChildShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBvhTriangleMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btScaledBvhTriangleMeshShape _ getChildShapeConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBvhTriangleMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShapeConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btScaledBvhTriangleMeshShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btScaledBvhTriangleMeshShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btScaledBvhTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btScaledBvhTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btScaledBvhTriangleMeshShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btScaledBvhTriangleMeshShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btScaledBvhTriangleMeshShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btScaledBvhTriangleMeshShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledBvhTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btScaledTriangleMeshShapeData _ localScaling _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btScaledTriangleMeshShapeData _ trimeshShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleMeshShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTrimeshShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btScaledTriangleMeshShapeData _ localScaling _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btScaledTriangleMeshShapeData _ trimeshShapeData _ set ( swigCPtr ,    this ,    btTriangleMeshShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTrimeshShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btScaledTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ buildHull ( swigCPtr ,    this ,    margin )  ;", "}", "METHOD_END"], "methodName": ["buildHull"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ getIndex ( swigCPtr ,    this ,    idx )  ;", "}", "METHOD_END"], "methodName": ["getIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ getVertex ( swigCPtr ,    this ,    idx )  ;", "}", "METHOD_END"], "methodName": ["getVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ numIndices ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["numIndices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ numTriangles ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["numTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ numVertices ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["numVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShapeHull _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShapeHull _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShapeHull _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShapeHull _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShapeHull _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShapeHull"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShortIntIndexData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShortIntIndexData _ value _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShortIntIndexData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShortIntIndexData _ value _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShortIntIndexTripletData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btShortIntIndexTripletData _ values _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShortIntIndexTripletData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btShortIntIndexTripletData _ values _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btShortIntIndexTripletData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimpleBroadphase _ aabbOverlap ( btSimpleBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btSimpleBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ;", "}", "METHOD_END"], "methodName": ["aabbOverlap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimpleBroadphase _ rayTest _  _ SWIG _  2  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimpleBroadphase _ rayTest _  _ SWIG _  1  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphase"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimpleBroadphase _ rayTest _  _ SWIG _  0  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btBroadphaseRayCallback . getCPtr ( rayCallback )  ,    rayCallback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimpleBroadphase _ testAabbOverlap ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ;", "}", "METHOD_END"], "methodName": ["testAabbOverlap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphase"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimpleBroadphaseProxy _ GetNextFree ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["GetNextFree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimpleBroadphaseProxy _ SetNextFree ( swigCPtr ,    this ,    next )  ;", "}", "METHOD_END"], "methodName": ["SetNextFree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimpleBroadphaseProxy _ nextFree _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNextFree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimpleBroadphaseProxy _ nextFree _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNextFree"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimpleBroadphaseProxy"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimplePair _ indexA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndexA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimplePair _ indexB _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIndexB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimplePair _ userPointer _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimplePair _ userValue _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimplePair _ indexA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndexA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimplePair _ indexB _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIndexB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimplePair _ userPointer _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimplePair _ userValue _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserValue"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimplePair"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimulationIslandManager _ buildAndProcessIslands ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btCollisionWorld . getCPtr ( collisionWorld )  ,    collisionWorld ,    btSimulationIslandManager . IslandCallback . getCPtr ( callback )  ,    callback )  ;", "}", "METHOD_END"], "methodName": ["buildAndProcessIslands"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimulationIslandManager _ buildIslands ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btCollisionWorld . getCPtr ( colWorld )  ,    colWorld )  ;", "}", "METHOD_END"], "methodName": ["buildIslands"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimulationIslandManager _ findUnions ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btCollisionWorld . getCPtr ( colWorld )  ,    colWorld )  ;", "}", "METHOD_END"], "methodName": ["findUnions"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSimulationIslandManager _ getSplitIslands ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitIslands"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "return   new   btUnionFind ( CollisionJNI . btSimulationIslandManager _ getUnionFind ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUnionFind"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimulationIslandManager _ initUnionFind ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["initUnionFind"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimulationIslandManager _ setSplitIslands ( swigCPtr ,    this ,    doSplitIslands )  ;", "}", "METHOD_END"], "methodName": ["setSplitIslands"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimulationIslandManager _ storeIslandActivationState ( swigCPtr ,    this ,    btCollisionWorld . getCPtr ( world )  ,    world )  ;", "}", "METHOD_END"], "methodName": ["storeIslandActivationState"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSimulationIslandManager _ updateActivationState ( swigCPtr ,    this ,    btCollisionWorld . getCPtr ( colWorld )  ,    colWorld ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["updateActivationState"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSimulationIslandManager"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSortedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btSortedOverlappingPairCache _ getOverlapFilterCallback ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOverlapFilterCallback ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlapFilterCallback"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSortedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   new   btBroadphasePairArray ( CollisionJNI . btSortedOverlappingPairCache _ getOverlappingPairArrayConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOverlappingPairArrayConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSortedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSortedOverlappingPairCache _ needsBroadphaseCollision ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( proxy 0  )  ,    proxy 0  ,    btBroadphaseProxy . getCPtr ( proxy 1  )  ,    proxy 1  )  ;", "}", "METHOD_END"], "methodName": ["needsBroadphaseCollision"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSortedOverlappingPairCache"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereBoxCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSphereBoxCollisionAlgorithm _ getSphereDistance ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( boxObjWrap )  ,    boxObjWrap ,    v 3 PointOnBox ,    normal ,    SWIGTYPE _ p _ float . getCPtr ( penetrationDepth )  ,    v 3 SphereCenter ,    fRadius ,    maxContactDistance )  ;", "}", "METHOD_END"], "methodName": ["getSphereDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereBoxCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSphereBoxCollisionAlgorithm _ getSpherePenetration ( swigCPtr ,    this ,    boxHalfExtent ,    sphereRelPos ,    closestPoint ,    normal )  ;", "}", "METHOD_END"], "methodName": ["getSpherePenetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereBoxCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSphereShape _ getRadius ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSphereShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSphereShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSphereShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSphereShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSphereShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSphereShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSphereShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSphereShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSphereShape _ setUnscaledRadius ( swigCPtr ,    this ,    radius )  ;", "}", "METHOD_END"], "methodName": ["setUnscaledRadius"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereSphereCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSphereTriangleCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShape _ getPlaneConstant ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPlaneConstant"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShape _ getPlaneNormal ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPlaneNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btStaticPlaneShapeData _ collisionShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btStaticPlaneShapeData _ localScaling _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShapeData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStaticPlaneShapeData _ planeConstant _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPlaneConstant"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btStaticPlaneShapeData _ planeNormal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPlaneNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShapeData _ collisionShapeData _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShapeData _ localScaling _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShapeData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShapeData _ planeConstant _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPlaneConstant"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStaticPlaneShapeData _ planeNormal _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPlaneNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStaticPlaneShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStorageResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btStorageResult _ closestPointInB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getClosestPointInB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStorageResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStorageResult _ distance _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStorageResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btStorageResult _ normalOnSurfaceB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormalOnSurfaceB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStorageResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStorageResult _ closestPointInB _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClosestPointInB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStorageResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStorageResult _ distance _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDistance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStorageResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStorageResult _ normalOnSurfaceB _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormalOnSurfaceB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStorageResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ InternalProcessAllTriangles ( swigCPtr ,    this ,    btInternalTriangleIndexCallback . getCPtr ( callback )  ,    callback ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["InternalProcessAllTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ calculateAabbBruteForce ( swigCPtr ,    this ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["calculateAabbBruteForce"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ calculateSerializeBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ getLockedReadOnlyVertexIndexBase _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( stride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  )  ;", "}", "METHOD_END"], "methodName": ["getLockedReadOnlyVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ getLockedReadOnlyVertexIndexBase _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( stride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["getLockedReadOnlyVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ getLockedVertexIndexBase _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( stride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  )  ;", "}", "METHOD_END"], "methodName": ["getLockedVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ getLockedVertexIndexBase _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( stride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["getLockedVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ getNumSubParts ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumSubParts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ getPremadeAabb ( swigCPtr ,    this ,    btVector 3  . getCPtr ( aabbMin )  ,    aabbMin ,    btVector 3  . getCPtr ( aabbMax )  ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getPremadeAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ getScaling ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ hasPremadeAabb ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasPremadeAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ preallocateIndices ( swigCPtr ,    this ,    numindices )  ;", "}", "METHOD_END"], "methodName": ["preallocateIndices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ preallocateVertices ( swigCPtr ,    this ,    numverts )  ;", "}", "METHOD_END"], "methodName": ["preallocateVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterface _ serialize ( swigCPtr ,    this ,    dataBuffer ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ setPremadeAabb ( swigCPtr ,    this ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["setPremadeAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ setScaling ( swigCPtr ,    this ,    scaling )  ;", "}", "METHOD_END"], "methodName": ["setScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ unLockReadOnlyVertexBase ( swigCPtr ,    this ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["unLockReadOnlyVertexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterface _ unLockVertexBase ( swigCPtr ,    this ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["unLockVertexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterface"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btStridingMeshInterfaceData _ meshPartsPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMeshPartData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshPartsPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterfaceData _ numMeshParts _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumMeshParts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btStridingMeshInterfaceData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btStridingMeshInterfaceData _ scaling _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterfaceData _ meshPartsPtr _ set ( swigCPtr ,    this ,    btMeshPartData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMeshPartsPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterfaceData _ numMeshParts _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumMeshParts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterfaceData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btStridingMeshInterfaceData _ scaling _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setScaling"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btStridingMeshInterfaceData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSubSimplexClosestResult _ barycentricCoords _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBarycentricCoords"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btSubSimplexClosestResult _ closestPointOnSimplex _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getClosestPointOnSimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSubSimplexClosestResult _ degenerate _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDegenerate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btSubSimplexClosestResult _ usedVertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btUsageBitfield ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUsedVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btSubSimplexClosestResult _ isValid ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isValid"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ reset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ setBarycentricCoordinates _  _ SWIG _  4  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setBarycentricCoordinates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ setBarycentricCoordinates _  _ SWIG _  3  ( swigCPtr ,    this ,    a )  ;", "}", "METHOD_END"], "methodName": ["setBarycentricCoordinates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ setBarycentricCoordinates _  _ SWIG _  2  ( swigCPtr ,    this ,    a ,    b )  ;", "}", "METHOD_END"], "methodName": ["setBarycentricCoordinates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ setBarycentricCoordinates _  _ SWIG _  1  ( swigCPtr ,    this ,    a ,    b ,    c )  ;", "}", "METHOD_END"], "methodName": ["setBarycentricCoordinates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ setBarycentricCoordinates _  _ SWIG _  0  ( swigCPtr ,    this ,    a ,    b ,    c ,    d )  ;", "}", "METHOD_END"], "methodName": ["setBarycentricCoordinates"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ barycentricCoords _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBarycentricCoords"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ closestPointOnSimplex _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClosestPointOnSimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ degenerate _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDegenerate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btSubSimplexClosestResult _ usedVertices _ set ( swigCPtr ,    this ,    btUsageBitfield . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUsedVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubSimplexClosestResult"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btSubsimplexConvexCast"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTetrahedronShapeEx"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTetrahedronShapeEx _ setVertices ( swigCPtr ,    this ,    v 0  ,    v 1  ,    v 2  ,    v 3  )  ;", "}", "METHOD_END"], "methodName": ["setVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTetrahedronShapeEx"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangle _ partId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPartId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangle _ triangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangle _ vertex 0  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertex0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangle _ vertex 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertex1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangle _ vertex 2  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertex2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangle _ partId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPartId"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangle _ triangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangle _ vertex 0  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertex0"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangle _ vertex 1  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertex1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangle _ vertex 2  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertex2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangle"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleBuffer _ clearBuffer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleBuffer"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleBuffer"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleBuffer _ getNumTriangles ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleBuffer"}, {"methodBody": ["METHOD_START", "{", "return   new   btTriangle ( CollisionJNI . btTriangleBuffer _ getTriangle ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleBuffer"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleCallback _ processTriangle ( swigCPtr ,    this ,    btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleConvexcastCallback _ allowedPenetration _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAllowedPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleConvexcastCallback _ convexShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleConvexcastCallback _ convexShapeFrom _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexShapeFrom"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleConvexcastCallback _ convexShapeTo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConvexShapeTo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleConvexcastCallback _ hitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleConvexcastCallback _ triangleCollisionMargin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleConvexcastCallback _ triangleToWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTriangleToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     ( btTriangleConvexcastCallback . class )  )", "CollisionJNI . btTriangleConvexcastCallback _ processTriangle ( swigCPtr ,    this ,    linearmath . btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "else", "CollisionJNI . btTriangleConvexcastCallback _ processTriangleSwigExplicitbtTriangleConvexcastCallback ( swigCPtr ,    this ,    linearmath . btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleConvexcastCallback _ reportHit ( swigCPtr ,    this ,    hitNormalLocal ,    hitPointLocal ,    hitFraction ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["reportHit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleConvexcastCallback _ allowedPenetration _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAllowedPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleConvexcastCallback _ convexShape _ set ( swigCPtr ,    this ,    btConvexShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleConvexcastCallback _ convexShapeFrom _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexShapeFrom"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleConvexcastCallback _ convexShapeTo _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexShapeTo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleConvexcastCallback _ hitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleConvexcastCallback _ triangleCollisionMargin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleConvexcastCallback _ triangleToWorld _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleConvexcastCallback"}, {"methodBody": ["METHOD_START", "{", "return   addIndexedMesh ( mesh ,    PHY _ ScalarType . PHY _ SHORT )  ;", "}", "METHOD_END"], "methodName": ["addIndexedMesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "mesh . obtain (  )  ;", "internalAddedMesh ( mesh ,    indexType )  ;", "meshes . add ( mesh )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addIndexedMesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "btIndexedMesh   mesh    =    btIndexedMesh . obtain ( meshPart )  ;", "addIndexedMesh ( mesh ,    PHY _ ScalarType . PHY _ SHORT )  ;", "mesh . release (  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addMeshPart"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     ( meshParts . length )  ;    i +  +  )", "addMeshPart ( meshParts [ i ]  )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addMeshParts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "for    ( final   MeshPart   meshPart    :    meshParts )", "addMeshPart ( meshPart )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addMeshParts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "for    ( final   NodePart   nodePart    :    nodeParts )", "addMeshPart ( nodePart . meshPart )  ;", "return   this ;", "}", "METHOD_END"], "methodName": ["addNodeParts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "if    (  ( array . meshes . size )     !  =     ( tags . size )  )", "return   false ;", "for    ( final   btedMesh   mesh    :    array . meshes )     {", "boolean   found    =    false ;", "final   Object   tag    =    mesh . tag ;", "if    ( tag    =  =    null )", "return   false ;", "for    ( final   T   t    :    tags )     {", "if    ( t . equals ( tag )  )     {", "found    =    true ;", "break ;", "}", "}", "if    (  ! found )", "return   false ;", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["compare"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   meshes . get ( index )  ;", "}", "METHOD_END"], "methodName": ["getIndexedMesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btIndexedMesh _ t ( CollisionJNI . btTriangleIndexVertexArray _ getIndexedMeshArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIndexedMeshArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   meshes . size ;", "}", "METHOD_END"], "methodName": ["getIndexedMeshCount"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "for    ( final   btTriangleIndexVertexArray   instance    :    btTriangleIndexVertexArray . instances )     {", "if    ( btTriangleIndexVertexArray . compare ( instance ,    tags )  )", "return   instance ;", "}", "return   null ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ getLockedReadOnlyVertexIndexBase _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( vertexStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  )  ;", "}", "METHOD_END"], "methodName": ["getLockedReadOnlyVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ getLockedReadOnlyVertexIndexBase _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( vertexStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["getLockedReadOnlyVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ getLockedVertexIndexBase _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( vertexStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  )  ;", "}", "METHOD_END"], "methodName": ["getLockedVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ getLockedVertexIndexBase _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( vertexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( numverts )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( type )  ,    SWIGTYPE _ p _ int . getCPtr ( vertexStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( indexbase )  ,    SWIGTYPE _ p _ int . getCPtr ( indexstride )  ,    SWIGTYPE _ p _ int . getCPtr ( numfaces )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( indicestype )  ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["getLockedVertexIndexBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ internalAddIndexedMesh _  _ SWIG _  1  ( swigCPtr ,    this ,    btIndexedMesh . getCPtr ( mesh )  ,    mesh )  ;", "}", "METHOD_END"], "methodName": ["internalAddIndexedMesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ internalAddIndexedMesh _  _ SWIG _  0  ( swigCPtr ,    this ,    btIndexedMesh . getCPtr ( mesh )  ,    mesh ,    indexType )  ;", "}", "METHOD_END"], "methodName": ["internalAddIndexedMesh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "btTriangleIndexVertexArray   result    =    btTriangleIndexVertexArray . getInstance ( meshParts )  ;", "if    ( result    =  =    null )     {", "result    =    new   btTriangleIndexVertexArray ( meshParts )  ;", "btTriangleIndexVertexArray . instances . add ( result )  ;", "}", "result . obtain (  )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["obtain"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexArray _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexArray _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexArray _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexArray _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexArray _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexArray"}, {"methodBody": ["METHOD_START", "{", "assert   triangleIndexBase . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   vertexBase . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   materialBase . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   triangleMaterialsBase . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   CollisionJNI . new _  _  _ SWIG _  1  ( numTriangles ,    triangleIndexBase ,    triangleIndexStride ,    numVertices ,    vertexBase ,    vertexStride ,    numMaterials ,    materialBase ,    materialStride ,    triangleMaterialsBase ,    materialIndexStride )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtTriangleIndexVertexMaterialArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ addMaterialProperties _  _ SWIG _  1  ( swigCPtr ,    this ,    btMaterialProperties . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["addMaterialProperties"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ addMaterialProperties _  _ SWIG _  0  ( swigCPtr ,    this ,    btMaterialProperties . getCPtr ( mat )  ,    mat ,    triangleType )  ;", "}", "METHOD_END"], "methodName": ["addMaterialProperties"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ getLockedMaterialBase _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( materialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numMaterials )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( materialType )  ,    SWIGTYPE _ p _ int . getCPtr ( materialStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( triangleMaterialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numTriangles )  ,    SWIGTYPE _ p _ int . getCPtr ( triangleMaterialStride )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( triangleType )  )  ;", "}", "METHOD_END"], "methodName": ["getLockedMaterialBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ getLockedMaterialBase _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( materialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numMaterials )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( materialType )  ,    SWIGTYPE _ p _ int . getCPtr ( materialStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( triangleMaterialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numTriangles )  ,    SWIGTYPE _ p _ int . getCPtr ( triangleMaterialStride )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( triangleType )  ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["getLockedMaterialBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ getLockedReadOnlyMaterialBase _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( materialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numMaterials )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( materialType )  ,    SWIGTYPE _ p _ int . getCPtr ( materialStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( triangleMaterialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numTriangles )  ,    SWIGTYPE _ p _ int . getCPtr ( triangleMaterialStride )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( triangleType )  )  ;", "}", "METHOD_END"], "methodName": ["getLockedReadOnlyMaterialBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ getLockedReadOnlyMaterialBase _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( materialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numMaterials )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( materialType )  ,    SWIGTYPE _ p _ int . getCPtr ( materialStride )  ,    SWIGTYPE _ p _ p _ unsigned _ char . getCPtr ( triangleMaterialBase )  ,    SWIGTYPE _ p _ int . getCPtr ( numTriangles )  ,    SWIGTYPE _ p _ int . getCPtr ( triangleMaterialStride )  ,    SWIGTYPE _ p _ PHY _ ScalarType . getCPtr ( triangleType )  ,    subpart )  ;", "}", "METHOD_END"], "methodName": ["getLockedReadOnlyMaterialBase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleIndexVertexMaterialArray _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleIndexVertexMaterialArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfo _ edgeV 0 V 1 Angle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeV0V1Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfo _ edgeV 1 V 2 Angle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeV1V2Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfo _ edgeV 2 V 0 Angle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeV2V0Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfo _ flags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfo _ edgeV 0 V 1 Angle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeV0V1Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfo _ edgeV 1 V 2 Angle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeV1V2Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfo _ edgeV 2 V 0 Angle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeV2V0Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfo _ flags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoData _ edgeV 0 V 1 Angle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeV0V1Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoData _ edgeV 1 V 2 Angle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeV1V2Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoData _ edgeV 2 V 0 Angle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeV2V0Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoData _ flags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoData _ edgeV 0 V 1 Angle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeV0V1Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoData _ edgeV 1 V 2 Angle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeV1V2Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoData _ edgeV 2 V 0 Angle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeV2V0Angle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoData _ flags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ calculateSerializeBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMap _ deSerialize ( swigCPtr ,    this ,    btTriangleInfoMapData . getCPtr ( data )  ,    data )  ;", "}", "METHOD_END"], "methodName": ["deSerialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ convexEpsilon _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getConvexEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ edgeDistanceThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ equalVertexThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEqualVertexThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ maxEdgeAngleThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxEdgeAngleThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ planarEpsilon _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPlanarEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ zeroAreaThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getZeroAreaThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMap _ serialize ( swigCPtr ,    this ,    dataBuffer ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMap _ convexEpsilon _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMap _ edgeDistanceThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMap _ equalVertexThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEqualVertexThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMap _ maxEdgeAngleThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxEdgeAngleThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMap _ planarEpsilon _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPlanarEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMap _ zeroAreaThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setZeroAreaThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMap"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ convexEpsilon _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getConvexEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ edgeDistanceThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEdgeDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ equalVertexThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEqualVertexThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ hashTablePtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHashTablePtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ hashTableSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHashTableSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ keyArrayPtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getKeyArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ nextPtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNextPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ nextSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNextSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ numKeys _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumKeys"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ numValues _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ planarEpsilon _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPlanarEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleInfoMapData _ valueArrayPtr _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfoData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getValueArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleInfoMapData _ zeroAreaThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getZeroAreaThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ convexEpsilon _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConvexEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ edgeDistanceThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEdgeDistanceThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ equalVertexThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEqualVertexThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ hashTablePtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setHashTablePtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ hashTableSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHashTableSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ keyArrayPtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setKeyArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "CollisionJNI _ nextPtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setNextPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ nextSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNextSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ numKeys _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumKeys"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ numValues _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumValues"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ planarEpsilon _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPlanarEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ valueArrayPtr _ set ( swigCPtr ,    this ,    btTriangleInfoData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setValueArrayPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleInfoMapData _ zeroAreaThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setZeroAreaThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleInfoMapData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMesh _ addIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["addIndex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMesh _ addTriangle _  _ SWIG _  1  ( swigCPtr ,    this ,    vertex 0  ,    vertex 1  ,    vertex 2  )  ;", "}", "METHOD_END"], "methodName": ["addTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMesh _ addTriangle _  _ SWIG _  0  ( swigCPtr ,    this ,    vertex 0  ,    vertex 1  ,    vertex 2  ,    removeDuplicateVertices )  ;", "}", "METHOD_END"], "methodName": ["addTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMesh _ addTriangleIndices ( swigCPtr ,    this ,    index 1  ,    index 2  ,    index 3  )  ;", "}", "METHOD_END"], "methodName": ["addTriangleIndices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMesh _ findOrAddVertex ( swigCPtr ,    this ,    vertex ,    removeDuplicateVertices )  ;", "}", "METHOD_END"], "methodName": ["findOrAddVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMesh _ getNumTriangles ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTriangles"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMesh _ getUse 3  2 bitIndices ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUse32bitIndices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMesh _ getUse 4 componentVertices ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUse4componentVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMesh _ weldingThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWeldingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMesh _ weldingThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWeldingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMesh"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ getLocalAabbMax ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLocalAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ getLocalAabbMin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLocalAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleMeshShape _ getMeshInterface ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleMeshShape _ getMeshInterfaceConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterfaceConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ localGetSupportingVertex ( swigCPtr ,    this ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localGetSupportingVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ localGetSupportingVertexWithoutMargin ( swigCPtr ,    this ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localGetSupportingVertexWithoutMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShape _ recalcLocalAabb ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["recalcLocalAabb"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShapeData _ collisionMargin _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleMeshShapeData _ collisionShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionShapeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleMeshShapeData _ meshInterface _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterfaceData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleMeshShapeData _ pad 3  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleMeshShapeData _ quantizedDoubleBvh _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuantizedBvhDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedDoubleBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleMeshShapeData _ quantizedFloatBvh _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuantizedBvhFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getQuantizedFloatBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleMeshShapeData _ triangleInfoMap _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfoMapData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShapeData _ collisionMargin _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionMargin"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShapeData _ collisionShapeData _ set ( swigCPtr ,    this ,    btCollisionShapeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShapeData _ meshInterface _ set ( swigCPtr ,    this ,    btStridingMeshInterfaceData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShapeData _ pad 3  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShapeData _ quantizedDoubleBvh _ set ( swigCPtr ,    this ,    btQuantizedBvhDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedDoubleBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShapeData _ quantizedFloatBvh _ set ( swigCPtr ,    this ,    btQuantizedBvhFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setQuantizedFloatBvh"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleMeshShapeData _ triangleInfoMap _ set ( swigCPtr ,    this ,    btTriangleInfoMapData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleMeshShapeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleRaycastCallback _ flags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleRaycastCallback _ from _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFrom"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleRaycastCallback _ hitFraction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleRaycastCallback _ to _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     ( btTriangleRaycastCallback . class )  )", "CollisionJNI . btTriangleRaycastCallback _ processTriangle ( swigCPtr ,    this ,    linearmath . btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "else", "CollisionJNI . btTriangleRaycastCallback _ processTriangleSwigExplicitbtTriangleRaycastCallback ( swigCPtr ,    this ,    linearmath . btVector 3  . getCPtr ( triangle )  ,    triangle ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["processTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleRaycastCallback _ reportHit ( swigCPtr ,    this ,    hitNormalLocal ,    hitFraction ,    partId ,    triangleIndex )  ;", "}", "METHOD_END"], "methodName": ["reportHit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleRaycastCallback _ flags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFlags"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleRaycastCallback _ from _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrom"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleRaycastCallback _ hitFraction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHitFraction"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleRaycastCallback _ to _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTo"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "CollisionJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleRaycastCallback"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShape _ calcNormal ( swigCPtr ,    this ,    normal )  ;", "}", "METHOD_END"], "methodName": ["calcNormal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShape _ getPlaneEquation ( swigCPtr ,    this ,    i ,    planeNormal ,    planeSupport )  ;", "}", "METHOD_END"], "methodName": ["getPlaneEquation"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleShape _ getVertexPtr ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getVertexPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleShape _ getVertexPtrConst ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getVertexPtrConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btTriangleShape _ vertices 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShape _ vertices 1  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShapeEx _ applyTransform ( swigCPtr ,    this ,    t )  ;", "}", "METHOD_END"], "methodName": ["applyTransform"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShapeEx"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btTriangleShapeEx _ buildTriPlane ( swigCPtr ,    this ,    btVector 4  . getCPtr ( plane )  ,    plane )  ;", "}", "METHOD_END"], "methodName": ["buildTriPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShapeEx"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShapeEx"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btTriangleShapeEx _ overlap _ test _ conservative ( swigCPtr ,    this ,    btTriangleShapeEx . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["overlap_test_conservative"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btTriangleShapeEx"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btUniformScalingShape _ getChildShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btUniformScalingShape _ getChildShapeConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShapeConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUniformScalingShape _ getUniformScalingFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUniformScalingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUniformScalingShape _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUniformScalingShape _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUniformScalingShape _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUniformScalingShape _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUniformScalingShape _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUniformScalingShape _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUniformScalingShape _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUniformScalingShape _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUniformScalingShape"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUnionFind _ Free ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Free"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUnionFind _ allocate ( swigCPtr ,    this ,    N )  ;", "}", "METHOD_END"], "methodName": ["allocate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUnionFind _ find _  _ SWIG _  1  ( swigCPtr ,    this ,    x )  ;", "}", "METHOD_END"], "methodName": ["find"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUnionFind _ find _  _ SWIG _  0  ( swigCPtr ,    this ,    p ,    q )  ;", "}", "METHOD_END"], "methodName": ["find"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   new   btElement ( CollisionJNI . btUnionFind _ getElement ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getElement"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   new   btElement ( CollisionJNI . btUnionFind _ getElementConst ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getElementConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUnionFind _ getNumElements ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumElements"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUnionFind _ isRoot ( swigCPtr ,    this ,    x )  ;", "}", "METHOD_END"], "methodName": ["isRoot"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUnionFind _ reset ( swigCPtr ,    this ,    N )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUnionFind _ sortIslands ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["sortIslands"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUnionFind _ unite ( swigCPtr ,    this ,    p ,    q )  ;", "}", "METHOD_END"], "methodName": ["unite"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUnionFind"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ unused 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUnused1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ unused 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUnused2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ unused 3  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUnused3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ unused 4  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUnused4"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ usedVertexA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUsedVertexA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ usedVertexB _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUsedVertexB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ usedVertexC _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUsedVertexC"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btUsageBitfield _ usedVertexD _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUsedVertexD"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ reset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ unused 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnused1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ unused 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnused2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ unused 3  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnused3"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ unused 4  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnused4"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ usedVertexA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUsedVertexA"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ usedVertexB _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUsedVertexB"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ usedVertexC _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUsedVertexC"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btUsageBitfield _ usedVertexD _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUsedVertexD"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btUsageBitfield"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ addVertex ( swigCPtr ,    this ,    w ,    p ,    q )  ;", "}", "METHOD_END"], "methodName": ["addVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ backup _ closest ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["backup_closest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ closest ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["closest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ closestPtPointTetrahedron ( swigCPtr ,    this ,    p ,    a ,    b ,    c ,    d ,    btSubSimplexClosestResult . getCPtr ( finalResult )  ,    finalResult )  ;", "}", "METHOD_END"], "methodName": ["closestPtPointTetrahedron"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ closestPtPointTriangle ( swigCPtr ,    this ,    p ,    a ,    b ,    c ,    btSubSimplexClosestResult . getCPtr ( result )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["closestPtPointTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ compute _ points ( swigCPtr ,    this ,    p 1  ,    p 2  )  ;", "}", "METHOD_END"], "methodName": ["compute_points"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ emptySimplex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["emptySimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ fullSimplex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["fullSimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ cachedBC _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSubSimplexClosestResult ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCachedBC"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ cachedP 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCachedP1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ cachedP 2  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCachedP2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ cachedV _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCachedV"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ cachedValidClosest _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCachedValidClosest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ equalVertexThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEqualVertexThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ lastW _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLastW"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ needsUpdate _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNeedsUpdate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ numVertices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ getSimplex ( swigCPtr ,    this ,    btVector 3  . getCPtr ( pBuf )  ,    pBuf ,    btVector 3  . getCPtr ( qBuf )  ,    qBuf ,    btVector 3  . getCPtr ( yBuf )  ,    yBuf )  ;", "}", "METHOD_END"], "methodName": ["getSimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ simplexPointsP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSimplexPointsP"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ simplexPointsQ _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSimplexPointsQ"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . btVoronoiSimplexSolver _ simplexVectorW _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSimplexVectorW"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ inSimplex ( swigCPtr ,    this ,    w )  ;", "}", "METHOD_END"], "methodName": ["inSimplex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ m _ numVerticesVar ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["m_numVerticesVar"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ maxVertex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["maxVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ pointOutsideOfPlane ( swigCPtr ,    this ,    p ,    a ,    b ,    c ,    d )  ;", "}", "METHOD_END"], "methodName": ["pointOutsideOfPlane"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ reduceVertices ( swigCPtr ,    this ,    btUsageBitfield . getCPtr ( usedVerts )  ,    usedVerts )  ;", "}", "METHOD_END"], "methodName": ["reduceVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ removeVertex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeVertex"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ reset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ cachedBC _ set ( swigCPtr ,    this ,    btSubSimplexClosestResult . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedBC"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ cachedP 1  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedP1"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ cachedP 2  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedP2"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ cachedV _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedV"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ cachedValidClosest _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedValidClosest"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ equalVertexThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEqualVertexThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ lastW _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLastW"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ needsUpdate _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNeedsUpdate"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ numVertices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumVertices"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ simplexPointsP _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSimplexPointsP"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ simplexPointsQ _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSimplexPointsQ"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . btVoronoiSimplexSolver _ simplexVectorW _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSimplexVectorW"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . btVoronoiSimplexSolver _ updateClosestVectorAndPoints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateClosestVectorAndPoints"], "fileName": "com.badlogic.gdx.physics.bullet.collision.btVoronoiSimplexSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.copy_elements_func"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ bitset _ clear ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( bit _ index )  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ bitset _ clear _ all ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear_all"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ bitset _ get ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( bit _ index )  )  ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ bitset _ container _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ gim _ arrayT _ GUINT _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContainer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ bitset _ resize ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( newsize )  )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ bitset _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( bit _ index )  )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ bitset _ container _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ gim _ arrayT _ GUINT _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setContainer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ bitset _ set _ all ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["set_all"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ GUINT ( CollisionJNI . gim _ bitset _ size ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_bitset"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ merge _ contacts _  _ SWIG _  1  ( swigCPtr ,    this ,    gim _ contact _ array . getCPtr ( contacts )  ,    contacts )  ;", "}", "METHOD_END"], "methodName": ["merge_contacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ merge _ contacts _  _ SWIG _  0  ( swigCPtr ,    this ,    gim _ contact _ array . getCPtr ( contacts )  ,    contacts ,    normal _ contact _ average )  ;", "}", "METHOD_END"], "methodName": ["merge_contacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ merge _ contacts _ unique ( swigCPtr ,    this ,    gim _ contact _ array . getCPtr ( contacts )  ,    contacts )  ;", "}", "METHOD_END"], "methodName": ["merge_contacts_unique"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ push _ contact ( swigCPtr ,    this ,    point ,    normal ,    SWIGTYPE _ p _ GREAL . getCPtr ( depth )  ,    SWIGTYPE _ p _ GUINT . getCPtr ( feature 1  )  ,    SWIGTYPE _ p _ GUINT . getCPtr ( feature 2  )  )  ;", "}", "METHOD_END"], "methodName": ["push_contact"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ push _ triangle _ contacts ( swigCPtr ,    this ,    GIM _ TRIANGLE _ CONTACT _ DATA . getCPtr ( tricontact )  ,    tricontact ,    SWIGTYPE _ p _ GUINT . getCPtr ( feature 1  )  ,    SWIGTYPE _ p _ GUINT . getCPtr ( feature 2  )  )  ;", "}", "METHOD_END"], "methodName": ["push_triangle_contacts"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ at ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( i )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ at _ const ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( i )  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at_const"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ back ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ back _ const ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["back_const"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ clear _ memory ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear_memory"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ clear _ range ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( start _ range )  )  ;", "}", "METHOD_END"], "methodName": ["clear_range"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ destroyData ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["destroyData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ erase ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( index )  )  ;", "}", "METHOD_END"], "methodName": ["erase"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ erase _ sorted ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( index )  )  ;", "}", "METHOD_END"], "methodName": ["erase_sorted"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ erase _ sorted _ mem ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( index )  )  ;", "}", "METHOD_END"], "methodName": ["erase_sorted_mem"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ front ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["front"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ front _ const ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["front_const"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ GUINT ( CollisionJNI . gim _ contact _ array _ internal _ allocated _ size _ get ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getAllocated_size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ contact _ array _ internal _ data _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ CONTACT ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ GUINT ( CollisionJNI . gim _ contact _ array _ internal _ size _ get ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ contact _ array _ internal _ get _ pointer _ at ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( i )  )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ CONTACT ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_pointer_at"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ contact _ array _ internal _ get _ pointer _ at _ const ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( i )  )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ CONTACT ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get_pointer_at_const"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ contact _ array _ internal _ growingCheck ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["growingCheck"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ insert ( swigCPtr ,    this ,    GIM _ CONTACT . getCPtr ( obj )  ,    obj ,    SWIGTYPE _ p _ GUINT . getCPtr ( index )  )  ;", "}", "METHOD_END"], "methodName": ["insert"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ insert _ mem ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( index )  )  ;", "}", "METHOD_END"], "methodName": ["insert_mem"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ GUINT ( CollisionJNI . gim _ contact _ array _ internal _ max _ size ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["max_size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ operatorSubscript ( swigCPtr ,    this ,    i )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   GIM _ CONTACT ( CollisionJNI . gim _ contact _ array _ internal _ operatorSubscriptConst ( swigCPtr ,    this ,    i )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ contact _ array _ internal _ pointer ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ CONTACT ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["pointer"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    CollisionJNI . gim _ contact _ array _ internal _ pointer _ const ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   GIM _ CONTACT ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["pointer_const"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ pop _ back _ mem ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back_mem"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ push _ back ( swigCPtr ,    this ,    GIM _ CONTACT . getCPtr ( obj )  ,    obj )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ push _ back _ mem ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["push_back_mem"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ push _ back _ memcpy ( swigCPtr ,    this ,    GIM _ CONTACT . getCPtr ( obj )  ,    obj )  ;", "}", "METHOD_END"], "methodName": ["push_back_memcpy"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ refit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["refit"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ contact _ array _ internal _ reserve ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( size )  )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ resize _  _ SWIG _  2  ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( size )  )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( size )  ,    call _ constructor )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( size )  ,    call _ constructor ,    GIM _ CONTACT . getCPtr ( fillData )  ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   CollisionJNI . gim _ contact _ array _ internal _ resizeData ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( newsize )  )  ;", "}", "METHOD_END"], "methodName": ["resizeData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ allocated _ size _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setAllocated_size"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ data _ set ( swigCPtr ,    this ,    GIM _ CONTACT . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setData"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ size _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setSize"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ GUINT ( CollisionJNI . gim _ contact _ array _ internal _ sizeVal ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["sizeVal"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "CollisionJNI . gim _ contact _ array _ internal _ swap ( swigCPtr ,    this ,    SWIGTYPE _ p _ GUINT . getCPtr ( i )  ,    SWIGTYPE _ p _ GUINT . getCPtr ( j )  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.collision.gim_contact_array_internal"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.integer_comparator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.less_comparator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.memcopy_elements_func"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.collision.uint_key_func"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . CustomActionInterface _ debugDraw ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["debugDraw"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.CustomActionInterface"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.CustomActionInterface"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.CustomActionInterface"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "DynamicsJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.CustomActionInterface"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "DynamicsJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.CustomActionInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . CustomActionInterface _ updateAction ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateAction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.CustomActionInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . InternalTickCallback _ CB ( btDynamicsWorld . getCPtr ( world )  ,    world ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["InternalTickCallback_CB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAdjustAngleToLimits ( angleInRadians ,    angleLowerLimitInRadians ,    angleUpperLimitInRadians )  ;", "}", "METHOD_END"], "methodName": ["btAdjustAngleToLimits"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "assert   A . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   x . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   b . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   w . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   lo . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   hi . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   findex . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   JNI . btSolveDantzigLCP ( n ,    A ,    x ,    b ,    w ,    nub ,    lo ,    hi ,    findex ,    btDantzigScratchMemory . getCPtr ( scratch )  ,    scratch )  ;", "}", "}", "METHOD_END"], "methodName": ["btSolveDantzigLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . gDeactivationTime _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . gDisableDeactivation _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getGDisableDeactivation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . resolveSingleBilateral ( btRigidBody . getCPtr ( body 1  )  ,    body 1  ,    pos 1  ,    btRigidBody . getCPtr ( body 2  )  ,    body 2  ,    pos 2  ,    distance ,    normal ,    SWIGTYPE _ p _ float . getCPtr ( impulse )  ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["resolveSingleBilateral"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . resolveSingleCollision ( btRigidBody . getCPtr ( body 1  )  ,    body 1  ,    btCollisionObject . getCPtr ( colObj 2  )  ,    colObj 2  ,    contactPositionWorld ,    contactNormalOnB ,    btContactSolverInfo . getCPtr ( solverInfo )  ,    solverInfo ,    distance )  ;", "}", "METHOD_END"], "methodName": ["resolveSingleCollision"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . gDeactivationTime _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGDeactivationTime"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . gDisableDeactivation _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setGDisableDeactivation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.Dynamics"}, {"methodBody": ["METHOD_START", "{", "jself . debugDraw (  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_CustomActionInterface_debugDraw"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.DynamicsJNI"}, {"methodBody": ["METHOD_START", "{", "jself . updateAction ( timeStep )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_CustomActionInterface_updateAction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.DynamicsJNI"}, {"methodBody": ["METHOD_START", "{", "jself . onInternalTick (  ( dynamicsWorld    =  =     0     ?    null    :    new   btDynamicsWorld ( dynamicsWorld ,    false )  )  ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_InternalTickCallback_onInternalTick"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.DynamicsJNI"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.FilterableVehicleRaycaster"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . FilterableVehicleRaycaster _ setCollisionFilterGroup ( swigCPtr ,    this ,    collisionFilterGroup )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterGroup"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.FilterableVehicleRaycaster"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . FilterableVehicleRaycaster _ setCollisionFilterMask ( swigCPtr ,    this ,    collisionFilterMask )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFilterMask"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.FilterableVehicleRaycaster"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . InternalTickCallback _ attach _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["attach"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . InternalTickCallback _ attach _  _ SWIG _  0  ( swigCPtr ,    this ,    btDynamicsWorld . getCPtr ( dynamicsWorld )  ,    dynamicsWorld ,    isPreTick )  ;", "}", "METHOD_END"], "methodName": ["attach"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . InternalTickCallback _ detach _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["detach"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . InternalTickCallback _ detach _  _ SWIG _  1  ( btDynamicsWorld . getCPtr ( dynamicsWorld )  ,    dynamicsWorld ,    isPreTick )  ;", "}", "METHOD_END"], "methodName": ["detach"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "DynamicsJNI _ onInternalTick ( swigCPtr ,    this ,    btDynamicsWorld . getCPtr ( dynamicsWorld )  ,    dynamicsWorld ,    timeStep )  ;", "else", "DynamicsJNI _ onInternalTickSwigExplici ( swigCPtr ,    this ,    btDynamicsWorld . getCPtr ( dynamicsWorld )  ,    dynamicsWorld ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["onInternalTick"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "DynamicsJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "DynamicsJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.InternalTickCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_bool_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btMatrix3x3_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btMultiBodySolverConstraint_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btQuaternion_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btSimulationIslandManagerMt__Island_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btSolverBody_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btSolverConstraint_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraint_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_btWheelInfo_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_float_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btAlignedObjectArrayT_int_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btMatrixXT_float_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_btVectorXT_float_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_f_p_btAlignedObjectArray__p_btSimulationIslandManagerMt__Island___p_btSimulationIslandManagerMt__IslandCallback__void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_f_p_btDynamicsWorld_float__void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_f_r_btSolverBody_r_btSolverBody_r_q_const__btSolverConstraint__btSimdScalar"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_float"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_p_btCollisionObject"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_p_btConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_p_btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_p_btPersistentManifold"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.SWIGTYPE_p_p_btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btActionInterface _ debugDraw ( swigCPtr ,    this ,    btIDebugDraw . getCPtr ( debugDrawer )  ,    debugDrawer )  ;", "}", "METHOD_END"], "methodName": ["debugDraw"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btActionInterface"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btActionInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btActionInterface _ updateAction ( swigCPtr ,    this ,    btCollisionWorld . getCPtr ( collisionWorld )  ,    collisionWorld ,    deltaTimeStep )  ;", "}", "METHOD_END"], "methodName": ["updateAction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btActionInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btAngularLimit _ fit ( swigCPtr ,    this ,    SWIGTYPE _ p _ float . getCPtr ( angle )  )  ;", "}", "METHOD_END"], "methodName": ["fit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getBiasFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getCorrection ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCorrection"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getError ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getHalfRange ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHalfRange"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getHigh ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHigh"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getLow ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLow"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getRelaxationFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getSign ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSign"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ getSoftness ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btAngularLimit _ isLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btAngularLimit _ set _  _ SWIG _  3  ( swigCPtr ,    this ,    low ,    high )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btAngularLimit _ set _  _ SWIG _  2  ( swigCPtr ,    this ,    low ,    high ,     _ softness )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btAngularLimit _ set _  _ SWIG _  1  ( swigCPtr ,    this ,    low ,    high ,     _ softness ,     _ biasFactor )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btAngularLimit _ set _  _ SWIG _  0  ( swigCPtr ,    this ,    low ,    high ,     _ softness ,     _ biasFactor ,     _ relaxationFactor )  ;", "}", "METHOD_END"], "methodName": ["set"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btAngularLimit _ test ( swigCPtr ,    this ,    angle )  ;", "}", "METHOD_END"], "methodName": ["test"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btAngularLimit"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btCharacterControllerInterface _ canJump ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["canJump"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ jump _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["jump"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ jump _  _ SWIG _  0  ( swigCPtr ,    this ,    dir )  ;", "}", "METHOD_END"], "methodName": ["jump"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btCharacterControllerInterface _ onGround ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["onGround"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ playerStep ( swigCPtr ,    this ,    btCollisionWorld . getCPtr ( collisionWorld )  ,    collisionWorld ,    dt )  ;", "}", "METHOD_END"], "methodName": ["playerStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ preStep ( swigCPtr ,    this ,    btCollisionWorld . getCPtr ( collisionWorld )  ,    collisionWorld )  ;", "}", "METHOD_END"], "methodName": ["preStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ reset ( swigCPtr ,    this ,    btCollisionWorld . getCPtr ( collisionWorld )  ,    collisionWorld )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ setUpInterpolate ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpInterpolate"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ setVelocityForTimeInterval ( swigCPtr ,    this ,    velocity ,    timeInterval )  ;", "}", "METHOD_END"], "methodName": ["setVelocityForTimeInterval"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ setWalkDirection ( swigCPtr ,    this ,    walkDirection )  ;", "}", "METHOD_END"], "methodName": ["setWalkDirection"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btCharacterControllerInterface _ warp ( swigCPtr ,    this ,    origin )  ;", "}", "METHOD_END"], "methodName": ["warp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btCharacterControllerInterface"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ GetPointForAngle ( swigCPtr ,    this ,    fAngleInRadians ,    fLength )  ;", "}", "METHOD_END"], "methodName": ["GetPointForAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ calcAngleInfo ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calcAngleInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ calcAngleInfo 2  ( swigCPtr ,    this ,    transA ,    transB ,    invInertiaWorldA ,    invInertiaWorldB )  ;", "}", "METHOD_END"], "methodName": ["calcAngleInfo2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ enableMotor ( swigCPtr ,    this ,    b )  ;", "}", "METHOD_END"], "methodName": ["enableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getAFrame ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getAngularOnly ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getBFrame ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getBiasFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getFixThresh ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFixThresh"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getFrameOffsetA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getFrameOffsetB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ getInfo 1 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 1  . getCPtr ( info )  ,    info )  ;", "}", "METHOD_END"], "methodName": ["getInfo1NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ getInfo 2 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    transA ,    transB ,    invInertiaWorldA ,    invInertiaWorldB )  ;", "}", "METHOD_END"], "methodName": ["getInfo2NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getLimit ( swigCPtr ,    this ,    limitIndex )  ;", "}", "METHOD_END"], "methodName": ["getLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getLimitSoftness ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getMaxMotorImpulse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getMotorTarget ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMotorTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getRelaxationFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btConeTwistConstraint _ getRigidBodyAConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btConeTwistConstraint _ getRigidBodyBConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getSolveSwingLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolveSwingLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getSolveTwistLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolveTwistLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getSwingSpan 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSwingSpan1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getSwingSpan 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSwingSpan2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getTwistAngle ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTwistAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getTwistLimitSign ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTwistLimitSign"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ getTwistSpan ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTwistSpan"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ isMaxMotorImpulseNormalized ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isMaxMotorImpulseNormalized"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ isMotorEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isMotorEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ isPastSwingLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isPastSwingLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setAngularOnly ( swigCPtr ,    this ,    angularOnly )  ;", "}", "METHOD_END"], "methodName": ["setAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setDamping ( swigCPtr ,    this ,    damping )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setFixThresh ( swigCPtr ,    this ,    fixThresh )  ;", "}", "METHOD_END"], "methodName": ["setFixThresh"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setFrames ( swigCPtr ,    this ,    frameA ,    frameB )  ;", "}", "METHOD_END"], "methodName": ["setFrames"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setLimit _  _ SWIG _  4  ( swigCPtr ,    this ,     _ swingSpan 1  ,     _ swingSpan 2  ,     _ twistSpan )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setLimit _  _ SWIG _  3  ( swigCPtr ,    this ,     _ swingSpan 1  ,     _ swingSpan 2  ,     _ twistSpan ,     _ softness )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setLimit _  _ SWIG _  2  ( swigCPtr ,    this ,     _ swingSpan 1  ,     _ swingSpan 2  ,     _ twistSpan ,     _ softness ,     _ biasFactor )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setLimit _  _ SWIG _  1  ( swigCPtr ,    this ,     _ swingSpan 1  ,     _ swingSpan 2  ,     _ twistSpan ,     _ softness ,     _ biasFactor ,     _ relaxationFactor )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setLimit _  _ SWIG _  0  ( swigCPtr ,    this ,    limitIndex ,    limitValue )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setMaxMotorImpulse ( swigCPtr ,    this ,    maxMotorImpulse )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setMaxMotorImpulseNormalized ( swigCPtr ,    this ,    maxMotorImpulse )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorImpulseNormalized"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setMotorTarget ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["setMotorTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setMotorTargetInConstraintSpace ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["setMotorTargetInConstraintSpace"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraint _ updateRHS ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateRHS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ biasFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ limitSoftness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btConeTwistConstraintData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btConeTwistConstraintData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ relaxationFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ swingSpan 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSwingSpan1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ swingSpan 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSwingSpan2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintData _ twistSpan _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTwistSpan"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btConeTwistConstraintData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ biasFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ limitSoftness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ relaxationFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ swingSpan 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSwingSpan1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ swingSpan 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSwingSpan2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ twistSpan _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTwistSpan"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintDoubleData _ biasFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintDoubleData _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintDoubleData _ limitSoftness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btConeTwistConstraintDoubleData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btConeTwistConstraintDoubleData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintDoubleData _ relaxationFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintDoubleData _ swingSpan 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSwingSpan1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintDoubleData _ swingSpan 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSwingSpan2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConeTwistConstraintDoubleData _ twistSpan _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTwistSpan"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btConeTwistConstraintDoubleData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ biasFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ limitSoftness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ relaxationFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ swingSpan 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSwingSpan1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ swingSpan 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSwingSpan2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ twistSpan _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTwistSpan"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConeTwistConstraintDoubleData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConeTwistConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSetting"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConstraintSetting _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSetting"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConstraintSetting _ impulseClamp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getImpulseClamp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSetting"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConstraintSetting _ tau _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSetting"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConstraintSetting _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSetting"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConstraintSetting _ impulseClamp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setImpulseClamp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSetting"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConstraintSetting _ tau _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSetting"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConstraintSolver _ allSolved ( swigCPtr ,    this ,    btContactSolverInfo . getCPtr ( arg 0  )  ,    arg 0  ,    btIDebugDraw . getCPtr ( arg 1  )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["allSolved"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConstraintSolver _ getSolverType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConstraintSolver _ prepareSolve ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["prepareSolve"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btConstraintSolver _ reset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btConstraintSolver _ solveGroup ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ btCollisionObject . getCPtr ( bodies )  ,    numBodies ,    SWIGTYPE _ p _ p _ btPersistentManifold . getCPtr ( manifold )  ,    numManifolds ,    SWIGTYPE _ p _ p _ btTypedConstraint . getCPtr ( constraints )  ,    numConstraints ,    btContactSolverInfo . getCPtr ( info )  ,    info ,    btIDebugDraw . getCPtr ( debugDrawer )  ,    debugDrawer ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["solveGroup"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btConstraintSolverPoolMt"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btContactConstraint _ getContactManifold ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactManifold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btContactConstraint _ getContactManifoldConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPersistentManifold ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactManifoldConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactConstraint _ setContactManifold ( swigCPtr ,    this ,    btPersistentManifold . getCPtr ( contactManifold )  ,    contactManifold )  ;", "}", "METHOD_END"], "methodName": ["setContactManifold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ erp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ erp 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ frictionCFM _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ frictionERP _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ globalCfm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGlobalCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ leastSquaresResidualThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLeastSquaresResidualThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ linearSlop _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSlop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ maxErrorReduction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxErrorReduction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ maxGyroscopicForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxGyroscopicForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ minimumSolverBatchSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ numIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ restingContactRestitutionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestingContactRestitutionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ restitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ restitutionVelocityThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitutionVelocityThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ singleAxisRollingFrictionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSingleAxisRollingFrictionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ solverMode _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverMode"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ sor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ splitImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ splitImpulsePenetrationThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulsePenetrationThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ splitImpulseTurnErp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulseTurnErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ tau _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ timeStep _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoData _ warmstartingFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWarmstartingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ erp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ erp 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setErp2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ frictionCFM _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ frictionERP _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ globalCfm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGlobalCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ leastSquaresResidualThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLeastSquaresResidualThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ linearSlop _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSlop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ maxErrorReduction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxErrorReduction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ maxGyroscopicForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxGyroscopicForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ minimumSolverBatchSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ numIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ restingContactRestitutionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestingContactRestitutionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ restitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ restitutionVelocityThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitutionVelocityThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ singleAxisRollingFrictionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSingleAxisRollingFrictionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ solverMode _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverMode"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ sor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ splitImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ splitImpulsePenetrationThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulsePenetrationThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ splitImpulseTurnErp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulseTurnErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ tau _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ timeStep _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoData _ warmstartingFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWarmstartingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ erp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ erp 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ globalCfm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGlobalCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ linearSlop _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSlop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ maxErrorReduction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxErrorReduction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ maxGyroscopicForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxGyroscopicForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ minimumSolverBatchSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ numIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ restingContactRestitutionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestingContactRestitutionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ restitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ singleAxisRollingFrictionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSingleAxisRollingFrictionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ solverMode _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverMode"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ sor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ splitImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ splitImpulsePenetrationThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulsePenetrationThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ splitImpulseTurnErp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulseTurnErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ tau _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ timeStep _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoDoubleData _ warmstartingFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWarmstartingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ erp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ erp 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setErp2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ globalCfm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGlobalCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ linearSlop _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSlop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ maxErrorReduction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxErrorReduction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ maxGyroscopicForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxGyroscopicForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ minimumSolverBatchSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ numIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ restingContactRestitutionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestingContactRestitutionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ restitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ singleAxisRollingFrictionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSingleAxisRollingFrictionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ solverMode _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverMode"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ sor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ splitImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ splitImpulsePenetrationThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulsePenetrationThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ splitImpulseTurnErp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulseTurnErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ tau _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ timeStep _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoDoubleData _ warmstartingFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWarmstartingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ erp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ erp 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ globalCfm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGlobalCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ linearSlop _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSlop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ maxErrorReduction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxErrorReduction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ maxGyroscopicForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxGyroscopicForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ minimumSolverBatchSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ numIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ restingContactRestitutionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestingContactRestitutionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ restitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ singleAxisRollingFrictionThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSingleAxisRollingFrictionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ solverMode _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverMode"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ sor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ splitImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ splitImpulsePenetrationThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulsePenetrationThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ splitImpulseTurnErp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplitImpulseTurnErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ tau _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ timeStep _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btContactSolverInfoFloatData _ warmstartingFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWarmstartingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ erp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ erp 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setErp2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ globalCfm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGlobalCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ linearSlop _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSlop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ maxErrorReduction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxErrorReduction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ maxGyroscopicForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxGyroscopicForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ minimumSolverBatchSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ numIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ restingContactRestitutionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestingContactRestitutionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ restitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ singleAxisRollingFrictionThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSingleAxisRollingFrictionThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ solverMode _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverMode"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ sor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ splitImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ splitImpulsePenetrationThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulsePenetrationThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ splitImpulseTurnErp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplitImpulseTurnErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ tau _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTau"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ timeStep _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTimeStep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btContactSolverInfoFloatData _ warmstartingFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWarmstartingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btContactSolverInfoFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ Arows _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ float _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getArows"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ C _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getC"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ d _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getD"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ Dell _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDell"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ delta _ w _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDelta_w"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ delta _ x _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDelta_x"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ ell _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getEll"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ L _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getL"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ p _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ scratch _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScratch"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDantzigScratchMemory _ state _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ bool _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ Arows _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ float _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setArows"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ C _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setC"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ d _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setD"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ Dell _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDell"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ delta _ w _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDelta_w"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ delta _ x _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDelta_x"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ ell _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEll"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ L _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setL"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ p _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ scratch _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setScratch"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDantzigScratchMemory _ state _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ bool _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigScratchMemory"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDantzigSolver _ solveMLCP _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDantzigSolver _ solveMLCP _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations ,    useSparsity )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDantzigSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDefaultVehicleRaycaster"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ addCollisionObject _  _ SWIG _  2  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject )  ;", "}", "METHOD_END"], "methodName": ["addCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ addCollisionObject _  _ SWIG _  1  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    collisionFilterGroup )  ;", "}", "METHOD_END"], "methodName": ["addCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ addCollisionObject _  _ SWIG _  0  ( swigCPtr ,    this ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    collisionFilterGroup ,    collisionFilterMask )  ;", "}", "METHOD_END"], "methodName": ["addCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ addConstraint _  _ SWIG _  1  ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( constraint )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["addConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ addConstraint _  _ SWIG _  0  ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( constraint )  ,    constraint ,    disableCollisionsBetweenLinkedBodies )  ;", "}", "METHOD_END"], "methodName": ["addConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ addRigidBody _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["addRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ addRigidBody _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body ,    group ,    mask )  ;", "}", "METHOD_END"], "methodName": ["addRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ applyGravity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["applyGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ debugDrawConstraint ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( constraint )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["debugDrawConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ getApplySpeculativeContactRestitution ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getApplySpeculativeContactRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDiscreteDynamicsWorld _ getCollisionWorld ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionWorld ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ getLatencyMotionStateInterpolation ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLatencyMotionStateInterpolation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDiscreteDynamicsWorld _ getSimulationIslandManager ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSimulationIslandManager ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSimulationIslandManager"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDiscreteDynamicsWorld _ getSimulationIslandManagerConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSimulationIslandManager ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSimulationIslandManagerConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ getSynchronizeAllMotionStates ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSynchronizeAllMotionStates"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ setApplySpeculativeContactRestitution ( swigCPtr ,    this ,    enable )  ;", "}", "METHOD_END"], "methodName": ["setApplySpeculativeContactRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ setLatencyMotionStateInterpolation ( swigCPtr ,    this ,    latencyInterpolation )  ;", "}", "METHOD_END"], "methodName": ["setLatencyMotionStateInterpolation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ setNumTasks ( swigCPtr ,    this ,    numTasks )  ;", "}", "METHOD_END"], "methodName": ["setNumTasks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ setSynchronizeAllMotionStates ( swigCPtr ,    this ,    synchronizeAll )  ;", "}", "METHOD_END"], "methodName": ["setSynchronizeAllMotionStates"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ stepSimulation _  _ SWIG _  2  ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ stepSimulation _  _ SWIG _  1  ( swigCPtr ,    this ,    timeStep ,    maxSubSteps )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorld _ stepSimulation _  _ SWIG _  0  ( swigCPtr ,    this ,    timeStep ,    maxSubSteps ,    fixedTimeStep )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ synchronizeSingleMotionState ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["synchronizeSingleMotionState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorld _ updateVehicles ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateVehicles"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDiscreteDynamicsWorldMt _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDiscreteDynamicsWorldMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ addAction ( swigCPtr ,    this ,    btActionInterface . getCPtr ( action )  ,    action )  ;", "}", "METHOD_END"], "methodName": ["addAction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ addCharacter ( swigCPtr ,    this ,    btActionInterface . getCPtr ( character )  ,    character )  ;", "}", "METHOD_END"], "methodName": ["addCharacter"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ addConstraint _  _ SWIG _  1  ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( constraint )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["addConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ addConstraint _  _ SWIG _  0  ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( constraint )  ,    constraint ,    disableCollisionsBetweenLinkedBodies )  ;", "}", "METHOD_END"], "methodName": ["addConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ addRigidBody _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["addRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ addRigidBody _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body ,    group ,    mask )  ;", "}", "METHOD_END"], "methodName": ["addRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ addVehicle ( swigCPtr ,    this ,    btActionInterface . getCPtr ( vehicle )  ,    vehicle )  ;", "}", "METHOD_END"], "methodName": ["addVehicle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ clearForces ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearForces"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDynamicsWorld _ getConstraint ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDynamicsWorld _ getConstraintConst ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDynamicsWorld _ getConstraintSolver ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConstraintSolver ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintSolver"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDynamicsWorld _ getGravity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDynamicsWorld _ getNumConstraints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btContactSolverInfo ( DynamicsJNI . btDynamicsWorld _ getSolverInfo ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSolverInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btContactSolverInfo ( DynamicsJNI . btDynamicsWorld _ getSolverInfoConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSolverInfoConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDynamicsWorld _ getWorldType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWorldType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDynamicsWorld _ getWorldUserInfo ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWorldUserInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ removeAction ( swigCPtr ,    this ,    btActionInterface . getCPtr ( action )  ,    action )  ;", "}", "METHOD_END"], "methodName": ["removeAction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ removeCharacter ( swigCPtr ,    this ,    btActionInterface . getCPtr ( character )  ,    character )  ;", "}", "METHOD_END"], "methodName": ["removeCharacter"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ removeConstraint ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( constraint )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["removeConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ removeRigidBody ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["removeRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ removeVehicle ( swigCPtr ,    this ,    btActionInterface . getCPtr ( vehicle )  ,    vehicle )  ;", "}", "METHOD_END"], "methodName": ["removeVehicle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ setConstraintSolver ( swigCPtr ,    this ,    btConstraintSolver . getCPtr ( solver )  ,    solver )  ;", "}", "METHOD_END"], "methodName": ["setConstraintSolver"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ setGravity ( swigCPtr ,    this ,    gravity )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ setInternalTickCallback _  _ SWIG _  2  ( swigCPtr ,    this ,    SWIGTYPE _ p _ f _ p _ btDynamicsWorld _ float _  _ void . getCPtr ( cb )  )  ;", "}", "METHOD_END"], "methodName": ["setInternalTickCallback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ setInternalTickCallback _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ f _ p _ btDynamicsWorld _ float _  _ void . getCPtr ( cb )  ,    worldUserInfo )  ;", "}", "METHOD_END"], "methodName": ["setInternalTickCallback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ setInternalTickCallback _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ f _ p _ btDynamicsWorld _ float _  _ void . getCPtr ( cb )  ,    worldUserInfo ,    isPreTick )  ;", "}", "METHOD_END"], "methodName": ["setInternalTickCallback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ setWorldUserInfo ( swigCPtr ,    this ,    worldUserInfo )  ;", "}", "METHOD_END"], "methodName": ["setWorldUserInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDynamicsWorld _ stepSimulation _  _ SWIG _  2  ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDynamicsWorld _ stepSimulation _  _ SWIG _  1  ( swigCPtr ,    this ,    timeStep ,    maxSubSteps )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btDynamicsWorld _ stepSimulation _  _ SWIG _  0  ( swigCPtr ,    this ,    timeStep ,    maxSubSteps ,    fixedTimeStep )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorld _ synchronizeMotionStates ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["synchronizeMotionStates"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDynamicsWorldDoubleData _ gravity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDynamicsWorldDoubleData _ solverInfo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btContactSolverInfoDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSolverInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorldDoubleData _ gravity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorldDoubleData _ solverInfo _ set ( swigCPtr ,    this ,    btContactSolverInfoDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDynamicsWorldFloatData _ gravity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btDynamicsWorldFloatData _ solverInfo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btContactSolverInfoFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSolverInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorldFloatData _ gravity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btDynamicsWorldFloatData _ solverInfo _ set ( swigCPtr ,    this ,    btContactSolverInfoFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btDynamicsWorldFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraint _ getAxisA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAxisA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraint _ getAxisB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAxisB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraint _ getRatio ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRatio"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraint _ setAxisA ( swigCPtr ,    this ,    axisA )  ;", "}", "METHOD_END"], "methodName": ["setAxisA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraint _ setAxisB ( swigCPtr ,    this ,    axisB )  ;", "}", "METHOD_END"], "methodName": ["setAxisB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraint _ setRatio ( swigCPtr ,    this ,    ratio )  ;", "}", "METHOD_END"], "methodName": ["setRatio"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGearConstraintDoubleData _ axisInA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAxisInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGearConstraintDoubleData _ axisInB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAxisInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraintDoubleData _ ratio _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRatio"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGearConstraintDoubleData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintDoubleData _ axisInA _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAxisInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintDoubleData _ axisInB _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAxisInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintDoubleData _ ratio _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRatio"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintDoubleData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGearConstraintFloatData _ axisInA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAxisInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGearConstraintFloatData _ axisInB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAxisInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraintFloatData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGearConstraintFloatData _ ratio _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRatio"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGearConstraintFloatData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintFloatData _ axisInA _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAxisInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintFloatData _ axisInB _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAxisInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintFloatData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintFloatData _ ratio _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRatio"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGearConstraintFloatData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGearConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ calcAnchorPos ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calcAnchorPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ calculateTransforms _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateTransforms"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ calculateTransforms _  _ SWIG _  0  ( swigCPtr ,    this ,    transA ,    transB )  ;", "}", "METHOD_END"], "methodName": ["calculateTransforms"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getAngle ( swigCPtr ,    this ,    axis _ index )  ;", "}", "METHOD_END"], "methodName": ["getAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ getAngularLowerLimit ( swigCPtr ,    this ,    angularLower )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ getAngularUpperLimit ( swigCPtr ,    this ,    angularUpper )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getAxis ( swigCPtr ,    this ,    axis _ index )  ;", "}", "METHOD_END"], "methodName": ["getAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getCalculatedTransformA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCalculatedTransformA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getCalculatedTransformB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCalculatedTransformB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getFrameOffsetA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getFrameOffsetAConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getFrameOffsetB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getFrameOffsetBConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ getInfo 1 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 1  . getCPtr ( info )  ,    info )  ;", "}", "METHOD_END"], "methodName": ["getInfo1NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ getInfo 2 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    transA ,    transB ,    linVelA ,    linVelB ,    angVelA ,    angVelB )  ;", "}", "METHOD_END"], "methodName": ["getInfo2NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ getLinearLowerLimit ( swigCPtr ,    this ,    linearLower )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ getLinearUpperLimit ( swigCPtr ,    this ,    linearUpper )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getRelativePivotPosition ( swigCPtr ,    this ,    axis _ index )  ;", "}", "METHOD_END"], "methodName": ["getRelativePivotPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraint _ getRotationalLimitMotor ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRotationalLimitMotor ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRotationalLimitMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraint _ getTranslationalLimitMotor ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTranslationalLimitMotor ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTranslationalLimitMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getUseFrameOffset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseFrameOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ getUseLinearReferenceFrameA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ useSolveConstraintObsolete _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseSolveConstraintObsolete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ get _ limit _ motor _ info 2  _  _ SWIG _  1  ( swigCPtr ,    this ,    btRotationalLimitMotor . getCPtr ( limot )  ,    limot ,    transA ,    transB ,    linVelA ,    linVelB ,    angVelA ,    angVelB ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    row ,    ax 1  ,    rotational )  ;", "}", "METHOD_END"], "methodName": ["get_limit_motor_info2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ get _ limit _ motor _ info 2  _  _ SWIG _  0  ( swigCPtr ,    this ,    btRotationalLimitMotor . getCPtr ( limot )  ,    limot ,    transA ,    transB ,    linVelA ,    linVelB ,    angVelA ,    angVelB ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    row ,    ax 1  ,    rotational ,    rotAllowed )  ;", "}", "METHOD_END"], "methodName": ["get_limit_motor_info2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ isLimited ( swigCPtr ,    this ,    limitIndex )  ;", "}", "METHOD_END"], "methodName": ["isLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setAngularLowerLimit ( swigCPtr ,    this ,    angularLower )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setAngularUpperLimit ( swigCPtr ,    this ,    angularUpper )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setAxis ( swigCPtr ,    this ,    axis 1  ,    axis 2  )  ;", "}", "METHOD_END"], "methodName": ["setAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setFrames ( swigCPtr ,    this ,    frameA ,    frameB )  ;", "}", "METHOD_END"], "methodName": ["setFrames"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setLimit ( swigCPtr ,    this ,    axis ,    lo ,    hi )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setLinearLowerLimit ( swigCPtr ,    this ,    linearLower )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setLinearUpperLimit ( swigCPtr ,    this ,    linearUpper )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setUseFrameOffset ( swigCPtr ,    this ,    frameOffsetOnOff )  ;", "}", "METHOD_END"], "methodName": ["setUseFrameOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ setUseLinearReferenceFrameA ( swigCPtr ,    this ,    linearReferenceFrameA )  ;", "}", "METHOD_END"], "methodName": ["setUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ useSolveConstraintObsolete _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseSolveConstraintObsolete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraint _ testAngularLimitMotor ( swigCPtr ,    this ,    axis _ index )  ;", "}", "METHOD_END"], "methodName": ["testAngularLimitMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraint _ updateRHS ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateRHS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintData _ angularLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintData _ angularUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintData _ linearLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintData _ linearUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraintData _ useLinearReferenceFrameA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraintData _ useOffsetForConstraintFrame _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ angularLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ angularUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ linearLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ linearUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ useLinearReferenceFrameA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintData _ useOffsetForConstraintFrame _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ angularLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ angularUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ linearLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ linearUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ useLinearReferenceFrameA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ useOffsetForConstraintFrame _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ angularLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ angularUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ linearLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ linearUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ useLinearReferenceFrameA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofConstraintDoubleData 2  _ useOffsetForConstraintFrame _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ btGetMatrixElem ( mat ,    index )  ;", "}", "METHOD_END"], "methodName": ["btGetMatrixElem"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ calculateTransforms _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateTransforms"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ calculateTransforms _  _ SWIG _  0  ( swigCPtr ,    this ,    transA ,    transB )  ;", "}", "METHOD_END"], "methodName": ["calculateTransforms"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ enableMotor ( swigCPtr ,    this ,    index ,    onOff )  ;", "}", "METHOD_END"], "methodName": ["enableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ enableSpring ( swigCPtr ,    this ,    index ,    onOff )  ;", "}", "METHOD_END"], "methodName": ["enableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getAngle ( swigCPtr ,    this ,    axis _ index )  ;", "}", "METHOD_END"], "methodName": ["getAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getAngularLowerLimit ( swigCPtr ,    this ,    angularLower )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getAngularLowerLimitReversed ( swigCPtr ,    this ,    angularLower )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimitReversed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getAngularUpperLimit ( swigCPtr ,    this ,    angularUpper )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getAngularUpperLimitReversed ( swigCPtr ,    this ,    angularUpper )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimitReversed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getAxis ( swigCPtr ,    this ,    axis _ index )  ;", "}", "METHOD_END"], "methodName": ["getAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getCalculatedTransformA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCalculatedTransformA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getCalculatedTransformB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCalculatedTransformB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getFrameOffsetA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getFrameOffsetAConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getFrameOffsetB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getFrameOffsetBConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getLinearLowerLimit ( swigCPtr ,    this ,    linearLower )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getLinearUpperLimit ( swigCPtr ,    this ,    linearUpper )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getRelativePivotPosition ( swigCPtr ,    this ,    axis _ index )  ;", "}", "METHOD_END"], "methodName": ["getRelativePivotPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getRotationOrder ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRotationOrder"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getRotationalLimitMotor ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRotationalLimitMotor 2  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRotationalLimitMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ getTranslationalLimitMotor ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTranslationalLimitMotor 2  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTranslationalLimitMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ isLimited ( swigCPtr ,    this ,    limitIndex )  ;", "}", "METHOD_END"], "methodName": ["isLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ matrixToEulerXYZ ( mat ,    xyz )  ;", "}", "METHOD_END"], "methodName": ["matrixToEulerXYZ"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ matrixToEulerXZY ( mat ,    xyz )  ;", "}", "METHOD_END"], "methodName": ["matrixToEulerXZY"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ matrixToEulerYXZ ( mat ,    xyz )  ;", "}", "METHOD_END"], "methodName": ["matrixToEulerYXZ"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ matrixToEulerYZX ( mat ,    xyz )  ;", "}", "METHOD_END"], "methodName": ["matrixToEulerYZX"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ matrixToEulerZXY ( mat ,    xyz )  ;", "}", "METHOD_END"], "methodName": ["matrixToEulerZXY"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ matrixToEulerZYX ( mat ,    xyz )  ;", "}", "METHOD_END"], "methodName": ["matrixToEulerZYX"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setAngularLowerLimit ( swigCPtr ,    this ,    angularLower )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setAngularLowerLimitReversed ( swigCPtr ,    this ,    angularLower )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimitReversed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setAngularUpperLimit ( swigCPtr ,    this ,    angularUpper )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setAngularUpperLimitReversed ( swigCPtr ,    this ,    angularUpper )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimitReversed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setAxis ( swigCPtr ,    this ,    axis 1  ,    axis 2  )  ;", "}", "METHOD_END"], "methodName": ["setAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setBounce ( swigCPtr ,    this ,    index ,    bounce )  ;", "}", "METHOD_END"], "methodName": ["setBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setDamping _  _ SWIG _  1  ( swigCPtr ,    this ,    index ,    damping )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setDamping _  _ SWIG _  0  ( swigCPtr ,    this ,    index ,    damping ,    limitIfNeeded )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setEquilibriumPoint _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setEquilibriumPoint _  _ SWIG _  1  ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setEquilibriumPoint _  _ SWIG _  2  ( swigCPtr ,    this ,    index ,    val )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setFrames ( swigCPtr ,    this ,    frameA ,    frameB )  ;", "}", "METHOD_END"], "methodName": ["setFrames"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setLimit ( swigCPtr ,    this ,    axis ,    lo ,    hi )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setLimitReversed ( swigCPtr ,    this ,    axis ,    lo ,    hi )  ;", "}", "METHOD_END"], "methodName": ["setLimitReversed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setLinearLowerLimit ( swigCPtr ,    this ,    linearLower )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setLinearUpperLimit ( swigCPtr ,    this ,    linearUpper )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setMaxMotorForce ( swigCPtr ,    this ,    index ,    force )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setRotationOrder ( swigCPtr ,    this ,    order )  ;", "}", "METHOD_END"], "methodName": ["setRotationOrder"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setServo ( swigCPtr ,    this ,    index ,    onOff )  ;", "}", "METHOD_END"], "methodName": ["setServo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setServoTarget ( swigCPtr ,    this ,    index ,    target )  ;", "}", "METHOD_END"], "methodName": ["setServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setStiffness _  _ SWIG _  1  ( swigCPtr ,    this ,    index ,    stiffness )  ;", "}", "METHOD_END"], "methodName": ["setStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setStiffness _  _ SWIG _  0  ( swigCPtr ,    this ,    index ,    stiffness ,    limitIfNeeded )  ;", "}", "METHOD_END"], "methodName": ["setStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 Constraint _ setTargetVelocity ( swigCPtr ,    this ,    index ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["setTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2Constraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularBounce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularEnableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularEnableSpring _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularEquilibriumPoint _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularMaxMotorForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularMotorCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularMotorERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularServoMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularServoTarget _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringDamping _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringDampingLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringStiffness _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringStiffnessLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularStopCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularStopERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularTargetVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearBounce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearEnableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearEnableSpring _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearEquilibriumPoint _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearMaxMotorForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearMotorCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearMotorERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearServoMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearServoTarget _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringDamping _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringDampingLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringStiffness _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringStiffnessLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearStopCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearStopERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearTargetVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ padding 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ rotateOrder _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRotateOrder"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularBounce _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularEnableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularEnableSpring _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularEquilibriumPoint _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularMaxMotorForce _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularMotorCFM _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularMotorERP _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularServoMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularServoTarget _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringDamping _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringDampingLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringStiffness _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularSpringStiffnessLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularStopCFM _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularStopERP _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularTargetVelocity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ angularUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearBounce _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearEnableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearEnableSpring _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearEquilibriumPoint _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearMaxMotorForce _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearMotorCFM _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearMotorERP _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearServoMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearServoTarget _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringDamping _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringDampingLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringStiffness _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearSpringStiffnessLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearStopCFM _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearStopERP _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearTargetVelocity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ linearUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ padding 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ rotateOrder _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRotateOrder"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularBounce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularEnableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularEnableSpring _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularEquilibriumPoint _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularMaxMotorForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularMotorCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularMotorERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularServoMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularServoTarget _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringDamping _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringDampingLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringStiffness _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringStiffnessLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularStopCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularStopERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularTargetVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearBounce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearEnableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearEnableSpring _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearEquilibriumPoint _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearLowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearMaxMotorForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearMotorCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearMotorERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearServoMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearServoTarget _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringDamping _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringDampingLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringStiffness _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringStiffnessLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearStopCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearStopERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearTargetVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearUpperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ padding 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ rotateOrder _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRotateOrder"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularBounce _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularEnableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularEnableSpring _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularEquilibriumPoint _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularMaxMotorForce _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularMotorCFM _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularMotorERP _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularServoMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularServoTarget _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringDamping _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringDampingLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringStiffness _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularSpringStiffnessLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularStopCFM _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularStopERP _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularTargetVelocity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ angularUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearBounce _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearEnableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearEnableSpring _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearEquilibriumPoint _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearLowerLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearMaxMotorForce _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearMotorCFM _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearMotorERP _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearServoMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearServoTarget _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringDamping _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringDampingLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringStiffness _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearSpringStiffnessLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearStopCFM _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearStopERP _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearTargetVelocity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ linearUpperLimit _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ padding 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ rotateOrder _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRotateOrder"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpring 2 ConstraintDoubleData 2  _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpring2ConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ enableSpring ( swigCPtr ,    this ,    index ,    onOff )  ;", "}", "METHOD_END"], "methodName": ["enableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ getDamping ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ getEquilibriumPoint ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ getStiffness ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["getStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ isSpringEnabled ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["isSpringEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ setAxis ( swigCPtr ,    this ,    axis 1  ,    axis 2  )  ;", "}", "METHOD_END"], "methodName": ["setAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ setDamping ( swigCPtr ,    this ,    index ,    damping )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ setEquilibriumPoint _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ setEquilibriumPoint _  _ SWIG _  1  ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ setEquilibriumPoint _  _ SWIG _  2  ( swigCPtr ,    this ,    index ,    val )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraint _ setStiffness ( swigCPtr ,    this ,    index ,    stiffness )  ;", "}", "METHOD_END"], "methodName": ["setStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpringConstraintData _  6 dofData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGeneric 6 DofConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get6dofData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintData _ equilibriumPoint _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintData _ springDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintData _ springEnabled _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintData _ springStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintData _  6 dofData _ set ( swigCPtr ,    this ,    btGeneric 6 DofConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["set6dofData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintData _ equilibriumPoint _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintData _ springDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintData _ springEnabled _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintData _ springStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _  6 dofData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGeneric 6 DofConstraintDoubleData 2  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get6dofData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ equilibriumPoint _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ springDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ springEnabled _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ springStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _  6 dofData _ set ( swigCPtr ,    this ,    btGeneric 6 DofConstraintDoubleData 2  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["set6dofData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ equilibriumPoint _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ springDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ springEnabled _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btGeneric 6 DofSpringConstraintDoubleData 2  _ springStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btGeneric6DofSpringConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ getAnchor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ getAnchor 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAnchor2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ getAngle 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngle1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ getAngle 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngle2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ getAxis 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAxis1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ getAxis 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAxis2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHinge 2 Constraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHinge 2 Constraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHinge 2 Constraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHinge 2 Constraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHinge 2 Constraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHinge 2 Constraint _ setLowerLimit ( swigCPtr ,    this ,    ang 1 min )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHinge 2 Constraint _ setUpperLimit ( swigCPtr ,    this ,    ang 1 max )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHinge2Constraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeAccumulatedAngleConstraint _ getAccumulatedHingeAngle ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAccumulatedHingeAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeAccumulatedAngleConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeAccumulatedAngleConstraint _ setAccumulatedHingeAngle ( swigCPtr ,    this ,    accAngle )  ;", "}", "METHOD_END"], "methodName": ["setAccumulatedHingeAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeAccumulatedAngleConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ enableAngularMotor ( swigCPtr ,    this ,    enableMotor ,    targetVelocity ,    maxMotorImpulse )  ;", "}", "METHOD_END"], "methodName": ["enableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ enableMotor ( swigCPtr ,    this ,    enableMotor )  ;", "}", "METHOD_END"], "methodName": ["enableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getAFrame ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getAFrameConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAFrameConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getAngularOnly ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getBFrame ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getBFrameConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBFrameConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getEnableAngularMotor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getFrameOffsetA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getFrameOffsetB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getHingeAngle _  _ SWIG _  0  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHingeAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getHingeAngle _  _ SWIG _  1  ( swigCPtr ,    this ,    transA ,    transB )  ;", "}", "METHOD_END"], "methodName": ["getHingeAngle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ getInfo 1 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 1  . getCPtr ( info )  ,    info )  ;", "}", "METHOD_END"], "methodName": ["getInfo1NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ getInfo 2 Internal ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    transA ,    transB ,    angVelA ,    angVelB )  ;", "}", "METHOD_END"], "methodName": ["getInfo2Internal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ getInfo 2 InternalUsingFrameOffset ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    transA ,    transB ,    angVelA ,    angVelB )  ;", "}", "METHOD_END"], "methodName": ["getInfo2InternalUsingFrameOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ getInfo 2 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    transA ,    transB ,    angVelA ,    angVelB )  ;", "}", "METHOD_END"], "methodName": ["getInfo2NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getLimitBiasFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getLimitRelaxationFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getLimitSign ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSign"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getLimitSoftness ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getLowerLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getMaxMotorImpulse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getMotorTargetVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btHingeConstraint _ getRigidBodyA ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btHingeConstraint _ getRigidBodyAConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btHingeConstraint _ getRigidBodyB ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btHingeConstraint _ getRigidBodyBConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getSolveLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolveLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getUpperLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getUseFrameOffset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseFrameOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ getUseReferenceFrameA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ hasLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setAngularOnly ( swigCPtr ,    this ,    angularOnly )  ;", "}", "METHOD_END"], "methodName": ["setAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setAxis ( swigCPtr ,    this ,    axisInA )  ;", "}", "METHOD_END"], "methodName": ["setAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setFrames ( swigCPtr ,    this ,    frameA ,    frameB )  ;", "}", "METHOD_END"], "methodName": ["setFrames"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setLimit _  _ SWIG _  3  ( swigCPtr ,    this ,    low ,    high )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setLimit _  _ SWIG _  2  ( swigCPtr ,    this ,    low ,    high ,     _ softness )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setLimit _  _ SWIG _  1  ( swigCPtr ,    this ,    low ,    high ,     _ softness ,     _ biasFactor )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setLimit _  _ SWIG _  0  ( swigCPtr ,    this ,    low ,    high ,     _ softness ,     _ biasFactor ,     _ relaxationFactor )  ;", "}", "METHOD_END"], "methodName": ["setLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setMaxMotorImpulse ( swigCPtr ,    this ,    maxMotorImpulse )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setMotorTarget _  _ SWIG _  0  ( swigCPtr ,    this ,    qAinB ,    dt )  ;", "}", "METHOD_END"], "methodName": ["setMotorTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setMotorTarget _  _ SWIG _  1  ( swigCPtr ,    this ,    targetAngle ,    dt )  ;", "}", "METHOD_END"], "methodName": ["setMotorTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setMotorTargetVelocity ( swigCPtr ,    this ,    motorTargetVelocity )  ;", "}", "METHOD_END"], "methodName": ["setMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setUseFrameOffset ( swigCPtr ,    this ,    frameOffsetOnOff )  ;", "}", "METHOD_END"], "methodName": ["setUseFrameOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ setUseReferenceFrameA ( swigCPtr ,    this ,    useReferenceFrameA )  ;", "}", "METHOD_END"], "methodName": ["setUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ testLimit ( swigCPtr ,    this ,    transA ,    transB )  ;", "}", "METHOD_END"], "methodName": ["testLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraint _ updateRHS ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateRHS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ angularOnly _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ biasFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ enableAngularMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ limitSoftness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ lowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ maxMotorImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ motorTargetVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintDoubleData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintDoubleData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ relaxationFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintDoubleData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ upperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData _ useReferenceFrameA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ angularOnly _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ biasFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ enableAngularMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ limitSoftness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ lowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ maxMotorImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ motorTargetVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ relaxationFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ upperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData _ useReferenceFrameA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ angularOnly _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ biasFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ enableAngularMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ limitSoftness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ lowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ maxMotorImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ motorTargetVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ padding 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintDoubleData 2  _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintDoubleData 2  _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ relaxationFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintDoubleData 2  _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ upperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintDoubleData 2  _ useReferenceFrameA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ angularOnly _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ biasFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ enableAngularMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ limitSoftness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ lowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ maxMotorImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ motorTargetVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ padding 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ relaxationFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ upperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintDoubleData 2  _ useReferenceFrameA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ angularOnly _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ biasFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ enableAngularMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ limitSoftness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ lowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ maxMotorImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ motorTargetVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintFloatData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintFloatData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ relaxationFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btHingeConstraintFloatData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ upperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btHingeConstraintFloatData _ useReferenceFrameA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ angularOnly _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularOnly"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ biasFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBiasFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ enableAngularMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableAngularMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ limitSoftness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ lowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ maxMotorImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ motorTargetVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMotorTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ relaxationFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelaxationFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ upperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btHingeConstraintFloatData _ useReferenceFrameA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btHingeConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJacobianEntry _  0 MinvJt _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get0MinvJt"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJacobianEntry _  1 MinvJt _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["get1MinvJt"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJacobianEntry _ aJ _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAJ"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJacobianEntry _ Adiag _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdiag"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJacobianEntry _ bJ _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBJ"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJacobianEntry _ getDiagonal ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDiagonal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJacobianEntry _ linearJointAxis _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearJointAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJacobianEntry _ getNonDiagonal _  _ SWIG _  0  ( swigCPtr ,    this ,    btJacobianEntry . getCPtr ( jacB )  ,    jacB ,    massInvA )  ;", "}", "METHOD_END"], "methodName": ["getNonDiagonal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJacobianEntry _ getNonDiagonal _  _ SWIG _  1  ( swigCPtr ,    this ,    btJacobianEntry . getCPtr ( jacB )  ,    jacB ,    massInvA ,    massInvB )  ;", "}", "METHOD_END"], "methodName": ["getNonDiagonal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJacobianEntry _ getRelativeVelocity ( swigCPtr ,    this ,    linvelA ,    angvelA ,    linvelB ,    angvelB )  ;", "}", "METHOD_END"], "methodName": ["getRelativeVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJacobianEntry _  0 MinvJt _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["set0MinvJt"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJacobianEntry _  1 MinvJt _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["set1MinvJt"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJacobianEntry _ aJ _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAJ"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJacobianEntry _ Adiag _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdiag"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJacobianEntry _ bJ _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBJ"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJacobianEntry _ linearJointAxis _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearJointAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJacobianEntry"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJointFeedback _ appliedForceBodyA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedForceBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJointFeedback _ appliedForceBodyB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedForceBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJointFeedback _ appliedTorqueBodyA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedTorqueBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btJointFeedback _ appliedTorqueBodyB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedTorqueBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJointFeedback _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJointFeedback _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJointFeedback _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btJointFeedback _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ appliedForceBodyA _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedForceBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ appliedForceBodyB _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedForceBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ appliedTorqueBodyA _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedTorqueBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btJointFeedback _ appliedTorqueBodyB _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedTorqueBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ applyImpulse ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["applyImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getAngularDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getAngularVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getFallSpeed ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFallSpeed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btKinematicCharacterController _ getGhostObject ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPairCachingGhostObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGhostObject"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getGravity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getJumpSpeed ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJumpSpeed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getLinearDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getLinearVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getMaxPenetrationDepth ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxPenetrationDepth"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getMaxSlope ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxSlope"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getStepHeight ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStepHeight"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ getUp ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ jump _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["jump"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ jump _  _ SWIG _  0  ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["jump"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btKinematicCharacterController _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setAngularDamping ( swigCPtr ,    this ,    d )  ;", "}", "METHOD_END"], "methodName": ["setAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setAngularVelocity ( swigCPtr ,    this ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["setAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setFallSpeed ( swigCPtr ,    this ,    fallSpeed )  ;", "}", "METHOD_END"], "methodName": ["setFallSpeed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setGravity ( swigCPtr ,    this ,    gravity )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setJumpSpeed ( swigCPtr ,    this ,    jumpSpeed )  ;", "}", "METHOD_END"], "methodName": ["setJumpSpeed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setLinearDamping ( swigCPtr ,    this ,    d )  ;", "}", "METHOD_END"], "methodName": ["setLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setLinearVelocity ( swigCPtr ,    this ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["setLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setMaxJumpHeight ( swigCPtr ,    this ,    maxJumpHeight )  ;", "}", "METHOD_END"], "methodName": ["setMaxJumpHeight"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setMaxPenetrationDepth ( swigCPtr ,    this ,    d )  ;", "}", "METHOD_END"], "methodName": ["setMaxPenetrationDepth"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setMaxSlope ( swigCPtr ,    this ,    slopeRadians )  ;", "}", "METHOD_END"], "methodName": ["setMaxSlope"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setStepHeight ( swigCPtr ,    this ,    h )  ;", "}", "METHOD_END"], "methodName": ["setStepHeight"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setUp ( swigCPtr ,    this ,    up )  ;", "}", "METHOD_END"], "methodName": ["setUp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btKinematicCharacterController _ setUseGhostSweepTest ( swigCPtr ,    this ,    useGhostObjectSweepTest )  ;", "}", "METHOD_END"], "methodName": ["setUseGhostSweepTest"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btKinematicCharacterController"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeAlgorithm _ getInfo ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeAlgorithm _ getSteps ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSteps"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeAlgorithm"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btLemkeAlgorithm _ setSystem ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( M _  )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( q _  )  )  ;", "}", "METHOD_END"], "methodName": ["setSystem"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btVectorXT _ float _ t ( DynamicsJNI . btLemkeAlgorithm _ solve _  _ SWIG _  1  ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["solve"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btVectorXT _ float _ t ( DynamicsJNI . btLemkeAlgorithm _ solve _  _ SWIG _  0  ( swigCPtr ,    this ,    maxloops )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["solve"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeSolver _ debugLevel _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDebugLevel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeSolver _ maxLoops _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxLoops"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeSolver _ maxValue _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeSolver _ useLoHighBounds _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseLoHighBounds"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btLemkeSolver _ debugLevel _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDebugLevel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btLemkeSolver _ maxLoops _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxLoops"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btLemkeSolver _ maxValue _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btLemkeSolver _ useLoHighBounds _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseLoHighBounds"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeSolver _ solveMLCP _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btLemkeSolver _ solveMLCP _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations ,    useSparsity )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btLemkeSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMLCPSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMLCPSolver _ getNumFallbacks ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumFallbacks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMLCPSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMLCPSolver _ setMLCPSolver ( swigCPtr ,    this ,    btMLCPSolverInterface . getCPtr ( solver )  ,    solver )  ;", "}", "METHOD_END"], "methodName": ["setMLCPSolver"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMLCPSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMLCPSolver _ setNumFallbacks ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["setNumFallbacks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMLCPSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMLCPSolverInterface"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMLCPSolverInterface _ solveMLCP _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMLCPSolverInterface"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMLCPSolverInterface _ solveMLCP _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations ,    useSparsity )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMLCPSolverInterface"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addBaseConstraintForce ( swigCPtr ,    this ,    f )  ;", "}", "METHOD_END"], "methodName": ["addBaseConstraintForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addBaseConstraintTorque ( swigCPtr ,    this ,    t )  ;", "}", "METHOD_END"], "methodName": ["addBaseConstraintTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addBaseForce ( swigCPtr ,    this ,    f )  ;", "}", "METHOD_END"], "methodName": ["addBaseForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addBaseTorque ( swigCPtr ,    this ,    t )  ;", "}", "METHOD_END"], "methodName": ["addBaseTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addJointTorque ( swigCPtr ,    this ,    i ,    Q )  ;", "}", "METHOD_END"], "methodName": ["addJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addJointTorqueMultiDof _  _ SWIG _  0  ( swigCPtr ,    this ,    i ,    dof ,    Q )  ;", "}", "METHOD_END"], "methodName": ["addJointTorqueMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   Q . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ addJointTorqueMultiDof _  _ SWIG _  1  ( swigCPtr ,    this ,    i ,    Q )  ;", "}", "}", "METHOD_END"], "methodName": ["addJointTorqueMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addLinkConstraintForce ( swigCPtr ,    this ,    i ,    f )  ;", "}", "METHOD_END"], "methodName": ["addLinkConstraintForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addLinkConstraintTorque ( swigCPtr ,    this ,    i ,    t )  ;", "}", "METHOD_END"], "methodName": ["addLinkConstraintTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addLinkForce ( swigCPtr ,    this ,    i ,    f )  ;", "}", "METHOD_END"], "methodName": ["addLinkForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ addLinkTorque ( swigCPtr ,    this ,    i ,    t )  ;", "}", "METHOD_END"], "methodName": ["addLinkTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   delta _ vee . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ applyDeltaVeeMultiDof ( swigCPtr ,    this ,    delta _ vee ,    multiplier )  ;", "}", "}", "METHOD_END"], "methodName": ["applyDeltaVeeMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   delta _ vee . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ applyDeltaVeeMultiDof 2  ( swigCPtr ,    this ,    delta _ vee ,    multiplier )  ;", "}", "}", "METHOD_END"], "methodName": ["applyDeltaVeeMultiDof2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   force . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   output . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ calcAccelerationDeltasMultiDof ( swigCPtr ,    this ,    force ,    output ,    btScalarArray . getCPtr ( scratch _ r )  ,    scratch _ r ,    btVector 3 Array . getCPtr ( scratch _ v )  ,    scratch _ v )  ;", "}", "}", "METHOD_END"], "methodName": ["calcAccelerationDeltasMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ calculateSerializeBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ checkMotionAndSleepIfRequired ( swigCPtr ,    this ,    timestep )  ;", "}", "METHOD_END"], "methodName": ["checkMotionAndSleepIfRequired"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ clearConstraintForces ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearConstraintForces"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ clearForcesAndTorques ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearForcesAndTorques"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ clearVelocities ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearVelocities"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ compTreeLinkVelocities ( swigCPtr ,    this ,    btVector 3  . getCPtr ( omega )  ,    omega ,    btVector 3  . getCPtr ( vel )  ,    vel )  ;", "}", "METHOD_END"], "methodName": ["compTreeLinkVelocities"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ computeAccelerationsArticulatedBodyAlgorithmMultiDof _  _ SWIG _  1  ( swigCPtr ,    this ,    dt ,    btScalarArray . getCPtr ( scratch _ r )  ,    scratch _ r ,    btVector 3 Array . getCPtr ( scratch _ v )  ,    scratch _ v ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t . getCPtr ( scratch _ m )  )  ;", "}", "METHOD_END"], "methodName": ["computeAccelerationsArticulatedBodyAlgorithmMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ computeAccelerationsArticulatedBodyAlgorithmMultiDof _  _ SWIG _  0  ( swigCPtr ,    this ,    dt ,    btScalarArray . getCPtr ( scratch _ r )  ,    scratch _ r ,    btVector 3 Array . getCPtr ( scratch _ v )  ,    scratch _ v ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t . getCPtr ( scratch _ m )  ,    isConstraintPass )  ;", "}", "METHOD_END"], "methodName": ["computeAccelerationsArticulatedBodyAlgorithmMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   jac . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ fillConstraintJacobianMultiDof ( swigCPtr ,    this ,    link ,    contact _ point ,    normal _ ang ,    normal _ lin ,    jac ,    btScalarArray . getCPtr ( scratch _ r )  ,    scratch _ r ,    btVector 3 Array . getCPtr ( scratch _ v )  ,    scratch _ v ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t . getCPtr ( scratch _ m )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fillConstraintJacobianMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   jac . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ fillContactJacobianMultiDof ( swigCPtr ,    this ,    link ,    contact _ point ,    normal ,    jac ,    btScalarArray . getCPtr ( scratch _ r )  ,    scratch _ r ,    btVector 3 Array . getCPtr ( scratch _ v )  ,    scratch _ v ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t . getCPtr ( scratch _ m )  )  ;", "}", "}", "METHOD_END"], "methodName": ["fillContactJacobianMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ finalizeMultiDof ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["finalizeMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ forwardKinematics ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuaternion _ t . getCPtr ( scratch _ q )  ,    btVector 3 Array . getCPtr ( scratch _ m )  ,    scratch _ m )  ;", "}", "METHOD_END"], "methodName": ["forwardKinematics"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getAngularDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getAngularMomentum ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularMomentum"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBody _ getBaseCollider ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkCollider ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBody _ getBaseColliderConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkCollider ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseColliderConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseForce ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseInertia ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseMass ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseName ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseOmega ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseOmega"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBasePos ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBasePos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseTorque ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseVel ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getBaseWorldTransform ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getCanSleep ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCanSleep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getCompanionId ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointPos ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointPosMultiDof ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointPosMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointPosMultiDofConst ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointPosMultiDofConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointTorque ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointTorqueMultiDof ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointTorqueMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointVel ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointVelMultiDof ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointVelMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getJointVelMultiDofConst ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getJointVelMultiDofConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getKineticEnergy ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getKineticEnergy"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getLinearDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   new   btMultibodyLink ( DynamicsJNI . btMultiBody _ getLink ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLink"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBody _ getLinkCollider ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkCollider ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinkCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   new   btMultibodyLink ( DynamicsJNI . btMultiBody _ getLinkConst ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinkConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getLinkForce ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getLinkForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getLinkInertia ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getLinkInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getLinkMass ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getLinkMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getLinkTorque ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getLinkTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getMaxAppliedImpulse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getMaxCoordinateVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxCoordinateVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getNumDofs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumDofs"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getNumLinks ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getNumPosVars ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumPosVars"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getParent ( swigCPtr ,    this ,    link _ num )  ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getParentToLocalRot ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getParentToLocalRot"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getRVector ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getRVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getUseGyroTerm ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseGyroTerm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getUserIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getUserIndex 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserIndex2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getUserPointer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getVelocityVector ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVelocityVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ getWorldToBaseRot ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWorldToBaseRot"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ goToSleep ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["goToSleep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ hasFixedBase ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasFixedBase"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ hasSelfCollision ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasSelfCollision"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ internalNeedsJointFeedback ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalNeedsJointFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ isAwake ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isAwake"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ isPosUpdated ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isPosUpdated"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ isUsingGlobalVelocities ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isUsingGlobalVelocities"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ isUsingRK 4 Integration ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isUsingRK4Integration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ localDirToWorld ( swigCPtr ,    this ,    i ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localDirToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ localFrameToWorld ( swigCPtr ,    this ,    i ,    mat )  ;", "}", "METHOD_END"], "methodName": ["localFrameToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ localPosToWorld ( swigCPtr ,    this ,    i ,    vec )  ;", "}", "METHOD_END"], "methodName": ["localPosToWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ processDeltaVeeMultiDof 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["processDeltaVeeMultiDof2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ serialize ( swigCPtr ,    this ,    dataBuffer ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setAngularDamping ( swigCPtr ,    this ,    damp )  ;", "}", "METHOD_END"], "methodName": ["setAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBaseCollider ( swigCPtr ,    this ,    btMultiBodyLinkCollider . getCPtr ( collider )  ,    collider )  ;", "}", "METHOD_END"], "methodName": ["setBaseCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBaseInertia ( swigCPtr ,    this ,    inertia )  ;", "}", "METHOD_END"], "methodName": ["setBaseInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBaseMass ( swigCPtr ,    this ,    mass )  ;", "}", "METHOD_END"], "methodName": ["setBaseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBaseName ( swigCPtr ,    this ,    name )  ;", "}", "METHOD_END"], "methodName": ["setBaseName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBaseOmega ( swigCPtr ,    this ,    omega )  ;", "}", "METHOD_END"], "methodName": ["setBaseOmega"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBasePos ( swigCPtr ,    this ,    pos )  ;", "}", "METHOD_END"], "methodName": ["setBasePos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBaseVel ( swigCPtr ,    this ,    vel )  ;", "}", "METHOD_END"], "methodName": ["setBaseVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setBaseWorldTransform ( swigCPtr ,    this ,    tr )  ;", "}", "METHOD_END"], "methodName": ["setBaseWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setCanSleep ( swigCPtr ,    this ,    canSleep )  ;", "}", "METHOD_END"], "methodName": ["setCanSleep"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setCompanionId ( swigCPtr ,    this ,    id )  ;", "}", "METHOD_END"], "methodName": ["setCompanionId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setHasSelfCollision ( swigCPtr ,    this ,    hasSelfCollision )  ;", "}", "METHOD_END"], "methodName": ["setHasSelfCollision"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setJointPos ( swigCPtr ,    this ,    i ,    q )  ;", "}", "METHOD_END"], "methodName": ["setJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   q . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ setJointPosMultiDof ( swigCPtr ,    this ,    i ,    q )  ;", "}", "}", "METHOD_END"], "methodName": ["setJointPosMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setJointVel ( swigCPtr ,    this ,    i ,    qdot )  ;", "}", "METHOD_END"], "methodName": ["setJointVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   qdot . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ setJointVelMultiDof ( swigCPtr ,    this ,    i ,    qdot )  ;", "}", "}", "METHOD_END"], "methodName": ["setJointVelMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setLinearDamping ( swigCPtr ,    this ,    damp )  ;", "}", "METHOD_END"], "methodName": ["setLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setMaxAppliedImpulse ( swigCPtr ,    this ,    maxImp )  ;", "}", "METHOD_END"], "methodName": ["setMaxAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setMaxCoordinateVelocity ( swigCPtr ,    this ,    maxVel )  ;", "}", "METHOD_END"], "methodName": ["setMaxCoordinateVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setNumLinks ( swigCPtr ,    this ,    numLinks )  ;", "}", "METHOD_END"], "methodName": ["setNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setPosUpdated ( swigCPtr ,    this ,    updated )  ;", "}", "METHOD_END"], "methodName": ["setPosUpdated"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setUseGyroTerm ( swigCPtr ,    this ,    useGyro )  ;", "}", "METHOD_END"], "methodName": ["setUseGyroTerm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setUserIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setUserIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setUserIndex 2  ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["setUserIndex2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setUserPointer ( swigCPtr ,    this ,    userPointer )  ;", "}", "METHOD_END"], "methodName": ["setUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setWorldToBaseRot ( swigCPtr ,    this ,    rot )  ;", "}", "METHOD_END"], "methodName": ["setWorldToBaseRot"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupFixed _  _ SWIG _  1  ( swigCPtr ,    this ,    linkIndex ,    mass ,    inertia ,    parent ,    rotParentToThis ,    parentComToThisPivotOffset ,    thisPivotToThisComOffset )  ;", "}", "METHOD_END"], "methodName": ["setupFixed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupFixed _  _ SWIG _  0  ( swigCPtr ,    this ,    linkIndex ,    mass ,    inertia ,    parent ,    rotParentToThis ,    parentComToThisPivotOffset ,    thisPivotToThisComOffset ,    deprecatedDisableParentCollision )  ;", "}", "METHOD_END"], "methodName": ["setupFixed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupPlanar _  _ SWIG _  1  ( swigCPtr ,    this ,    i ,    mass ,    inertia ,    parent ,    rotParentToThis ,    rotationAxis ,    parentComToThisComOffset )  ;", "}", "METHOD_END"], "methodName": ["setupPlanar"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupPlanar _  _ SWIG _  0  ( swigCPtr ,    this ,    i ,    mass ,    inertia ,    parent ,    rotParentToThis ,    rotationAxis ,    parentComToThisComOffset ,    disableParentCollision )  ;", "}", "METHOD_END"], "methodName": ["setupPlanar"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupPrismatic ( swigCPtr ,    this ,    i ,    mass ,    inertia ,    parent ,    rotParentToThis ,    jointAxis ,    parentComToThisPivotOffset ,    thisPivotToThisComOffset ,    disableParentCollision )  ;", "}", "METHOD_END"], "methodName": ["setupPrismatic"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupRevolute _  _ SWIG _  1  ( swigCPtr ,    this ,    linkIndex ,    mass ,    inertia ,    parentIndex ,    rotParentToThis ,    jointAxis ,    parentComToThisPivotOffset ,    thisPivotToThisComOffset )  ;", "}", "METHOD_END"], "methodName": ["setupRevolute"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupRevolute _  _ SWIG _  0  ( swigCPtr ,    this ,    linkIndex ,    mass ,    inertia ,    parentIndex ,    rotParentToThis ,    jointAxis ,    parentComToThisPivotOffset ,    thisPivotToThisComOffset ,    disableParentCollision )  ;", "}", "METHOD_END"], "methodName": ["setupRevolute"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupSpherical _  _ SWIG _  1  ( swigCPtr ,    this ,    linkIndex ,    mass ,    inertia ,    parent ,    rotParentToThis ,    parentComToThisPivotOffset ,    thisPivotToThisComOffset )  ;", "}", "METHOD_END"], "methodName": ["setupSpherical"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ setupSpherical _  _ SWIG _  0  ( swigCPtr ,    this ,    linkIndex ,    mass ,    inertia ,    parent ,    rotParentToThis ,    parentComToThisPivotOffset ,    thisPivotToThisComOffset ,    disableParentCollision )  ;", "}", "METHOD_END"], "methodName": ["setupSpherical"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ stepPositionsMultiDof _  _ SWIG _  2  ( swigCPtr ,    this ,    dt )  ;", "}", "METHOD_END"], "methodName": ["stepPositionsMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   pq . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ stepPositionsMultiDof _  _ SWIG _  1  ( swigCPtr ,    this ,    dt ,    pq )  ;", "}", "}", "METHOD_END"], "methodName": ["stepPositionsMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "assert   pq . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   pqd . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ stepPositionsMultiDof _  _ SWIG _  0  ( swigCPtr ,    this ,    dt ,    pq ,    pqd )  ;", "}", "}", "METHOD_END"], "methodName": ["stepPositionsMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ stepVelocitiesMultiDof _  _ SWIG _  1  ( swigCPtr ,    this ,    dt ,    btScalarArray . getCPtr ( scratch _ r )  ,    scratch _ r ,    btVector 3 Array . getCPtr ( scratch _ v )  ,    scratch _ v ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t . getCPtr ( scratch _ m )  )  ;", "}", "METHOD_END"], "methodName": ["stepVelocitiesMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ stepVelocitiesMultiDof _  _ SWIG _  0  ( swigCPtr ,    this ,    dt ,    btScalarArray . getCPtr ( scratch _ r )  ,    scratch _ r ,    btVector 3 Array . getCPtr ( scratch _ v )  ,    scratch _ v ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t . getCPtr ( scratch _ m )  ,    isConstraintPass )  ;", "}", "METHOD_END"], "methodName": ["stepVelocitiesMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ updateCollisionObjectWorldTransforms ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuaternion _ t . getCPtr ( scratch _ q )  ,    btVector 3 Array . getCPtr ( scratch _ m )  ,    scratch _ m )  ;", "}", "METHOD_END"], "methodName": ["updateCollisionObjectWorldTransforms"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ useGlobalVelocities ( swigCPtr ,    this ,    use )  ;", "}", "METHOD_END"], "methodName": ["useGlobalVelocities"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ useRK 4 Integration ( swigCPtr ,    this ,    use )  ;", "}", "METHOD_END"], "methodName": ["useRK4Integration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBody _ wakeUp ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["wakeUp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ worldDirToLocal ( swigCPtr ,    this ,    i ,    vec )  ;", "}", "METHOD_END"], "methodName": ["worldDirToLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBody _ worldPosToLocal ( swigCPtr ,    this ,    i ,    vec )  ;", "}", "METHOD_END"], "methodName": ["worldPosToLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ allocateJacobiansMultiDof ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["allocateJacobiansMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ createConstraintRows ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMultiBodySolverConstraint _ t . getCPtr ( constraintRows )  ,    btMultiBodyJacobianData . getCPtr ( data )  ,    data ,    btContactSolverInfo . getCPtr ( infoGlobal )  ,    infoGlobal )  ;", "}", "METHOD_END"], "methodName": ["createConstraintRows"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ debugDraw ( swigCPtr ,    this ,    btIDebugDraw . getCPtr ( drawer )  ,    drawer )  ;", "}", "METHOD_END"], "methodName": ["debugDraw"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ finalizeMultiDof ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["finalizeMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ getAppliedImpulse ( swigCPtr ,    this ,    dof )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ getIslandIdA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIslandIdA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ getIslandIdB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIslandIdB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ getMaxAppliedImpulse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyConstraint _ getMultiBodyA ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyConstraint _ getMultiBodyB ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ getNumRows ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumRows"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ getPosition ( swigCPtr ,    this ,    row )  ;", "}", "METHOD_END"], "methodName": ["getPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ internalSetAppliedImpulse ( swigCPtr ,    this ,    dof ,    appliedImpulse )  ;", "}", "METHOD_END"], "methodName": ["internalSetAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ isUnilateral ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isUnilateral"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ jacobianA ( swigCPtr ,    this ,    row )  ;", "}", "METHOD_END"], "methodName": ["jacobianA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ jacobianAConst ( swigCPtr ,    this ,    row )  ;", "}", "METHOD_END"], "methodName": ["jacobianAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ jacobianB ( swigCPtr ,    this ,    row )  ;", "}", "METHOD_END"], "methodName": ["jacobianB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ jacobianBConst ( swigCPtr ,    this ,    row )  ;", "}", "METHOD_END"], "methodName": ["jacobianBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setErp ( swigCPtr ,    this ,    erp )  ;", "}", "METHOD_END"], "methodName": ["setErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setFrameInB ( swigCPtr ,    this ,    frameInB )  ;", "}", "METHOD_END"], "methodName": ["setFrameInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setGearAuxLink ( swigCPtr ,    this ,    gearAuxLink )  ;", "}", "METHOD_END"], "methodName": ["setGearAuxLink"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setGearRatio ( swigCPtr ,    this ,    ratio )  ;", "}", "METHOD_END"], "methodName": ["setGearRatio"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setMaxAppliedImpulse ( swigCPtr ,    this ,    maxImp )  ;", "}", "METHOD_END"], "methodName": ["setMaxAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setPivotInB ( swigCPtr ,    this ,    pivotInB )  ;", "}", "METHOD_END"], "methodName": ["setPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setPosition ( swigCPtr ,    this ,    row ,    pos )  ;", "}", "METHOD_END"], "methodName": ["setPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ setRelativePositionTarget ( swigCPtr ,    this ,    relPosTarget )  ;", "}", "METHOD_END"], "methodName": ["setRelativePositionTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraint _ updateJacobianSizes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateJacobianSizes"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraintSolver _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraintSolver _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraintSolver _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraintSolver _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraintSolver _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraintSolver _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraintSolver _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraintSolver _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyConstraintSolver _ solveGroupCacheFriendlyFinish ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ btCollisionObject . getCPtr ( bodies )  ,    numBodies ,    btContactSolverInfo . getCPtr ( infoGlobal )  ,    infoGlobal )  ;", "}", "METHOD_END"], "methodName": ["solveGroupCacheFriendlyFinish"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyConstraintSolver _ solveMultiBodyGroup ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ btCollisionObject . getCPtr ( bodies )  ,    numBodies ,    SWIGTYPE _ p _ p _ btPersistentManifold . getCPtr ( manifold )  ,    numManifolds ,    SWIGTYPE _ p _ p _ btTypedConstraint . getCPtr ( constraints )  ,    numConstraints ,    SWIGTYPE _ p _ p _ btMultiBodyConstraint . getCPtr ( multiBodyConstraints )  ,    numMultiBodyConstraints ,    btContactSolverInfo . getCPtr ( info )  ,    info ,    btIDebugDraw . getCPtr ( debugDrawer )  ,    debugDrawer ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher )  ;", "}", "METHOD_END"], "methodName": ["solveMultiBodyGroup"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDoubleData _ baseCollider _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDoubleData _ baseInertia _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyDoubleData _ baseMass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyDoubleData _ baseName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDoubleData _ baseWorldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDoubleData _ links _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyDoubleData _ numLinks _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyDoubleData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyDoubleData _ paddingPtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPaddingPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ baseCollider _ set ( swigCPtr ,    this ,    btCollisionObjectDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ baseInertia _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ baseMass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ baseName _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ baseWorldTransform _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ links _ set ( swigCPtr ,    this ,    btMultiBodyLinkDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ numLinks _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDoubleData _ paddingPtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPaddingPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ addMultiBody _  _ SWIG _  2  ( swigCPtr ,    this ,    btMultiBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["addMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ addMultiBody _  _ SWIG _  1  ( swigCPtr ,    this ,    btMultiBody . getCPtr ( body )  ,    body ,    group )  ;", "}", "METHOD_END"], "methodName": ["addMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ addMultiBody _  _ SWIG _  0  ( swigCPtr ,    this ,    btMultiBody . getCPtr ( body )  ,    body ,    group ,    mask )  ;", "}", "METHOD_END"], "methodName": ["addMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ addMultiBodyConstraint ( swigCPtr ,    this ,    btMultiBodyConstraint . getCPtr ( constraint )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["addMultiBodyConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ clearMultiBodyConstraintForces ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearMultiBodyConstraintForces"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ clearMultiBodyForces ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearMultiBodyForces"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ debugDrawMultiBodyConstraint ( swigCPtr ,    this ,    btMultiBodyConstraint . getCPtr ( constraint )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["debugDrawMultiBodyConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ forwardKinematics ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["forwardKinematics"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDynamicsWorld _ getMultiBody ( swigCPtr ,    this ,    mbIndex )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDynamicsWorld _ getMultiBodyConst ( swigCPtr ,    this ,    mbIndex )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBodyConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDynamicsWorld _ getMultiBodyConstraint ( swigCPtr ,    this ,    constraintIndex )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBodyConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyDynamicsWorld _ getMultiBodyConstraintConst ( swigCPtr ,    this ,    constraintIndex )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBodyConstraintConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyDynamicsWorld _ getNumMultiBodyConstraints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumMultiBodyConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyDynamicsWorld _ getNumMultibodies ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumMultibodies"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ integrateTransforms ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["integrateTransforms"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ removeMultiBody ( swigCPtr ,    this ,    btMultiBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["removeMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyDynamicsWorld _ removeMultiBodyConstraint ( swigCPtr ,    this ,    btMultiBodyConstraint . getCPtr ( constraint )  ,    constraint )  ;", "}", "METHOD_END"], "methodName": ["removeMultiBodyConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyFixedConstraint _ getFrameInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyFixedConstraint _ getFrameInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyFixedConstraint _ getPivotInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyFixedConstraint _ getPivotInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFixedConstraint _ setFrameInA ( swigCPtr ,    this ,    frameInA )  ;", "}", "METHOD_END"], "methodName": ["setFrameInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFixedConstraint _ setPivotInA ( swigCPtr ,    this ,    pivotInA )  ;", "}", "METHOD_END"], "methodName": ["setPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFixedConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyFloatData _ baseCollider _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyFloatData _ baseInertia _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyFloatData _ baseMass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyFloatData _ baseName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaseName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyFloatData _ baseWorldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBaseWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyFloatData _ links _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyFloatData _ numLinks _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFloatData _ baseCollider _ set ( swigCPtr ,    this ,    btCollisionObjectFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFloatData _ baseInertia _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFloatData _ baseMass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFloatData _ baseName _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFloatData _ baseWorldTransform _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaseWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFloatData _ links _ set ( swigCPtr ,    this ,    btMultiBodyLinkFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyFloatData _ numLinks _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyGearConstraint _ getFrameInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyGearConstraint _ getFrameInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyGearConstraint _ getPivotInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyGearConstraint _ getPivotInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyGearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyGearConstraint _ setFrameInA ( swigCPtr ,    this ,    frameInA )  ;", "}", "METHOD_END"], "methodName": ["setFrameInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyGearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyGearConstraint _ setPivotInA ( swigCPtr ,    this ,    pivotInA )  ;", "}", "METHOD_END"], "methodName": ["setPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyGearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJacobianData _ deltaVelocities _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDeltaVelocities"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJacobianData _ deltaVelocitiesUnitImpulse _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDeltaVelocitiesUnitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyJacobianData _ fixedBodyId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFixedBodyId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJacobianData _ jacobians _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJacobians"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJacobianData _ scratch _ m _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScratch_m"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJacobianData _ scratch _ r _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScalarArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScratch_r"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJacobianData _ scratch _ v _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScratch_v"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJacobianData _ solverBodyPool _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSolverBody _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSolverBodyPool"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ deltaVelocities _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeltaVelocities"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ deltaVelocitiesUnitImpulse _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeltaVelocitiesUnitImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ fixedBodyId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFixedBodyId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ jacobians _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJacobians"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ scratch _ m _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btMatrix 3 x 3  _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setScratch_m"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ scratch _ r _ set ( swigCPtr ,    this ,    btScalarArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setScratch_r"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ scratch _ v _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setScratch_v"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJacobianData _ solverBodyPool _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSolverBody _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setSolverBodyPool"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJacobianData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointFeedback"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyJointFeedback _ reactionForces _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSpatialForceVector ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getReactionForces"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointFeedback"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJointFeedback _ reactionForces _ set ( swigCPtr ,    this ,    btSpatialForceVector . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setReactionForces"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointFeedback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointLimitConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyJointMotor _ getErp ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJointMotor _ setPositionTarget _  _ SWIG _  1  ( swigCPtr ,    this ,    posTarget )  ;", "}", "METHOD_END"], "methodName": ["setPositionTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJointMotor _ setPositionTarget _  _ SWIG _  0  ( swigCPtr ,    this ,    posTarget ,    kp )  ;", "}", "METHOD_END"], "methodName": ["setPositionTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJointMotor _ setRhsClamp ( swigCPtr ,    this ,    rhsClamp )  ;", "}", "METHOD_END"], "methodName": ["setRhsClamp"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJointMotor _ setVelocityTarget _  _ SWIG _  1  ( swigCPtr ,    this ,    velTarget )  ;", "}", "METHOD_END"], "methodName": ["setVelocityTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyJointMotor _ setVelocityTarget _  _ SWIG _  0  ( swigCPtr ,    this ,    velTarget ,    kd )  ;", "}", "METHOD_END"], "methodName": ["setVelocityTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyJointMotor"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkCollider"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkCollider _ link _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLink"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkCollider"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkCollider _ multiBody _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkCollider"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkCollider _ link _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLink"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkCollider"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkCollider _ multiBody _ set ( swigCPtr ,    this ,    btMultiBody . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkCollider"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkCollider _ upcast ( btCollisionObject . getCPtr ( colObj )  ,    colObj )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkCollider ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["upcast"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkCollider"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkCollider _ upcastConstBtCollisionObject ( btCollisionObject . getCPtr ( colObj )  ,    colObj )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkCollider ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["upcastConstBtCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkCollider"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ dofCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDofCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkDoubleData _ jointAxisBottom _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJointAxisBottom"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkDoubleData _ jointAxisTop _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJointAxisTop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointLowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointMaxForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointMaxForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointMaxVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointMaxVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointPos _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointTorque _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointUpperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ jointVel _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkDoubleData _ linkCollider _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinkCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkDoubleData _ linkInertia _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinkInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ linkMass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ linkName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ paddingPtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPaddingPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkDoubleData _ parentComToThisComOffset _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getParentComToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ parentIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getParentIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkDoubleData _ posVarCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPosVarCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkDoubleData _ thisPivotToThisComOffset _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getThisPivotToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkDoubleData _ zeroRotParentToThis _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuaternionDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getZeroRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ dofCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDofCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointAxisBottom _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointAxisBottom"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointAxisTop _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointAxisTop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointLowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointMaxForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointMaxForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointMaxVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointMaxVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointName _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointPos _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointTorque _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointUpperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ jointVel _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ linkCollider _ set ( swigCPtr ,    this ,    btCollisionObjectDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ linkInertia _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ linkMass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ linkName _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ paddingPtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPaddingPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ parentComToThisComOffset _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParentComToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ parentIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParentIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ posVarCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPosVarCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ thisPivotToThisComOffset _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setThisPivotToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkDoubleData _ zeroRotParentToThis _ set ( swigCPtr ,    this ,    btQuaternionDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setZeroRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ dofCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDofCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkFloatData _ jointAxisBottom _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJointAxisBottom"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkFloatData _ jointAxisTop _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJointAxisTop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointLowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointMaxForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointMaxForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointMaxVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointMaxVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointPos _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointTorque _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointUpperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ jointVel _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkFloatData _ linkCollider _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinkCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkFloatData _ linkInertia _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinkInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ linkMass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ linkName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ paddingPtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPaddingPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkFloatData _ parentComToThisComOffset _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getParentComToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ parentIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getParentIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyLinkFloatData _ posVarCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPosVarCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkFloatData _ thisPivotToThisComOffset _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getThisPivotToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodyLinkFloatData _ zeroRotParentToThis _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuaternionFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getZeroRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ dofCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDofCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointAxisBottom _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointAxisBottom"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointAxisTop _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointAxisTop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointLowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointMaxForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointMaxForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointMaxVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointMaxVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointName _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointPos _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointTorque _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointUpperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ jointVel _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointVel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ linkCollider _ set ( swigCPtr ,    this ,    btCollisionObjectFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ linkInertia _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ linkMass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ linkName _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ paddingPtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPaddingPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ parentComToThisComOffset _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParentComToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ parentIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParentIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ posVarCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPosVarCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ thisPivotToThisComOffset _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setThisPivotToThisComOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyLinkFloatData _ zeroRotParentToThis _ set ( swigCPtr ,    this ,    btQuaternionFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setZeroRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyLinkFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyPoint 2 Point _ getPivotInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyPoint 2 Point _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyPoint 2 Point _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyPoint 2 Point _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodyPoint 2 Point _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyPoint 2 Point _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyPoint 2 Point _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyPoint 2 Point _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodyPoint 2 Point _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodyPoint2Point"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySliderConstraint _ getFrameInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySliderConstraint _ getFrameInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySliderConstraint _ getJointAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySliderConstraint _ getPivotInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySliderConstraint _ getPivotInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySliderConstraint _ setFrameInA ( swigCPtr ,    this ,    frameInA )  ;", "}", "METHOD_END"], "methodName": ["setFrameInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySliderConstraint _ setJointAxis ( swigCPtr ,    this ,    jointAxis )  ;", "}", "METHOD_END"], "methodName": ["setJointAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySliderConstraint _ setPivotInA ( swigCPtr ,    this ,    pivotInA )  ;", "}", "METHOD_END"], "methodName": ["setPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySliderConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ angularComponentA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularComponentA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ angularComponentB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularComponentB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ appliedImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ appliedPushImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedPushImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ cfm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ contactNormal 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactNormal1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ contactNormal 2  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactNormal2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ deltaVelAindex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDeltaVelAindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ deltaVelBindex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDeltaVelBindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ frictionIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ jacAindex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJacAindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ jacBindex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJacBindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ jacDiagABInv _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJacDiagABInv"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ linkA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ linkB _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ lowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ multiBodyA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ multiBodyB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMultiBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ orgConstraint _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOrgConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ orgDofIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOrgDofIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ originalContactPoint _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOriginalContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ overrideNumSolverIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ relpos 1 CrossNormal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRelpos1CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultiBodySolverConstraint _ relpos 2 CrossNormal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRelpos2CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ rhs _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRhs"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ rhsPenetration _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRhsPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ solverBodyIdA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverBodyIdA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ solverBodyIdB _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverBodyIdB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ unusedPadding 4  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUnusedPadding4"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ upperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultiBodySolverConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ angularComponentA _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularComponentA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ angularComponentB _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularComponentB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ appliedImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ appliedPushImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedPushImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ cfm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ contactNormal 1  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactNormal1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ contactNormal 2  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactNormal2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ deltaVelAindex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeltaVelAindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ deltaVelBindex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeltaVelBindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ frictionIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ jacAindex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJacAindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ jacBindex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJacBindex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ jacDiagABInv _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJacDiagABInv"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ linkA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ linkB _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinkB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ lowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ multiBodyA _ set ( swigCPtr ,    this ,    btMultiBody . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMultiBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ multiBodyB _ set ( swigCPtr ,    this ,    btMultiBody . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMultiBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ orgConstraint _ set ( swigCPtr ,    this ,    btMultiBodyConstraint . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOrgConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ orgDofIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOrgDofIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ originalContactPoint _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOriginalContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ overrideNumSolverIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ relpos 1 CrossNormal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelpos1CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ relpos 2 CrossNormal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelpos2CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ rhs _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRhs"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ rhsPenetration _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRhsPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ solverBodyIdA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverBodyIdA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ solverBodyIdB _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverBodyIdB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ unusedPadding 4  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnusedPadding4"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultiBodySolverConstraint _ upperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultiBodySolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ absFrameLocVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSpatialMotionVector ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAbsFrameLocVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ absFrameTotVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSpatialMotionVector ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAbsFrameTotVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ appliedConstraintForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedConstraintForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ appliedConstraintTorque _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedConstraintTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ appliedForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ appliedTorque _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAppliedTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ axes _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSpatialMotionVector ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAxes"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ getAxisBottom ( swigCPtr ,    this ,    dof )  ;", "}", "METHOD_END"], "methodName": ["getAxisBottom"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ getAxisTop ( swigCPtr ,    this ,    dof )  ;", "}", "METHOD_END"], "methodName": ["getAxisTop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ cachedRVector _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCachedRVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ cachedRotParentToThis _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuaternion ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCachedRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ cachedWorldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCachedWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ cfgOffset _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCfgOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ collider _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyLinkCollider ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ dVector _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ dofCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDofCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ dofOffset _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDofOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ eVector _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getEVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ flags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ inertiaLocal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInertiaLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ jointFeedback _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiBodyJointFeedback ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJointFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointLowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointMaxForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointMaxForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointMaxVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointMaxVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointPos _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointTorque _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ jointUpperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ linkName _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ mass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ parent _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getParent"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ posVarCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPosVarCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ userPtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btMultibodyLink _ zeroRotParentToThis _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btQuaternion ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getZeroRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btMultibodyLink _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ absFrameLocVelocity _ set ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAbsFrameLocVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ absFrameTotVelocity _ set ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAbsFrameTotVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ appliedConstraintForce _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedConstraintForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ appliedConstraintTorque _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedConstraintTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ appliedForce _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ appliedTorque _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ axes _ set ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAxes"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ setAxisBottom _  _ SWIG _  0  ( swigCPtr ,    this ,    dof ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setAxisBottom"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ setAxisBottom _  _ SWIG _  1  ( swigCPtr ,    this ,    dof ,    x ,    y ,    z )  ;", "}", "METHOD_END"], "methodName": ["setAxisBottom"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ setAxisTop _  _ SWIG _  0  ( swigCPtr ,    this ,    dof ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setAxisTop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ setAxisTop _  _ SWIG _  1  ( swigCPtr ,    this ,    dof ,    x ,    y ,    z )  ;", "}", "METHOD_END"], "methodName": ["setAxisTop"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ cachedRVector _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedRVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ cachedRotParentToThis _ set ( swigCPtr ,    this ,    btQuaternion . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ cachedWorldTransform _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCachedWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ cfgOffset _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCfgOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ collider _ set ( swigCPtr ,    this ,    btMultiBodyLinkCollider . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollider"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ dVector _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ dofCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDofCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ dofOffset _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDofOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ eVector _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ flags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ inertiaLocal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInertiaLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointFeedback _ set ( swigCPtr ,    this ,    btMultiBodyJointFeedback . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointLowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointMaxForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointMaxForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointMaxVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointMaxVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointPos _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointTorque _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ jointUpperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ mass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ parent _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParent"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ posVarCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPosVarCount"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ userPtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ zeroRotParentToThis _ set ( swigCPtr ,    this ,    btQuaternion . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setZeroRotParentToThis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btMultibodyLink _ updateCacheMultiDof _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateCacheMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "assert   pq . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "DynamicsJNI _ updateCacheMultiDof _  _ SWIG _  0  ( swigCPtr ,    this ,    pq )  ;", "}", "}", "METHOD_END"], "methodName": ["updateCacheMultiDof"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btMultibodyLink"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btNNCGConstraintSolver _ onlyForNoneContact _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOnlyForNoneContact"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btNNCGConstraintSolver _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btNNCGConstraintSolver _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btNNCGConstraintSolver _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btNNCGConstraintSolver _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btNNCGConstraintSolver _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btNNCGConstraintSolver _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btNNCGConstraintSolver _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btNNCGConstraintSolver _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btNNCGConstraintSolver _ onlyForNoneContact _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOnlyForNoneContact"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btNNCGConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ getFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ getInfo 1 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 1  . getCPtr ( info )  ,    info )  ;", "}", "METHOD_END"], "methodName": ["getInfo1NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ getInfo 2 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    body 0  _ trans ,    body 1  _ trans )  ;", "}", "METHOD_END"], "methodName": ["getInfo2NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ getPivotInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ getPivotInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraint _ setting _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConstraintSetting ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSetting"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ useSolveConstraintObsolete _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseSolveConstraintObsolete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btPoint 2 PointConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ setPivotA ( swigCPtr ,    this ,    pivotA )  ;", "}", "METHOD_END"], "methodName": ["setPivotA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ setPivotB ( swigCPtr ,    this ,    pivotB )  ;", "}", "METHOD_END"], "methodName": ["setPivotB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ setting _ set ( swigCPtr ,    this ,    btConstraintSetting . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSetting"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ useSolveConstraintObsolete _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseSolveConstraintObsolete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraint _ updateRHS ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateRHS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintDoubleData _ pivotInA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintDoubleData _ pivotInB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintDoubleData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintDoubleData _ pivotInA _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintDoubleData _ pivotInB _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintDoubleData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintDoubleData 2  _ pivotInA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintDoubleData 2  _ pivotInB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintDoubleData 2  _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintDoubleData 2  _ pivotInA _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintDoubleData 2  _ pivotInB _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintDoubleData 2  _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintDoubleData2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintFloatData _ pivotInA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintFloatData _ pivotInB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btPoint 2 PointConstraintFloatData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintFloatData _ pivotInA _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPivotInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintFloatData _ pivotInB _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPivotInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btPoint 2 PointConstraintFloatData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btPoint2PointConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   new   btWheelInfo ( DynamicsJNI . btRaycastVehicle _ addWheel ( swigCPtr ,    this ,    connectionPointCS 0  ,    wheelDirectionCS 0  ,    wheelAxleCS ,    suspensionRestLength ,    wheelRadius ,    btRaycastVehicle . btVehicleTuning . getCPtr ( tuning )  ,    tuning ,    isFrontWheel )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["addWheel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ applyEngineForce ( swigCPtr ,    this ,    force ,    wheel )  ;", "}", "METHOD_END"], "methodName": ["applyEngineForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getChassisWorldTransform ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getChassisWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getCurrentSpeedKmHour ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentSpeedKmHour"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getForwardAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getForwardAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getForwardVector ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getForwardVector"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getNumWheels ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumWheels"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getRightAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRightAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btRaycastVehicle _ getRigidBody ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btRaycastVehicle _ getRigidBodyConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getSteeringValue ( swigCPtr ,    this ,    wheel )  ;", "}", "METHOD_END"], "methodName": ["getSteeringValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getUpAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getUserConstraintId ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getUserConstraintType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRaycastVehicle _ wheelInfo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btWheelInfo _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWheelInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   new   btWheelInfo ( DynamicsJNI . btRaycastVehicle _ getWheelInfo ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWheelInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   new   btWheelInfo ( DynamicsJNI . btRaycastVehicle _ getWheelInfoConst ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWheelInfoConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ getWheelTransformWS ( swigCPtr ,    this ,    wheelIndex )  ;", "}", "METHOD_END"], "methodName": ["getWheelTransformWS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRaycastVehicle _ rayCast ( swigCPtr ,    this ,    btWheelInfo . getCPtr ( wheel )  ,    wheel )  ;", "}", "METHOD_END"], "methodName": ["rayCast"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ resetSuspension ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["resetSuspension"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ setBrake ( swigCPtr ,    this ,    brake ,    wheelIndex )  ;", "}", "METHOD_END"], "methodName": ["setBrake"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ setCoordinateSystem ( swigCPtr ,    this ,    rightIndex ,    upIndex ,    forwardIndex )  ;", "}", "METHOD_END"], "methodName": ["setCoordinateSystem"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ setPitchControl ( swigCPtr ,    this ,    pitch )  ;", "}", "METHOD_END"], "methodName": ["setPitchControl"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ setSteeringValue ( swigCPtr ,    this ,    steering ,    wheel )  ;", "}", "METHOD_END"], "methodName": ["setSteeringValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ setUserConstraintId ( swigCPtr ,    this ,    uid )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ setUserConstraintType ( swigCPtr ,    this ,    userConstraintType )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ wheelInfo _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btWheelInfo _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setWheelInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ updateFriction ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ updateSuspension ( swigCPtr ,    this ,    deltaTime )  ;", "}", "METHOD_END"], "methodName": ["updateSuspension"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ updateVehicle ( swigCPtr ,    this ,    step )  ;", "}", "METHOD_END"], "methodName": ["updateVehicle"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ updateWheelTransform _  _ SWIG _  1  ( swigCPtr ,    this ,    wheelIndex )  ;", "}", "METHOD_END"], "methodName": ["updateWheelTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ updateWheelTransform _  _ SWIG _  0  ( swigCPtr ,    this ,    wheelIndex ,    interpolatedTransform )  ;", "}", "METHOD_END"], "methodName": ["updateWheelTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ updateWheelTransformsWS _  _ SWIG _  1  ( swigCPtr ,    this ,    btWheelInfo . getCPtr ( wheel )  ,    wheel )  ;", "}", "METHOD_END"], "methodName": ["updateWheelTransformsWS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRaycastVehicle _ updateWheelTransformsWS _  _ SWIG _  0  ( swigCPtr ,    this ,    btWheelInfo . getCPtr ( wheel )  ,    wheel ,    interpolatedTransform )  ;", "}", "METHOD_END"], "methodName": ["updateWheelTransformsWS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRaycastVehicle"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ addConstraintRef ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( c )  ,    c )  ;", "}", "METHOD_END"], "methodName": ["addConstraintRef"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyCentralForce ( swigCPtr ,    this ,    force )  ;", "}", "METHOD_END"], "methodName": ["applyCentralForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyCentralImpulse ( swigCPtr ,    this ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["applyCentralImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyDamping ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["applyDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyForce ( swigCPtr ,    this ,    force ,    rel _ pos )  ;", "}", "METHOD_END"], "methodName": ["applyForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyGravity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["applyGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyImpulse ( swigCPtr ,    this ,    impulse ,    rel _ pos )  ;", "}", "METHOD_END"], "methodName": ["applyImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyTorque ( swigCPtr ,    this ,    torque )  ;", "}", "METHOD_END"], "methodName": ["applyTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ applyTorqueImpulse ( swigCPtr ,    this ,    torque )  ;", "}", "METHOD_END"], "methodName": ["applyTorqueImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ clearForces ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearForces"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ computeAngularImpulseDenominator ( swigCPtr ,    this ,    axis )  ;", "}", "METHOD_END"], "methodName": ["computeAngularImpulseDenominator"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ computeGyroscopicForceExplicit ( swigCPtr ,    this ,    maxGyroscopicForce )  ;", "}", "METHOD_END"], "methodName": ["computeGyroscopicForceExplicit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ computeGyroscopicImpulseImplicit _ Body ( swigCPtr ,    this ,    step )  ;", "}", "METHOD_END"], "methodName": ["computeGyroscopicImpulseImplicit_Body"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ computeGyroscopicImpulseImplicit _ World ( swigCPtr ,    this ,    dt )  ;", "}", "METHOD_END"], "methodName": ["computeGyroscopicImpulseImplicit_World"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ computeImpulseDenominator ( swigCPtr ,    this ,    pos ,    normal )  ;", "}", "METHOD_END"], "methodName": ["computeImpulseDenominator"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ getAabb ( swigCPtr ,    this ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getAabb"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getAngularDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getAngularFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getAngularSleepingThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getAngularVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphaseProxy . internalTemp ( DynamicsJNI . btRigidBody _ getBroadphaseProxy ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBroadphaseProxy"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   btBroadphaseProxy . internalTemp ( DynamicsJNI . btRigidBody _ getBroadphaseProxyConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBroadphaseProxyConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getCenterOfMassPosition ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCenterOfMassPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getCenterOfMassTransform ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCenterOfMassTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBody _ getConstraintRef ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintRef"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ contactSolverType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContactSolverType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ frictionSolverType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionSolverType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getGravity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return    (  ( btRigidBody )     ( btCollisionObject . getInstance ( swigCPtr )  )  )  ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "if    ( swigCPtr    =  =     0  )", "return   null ;", "result    =     . getInstance ( swigCPtr )  ;", "if    ( result    =  =    null )", "result    =    new    ( swigCPtr ,    owner )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["getInstance"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getInvInertiaDiagLocal ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInvInertiaDiagLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getInvInertiaTensorWorld ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInvInertiaTensorWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getInvMass ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInvMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getLinearDamping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getLinearFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getLinearSleepingThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getLinearVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getLocalInertia ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLocalInertia"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   motionState ;", "}", "METHOD_END"], "methodName": ["getMotionState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBody _ getMotionStateConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMotionState ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMotionStateConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getNumConstraintRefs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumConstraintRefs"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getOrientation ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOrientation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getTotalForce ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTotalForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getTotalTorque ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTotalTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ getVelocityInLocalPoint ( swigCPtr ,    this ,    rel _ pos )  ;", "}", "METHOD_END"], "methodName": ["getVelocityInLocalPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ integrateVelocities ( swigCPtr ,    this ,    step )  ;", "}", "METHOD_END"], "methodName": ["integrateVelocities"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBody _ internalGetMotionState ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMotionState ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["internalGetMotionState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ internalSetMotionState ( swigCPtr ,    this ,    btMotionState . getCPtr ( motionState )  ,    motionState )  ;", "}", "METHOD_END"], "methodName": ["internalSetMotionState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ isInWorld ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isInWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ predictIntegratedTransform ( swigCPtr ,    this ,    step ,    predictedTransform )  ;", "}", "METHOD_END"], "methodName": ["predictIntegratedTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ proceedToTransform ( swigCPtr ,    this ,    newTrans )  ;", "}", "METHOD_END"], "methodName": ["proceedToTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "if    (  ( this . motionState )     =  =    motionState )", "return ;", "if    (  ( this . motionState )     !  =    n )", "this . motionState . release (  )  ;", "this . motionState    =    motionState ;", "if    (  ( this . motionState )     !  =    n )", "this . motionState . obtain (  )  ;", "}", "METHOD_END"], "methodName": ["refMotionState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ removeConstraintRef ( swigCPtr ,    this ,    btTypedConstraint . getCPtr ( c )  ,    c )  ;", "}", "METHOD_END"], "methodName": ["removeConstraintRef"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ saveKinematicState ( swigCPtr ,    this ,    step )  ;", "}", "METHOD_END"], "methodName": ["saveKinematicState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setAngularFactor _  _ SWIG _  0  ( swigCPtr ,    this ,    angFac )  ;", "}", "METHOD_END"], "methodName": ["setAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setAngularFactor _  _ SWIG _  1  ( swigCPtr ,    this ,    angFac )  ;", "}", "METHOD_END"], "methodName": ["setAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setAngularVelocity ( swigCPtr ,    this ,    ang _ vel )  ;", "}", "METHOD_END"], "methodName": ["setAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setCenterOfMassTransform ( swigCPtr ,    this ,    xform )  ;", "}", "METHOD_END"], "methodName": ["setCenterOfMassTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ contactSolverType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactSolverType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setDamping ( swigCPtr ,    this ,    lin _ damping ,    ang _ damping )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setFlags ( swigCPtr ,    this ,    flags )  ;", "}", "METHOD_END"], "methodName": ["setFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ frictionSolverType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionSolverType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setGravity ( swigCPtr ,    this ,    acceleration )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setInvInertiaDiagLocal ( swigCPtr ,    this ,    diagInvInertia )  ;", "}", "METHOD_END"], "methodName": ["setInvInertiaDiagLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setLinearFactor ( swigCPtr ,    this ,    linearFactor )  ;", "}", "METHOD_END"], "methodName": ["setLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setLinearVelocity ( swigCPtr ,    this ,    lin _ vel )  ;", "}", "METHOD_END"], "methodName": ["setLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setMassProps ( swigCPtr ,    this ,    mass ,    inertia )  ;", "}", "METHOD_END"], "methodName": ["setMassProps"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "refMotionState ( motionState )  ;", "interlSetMotionState ( motionState )  ;", "}", "METHOD_END"], "methodName": ["setMotionState"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setNewBroadphaseProxy ( swigCPtr ,    this ,    btBroadphaseProxy . getCPtr ( broadphaseProxy )  ,    broadphaseProxy )  ;", "}", "METHOD_END"], "methodName": ["setNewBroadphaseProxy"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ setSleepingThresholds ( swigCPtr ,    this ,    linear ,    angular )  ;", "}", "METHOD_END"], "methodName": ["setSleepingThresholds"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ translate ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["translate"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ updateDeactivation ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["updateDeactivation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBody _ updateInertiaTensor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateInertiaTensor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBody _ wantsSleeping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["wantsSleeping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ additionalAngularDampingFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalAngularDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ additionalAngularDampingThresholdSqr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalAngularDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ additionalDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ additionalDampingFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ additionalLinearDampingThresholdSqr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalLinearDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ angularDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ angularFactor _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ angularSleepingThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ angularVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ collisionObjectData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ gravity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ gravity _ acceleration _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGravity_acceleration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ invInertiaLocal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInvInertiaLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ invInertiaTensorWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInvInertiaTensorWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ inverseMass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInverseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ linearDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ linearFactor _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ linearSleepingThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ linearVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyDoubleData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ totalForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTotalForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyDoubleData _ totalTorque _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTotalTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ additionalAngularDampingFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalAngularDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ additionalAngularDampingThresholdSqr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalAngularDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ additionalDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ additionalDampingFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ additionalLinearDampingThresholdSqr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalLinearDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ angularDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ angularFactor _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ angularSleepingThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ angularVelocity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ collisionObjectData _ set ( swigCPtr ,    this ,    btCollisionObjectDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObjectData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ gravity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ gravity _ acceleration _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGravity_acceleration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ invInertiaLocal _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInvInertiaLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ invInertiaTensorWorld _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInvInertiaTensorWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ inverseMass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInverseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ linearDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ linearFactor _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ linearSleepingThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ linearVelocity _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ totalForce _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTotalForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyDoubleData _ totalTorque _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTotalTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ additionalAngularDampingFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalAngularDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ additionalAngularDampingThresholdSqr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalAngularDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ additionalDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ additionalDampingFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ additionalLinearDampingThresholdSqr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdditionalLinearDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ angularDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ angularFactor _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ angularSleepingThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ angularVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ collisionObjectData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ gravity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ gravity _ acceleration _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGravity_acceleration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ invInertiaLocal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInvInertiaLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ invInertiaTensorWorld _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInvInertiaTensorWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ inverseMass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInverseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ linearDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ linearFactor _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRigidBodyFloatData _ linearSleepingThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ linearVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ totalForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTotalForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btRigidBodyFloatData _ totalTorque _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTotalTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ additionalAngularDampingFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalAngularDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ additionalAngularDampingThresholdSqr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalAngularDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ additionalDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ additionalDampingFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalDampingFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ additionalLinearDampingThresholdSqr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdditionalLinearDampingThresholdSqr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ angularDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ angularFactor _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ angularSleepingThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ angularVelocity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ collisionObjectData _ set ( swigCPtr ,    this ,    btCollisionObjectFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObjectData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ gravity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ gravity _ acceleration _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGravity_acceleration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ invInertiaLocal _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInvInertiaLocal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ invInertiaTensorWorld _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInvInertiaTensorWorld"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ inverseMass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInverseMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ linearDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ linearFactor _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ linearSleepingThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearSleepingThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ linearVelocity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ totalForce _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTotalForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRigidBodyFloatData _ totalTorque _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTotalTorque"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRigidBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ accumulatedImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAccumulatedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ bounce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ currentLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ currentLimitError _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ currentPosition _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ enableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ hiLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHiLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ limitSoftness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ loLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLoLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ maxLimitForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxLimitForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ maxMotorForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ normalCFM _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNormalCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ stopCFM _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ stopERP _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ targetVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ isLimited ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ needApplyTorques ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["needApplyTorques"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ accumulatedImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAccumulatedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ bounce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ currentLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ currentLimitError _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ currentPosition _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ enableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ hiLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHiLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ limitSoftness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ loLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLoLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ maxLimitForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxLimitForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ maxMotorForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ normalCFM _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormalCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ stopCFM _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ stopERP _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor _ targetVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ solveAngularLimits ( swigCPtr ,    this ,    timeStep ,    axis ,    jacDiagABInv ,    btRigidBody . getCPtr ( body 0  )  ,    body 0  ,    btRigidBody . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["solveAngularLimits"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor _ testLimitValue ( swigCPtr ,    this ,    test _ value )  ;", "}", "METHOD_END"], "methodName": ["testLimitValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ bounce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ currentLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ currentLimitError _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ currentLimitErrorHi _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimitErrorHi"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ currentPosition _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ enableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ enableSpring _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ equilibriumPoint _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ hiLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHiLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ loLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLoLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ maxMotorForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ motorCFM _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ motorERP _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ servoMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ servoTarget _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ springDamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ springDampingLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ springStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ springStiffnessLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ stopCFM _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ stopERP _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ targetVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btRotationalLimitMotor 2  _ isLimited ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ bounce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ currentLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ currentLimitError _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ currentLimitErrorHi _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimitErrorHi"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ currentPosition _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentPosition"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ enableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ enableSpring _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ equilibriumPoint _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ hiLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHiLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ loLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLoLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ maxMotorForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ motorCFM _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ motorERP _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ servoMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ servoTarget _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ springDamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ springDampingLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ springStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ springStiffnessLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ stopCFM _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ stopERP _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ targetVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btRotationalLimitMotor 2  _ testLimitValue ( swigCPtr ,    this ,    test _ value )  ;", "}", "METHOD_END"], "methodName": ["testLimitValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btRotationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSequentialImpulseConstraintSolver _ btRand 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["btRand2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSequentialImpulseConstraintSolver _ btRandInt 2  ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["btRandInt2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSequentialImpulseConstraintSolver _ getActiveConstraintRowSolverGeneric ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ r _ btSolverBody _ r _ btSolverBody _ r _ q _ const _  _ btSolverConstraint _  _ btSimdScalar ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getActiveConstraintRowSolverGeneric"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSequentialImpulseConstraintSolver _ getActiveConstraintRowSolverLowerLimit ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ r _ btSolverBody _ r _ btSolverBody _ r _ q _ const _  _ btSolverConstraint _  _ btSimdScalar ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getActiveConstraintRowSolverLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSequentialImpulseConstraintSolver _ getRandSeed ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRandSeed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSequentialImpulseConstraintSolver _ getScalarConstraintRowSolverGeneric ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ r _ btSolverBody _ r _ btSolverBody _ r _ q _ const _  _ btSolverConstraint _  _ btSimdScalar ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScalarConstraintRowSolverGeneric"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSequentialImpulseConstraintSolver _ getScalarConstraintRowSolverLowerLimit ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ r _ btSolverBody _ r _ btSolverBody _ r _ q _ const _  _ btSolverConstraint _  _ btSimdScalar ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScalarConstraintRowSolverLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSequentialImpulseConstraintSolver _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSequentialImpulseConstraintSolver _ setConstraintRowSolverGeneric ( swigCPtr ,    this ,    SWIGTYPE _ p _ f _ r _ btSolverBody _ r _ btSolverBody _ r _ q _ const _  _ btSolverConstraint _  _ btSimdScalar . getCPtr ( rowSolver )  )  ;", "}", "METHOD_END"], "methodName": ["setConstraintRowSolverGeneric"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSequentialImpulseConstraintSolver _ setConstraintRowSolverLowerLimit ( swigCPtr ,    this ,    SWIGTYPE _ p _ f _ r _ btSolverBody _ r _ btSolverBody _ r _ q _ const _  _ btSolverConstraint _  _ btSimdScalar . getCPtr ( rowSolver )  )  ;", "}", "METHOD_END"], "methodName": ["setConstraintRowSolverLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSequentialImpulseConstraintSolver _ setRandSeed ( swigCPtr ,    this ,    seed )  ;", "}", "METHOD_END"], "methodName": ["setRandSeed"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSequentialImpulseConstraintSolver"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimpleDynamicsWorld _ addRigidBody _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["addRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimpleDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimpleDynamicsWorld _ addRigidBody _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body )  ,    body ,    group ,    mask )  ;", "}", "METHOD_END"], "methodName": ["addRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimpleDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimpleDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSimpleDynamicsWorld _ stepSimulation _  _ SWIG _  2  ( swigCPtr ,    this ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimpleDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSimpleDynamicsWorld _ stepSimulation _  _ SWIG _  1  ( swigCPtr ,    this ,    timeStep ,    maxSubSteps )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimpleDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSimpleDynamicsWorld _ stepSimulation _  _ SWIG _  0  ( swigCPtr ,    this ,    timeStep ,    maxSubSteps ,    fixedTimeStep )  ;", "}", "METHOD_END"], "methodName": ["stepSimulation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimpleDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimulationIslandManagerMt _ buildAndProcessIslands ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btCollisionWorld . getCPtr ( collisionWorld )  ,    collisionWorld ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btTypedConstraint _ p _ t . getCPtr ( constraints )  ,    btSimulationIslandManagerMt . IslandCallback . getCPtr ( callback )  ,    callback )  ;", "}", "METHOD_END"], "methodName": ["buildAndProcessIslands"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimulationIslandManagerMt _ buildIslands ( swigCPtr ,    this ,    btDispatcher . getCPtr ( dispatcher )  ,    dispatcher ,    btCollisionWorld . getCPtr ( colWorld )  ,    colWorld )  ;", "}", "METHOD_END"], "methodName": ["buildIslands"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSimulationIslandManagerMt _ getIslandDispatchFunction ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ p _ btAlignedObjectArray _  _ p _ btSimulationIslandManagerMt _  _ Island _  _  _ p _ btSimulationIslandManagerMt _  _ IslandCallback _  _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIslandDispatchFunction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSimulationIslandManagerMt _ getMinimumSolverBatchSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimulationIslandManagerMt _ parallelIslandDispatch ( SWIGTYPE _ p _ btAlignedObjectArrayT _ btSimulationIslandManagerMt _  _ Island _ p _ t . getCPtr ( islandsPtr )  ,    btSimulationIslandManagerMt . IslandCallback . getCPtr ( callback )  ,    callback )  ;", "}", "METHOD_END"], "methodName": ["parallelIslandDispatch"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimulationIslandManagerMt _ serialIslandDispatch ( SWIGTYPE _ p _ btAlignedObjectArrayT _ btSimulationIslandManagerMt _  _ Island _ p _ t . getCPtr ( islandsPtr )  ,    btSimulationIslandManagerMt . IslandCallback . getCPtr ( callback )  ,    callback )  ;", "}", "METHOD_END"], "methodName": ["serialIslandDispatch"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimulationIslandManagerMt _ setIslandDispatchFunction ( swigCPtr ,    this ,    SWIGTYPE _ p _ f _ p _ btAlignedObjectArray _  _ p _ btSimulationIslandManagerMt _  _ Island _  _  _ p _ btSimulationIslandManagerMt _  _ IslandCallback _  _ void . getCPtr ( func )  )  ;", "}", "METHOD_END"], "methodName": ["setIslandDispatchFunction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSimulationIslandManagerMt _ setMinimumSolverBatchSize ( swigCPtr ,    this ,    sz )  ;", "}", "METHOD_END"], "methodName": ["setMinimumSolverBatchSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSimulationIslandManagerMt"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ calculateTransforms ( swigCPtr ,    this ,    transA ,    transB )  ;", "}", "METHOD_END"], "methodName": ["calculateTransforms"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getAncorInA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAncorInA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getAncorInB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAncorInB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getAngDepth ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngDepth"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getAngularPos ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getCalculatedTransformA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCalculatedTransformA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getCalculatedTransformB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCalculatedTransformB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getDampingDirAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDampingDirAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getDampingDirLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDampingDirLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getDampingLimAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDampingLimAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getDampingLimLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDampingLimLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getDampingOrthoAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDampingOrthoAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getDampingOrthoLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDampingOrthoLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getFrameOffsetA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getFrameOffsetAConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getFrameOffsetB ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getFrameOffsetBConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrameOffsetBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ getInfo 1 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 1  . getCPtr ( info )  ,    info )  ;", "}", "METHOD_END"], "methodName": ["getInfo1NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ getInfo 2 NonVirtual ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info ,    transA ,    transB ,    linVelA ,    linVelB ,    rbAinvMass ,    rbBinvMass )  ;", "}", "METHOD_END"], "methodName": ["getInfo2NonVirtual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getLinDepth ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinDepth"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getLinearPos ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearPos"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getLowerAngLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerAngLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getLowerLinLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLinLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getMaxAngMotorForce ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxAngMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getMaxLinMotorForce ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxLinMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getPoweredAngMotor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPoweredAngMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getPoweredLinMotor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPoweredLinMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getRestitutionDirAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitutionDirAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getRestitutionDirLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitutionDirLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getRestitutionLimAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitutionLimAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getRestitutionLimLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitutionLimLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getRestitutionOrthoAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitutionOrthoAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getRestitutionOrthoLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitutionOrthoLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btSliderConstraint _ getRigidBodyAConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btSliderConstraint _ getRigidBodyBConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSoftnessDirAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftnessDirAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSoftnessDirLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftnessDirLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSoftnessLimAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftnessLimAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSoftnessLimLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftnessLimLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSoftnessOrthoAng ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftnessOrthoAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSoftnessOrthoLin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftnessOrthoLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSolveAngLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolveAngLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getSolveLinLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolveLinLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getTargetAngMotorVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTargetAngMotorVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getTargetLinMotorVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTargetLinMotorVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getUpperAngLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperAngLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getUpperLinLimit ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLinLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getUseFrameOffset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseFrameOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ getUseLinearReferenceFrameA ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setDampingDirAng ( swigCPtr ,    this ,    dampingDirAng )  ;", "}", "METHOD_END"], "methodName": ["setDampingDirAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setDampingDirLin ( swigCPtr ,    this ,    dampingDirLin )  ;", "}", "METHOD_END"], "methodName": ["setDampingDirLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setDampingLimAng ( swigCPtr ,    this ,    dampingLimAng )  ;", "}", "METHOD_END"], "methodName": ["setDampingLimAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setDampingLimLin ( swigCPtr ,    this ,    dampingLimLin )  ;", "}", "METHOD_END"], "methodName": ["setDampingLimLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setDampingOrthoAng ( swigCPtr ,    this ,    dampingOrthoAng )  ;", "}", "METHOD_END"], "methodName": ["setDampingOrthoAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setDampingOrthoLin ( swigCPtr ,    this ,    dampingOrthoLin )  ;", "}", "METHOD_END"], "methodName": ["setDampingOrthoLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setFrames ( swigCPtr ,    this ,    frameA ,    frameB )  ;", "}", "METHOD_END"], "methodName": ["setFrames"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setLowerAngLimit ( swigCPtr ,    this ,    lowerLimit )  ;", "}", "METHOD_END"], "methodName": ["setLowerAngLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setLowerLinLimit ( swigCPtr ,    this ,    lowerLimit )  ;", "}", "METHOD_END"], "methodName": ["setLowerLinLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setMaxAngMotorForce ( swigCPtr ,    this ,    maxAngMotorForce )  ;", "}", "METHOD_END"], "methodName": ["setMaxAngMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setMaxLinMotorForce ( swigCPtr ,    this ,    maxLinMotorForce )  ;", "}", "METHOD_END"], "methodName": ["setMaxLinMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setPoweredAngMotor ( swigCPtr ,    this ,    onOff )  ;", "}", "METHOD_END"], "methodName": ["setPoweredAngMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setPoweredLinMotor ( swigCPtr ,    this ,    onOff )  ;", "}", "METHOD_END"], "methodName": ["setPoweredLinMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setRestitutionDirAng ( swigCPtr ,    this ,    restitutionDirAng )  ;", "}", "METHOD_END"], "methodName": ["setRestitutionDirAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setRestitutionDirLin ( swigCPtr ,    this ,    restitutionDirLin )  ;", "}", "METHOD_END"], "methodName": ["setRestitutionDirLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setRestitutionLimAng ( swigCPtr ,    this ,    restitutionLimAng )  ;", "}", "METHOD_END"], "methodName": ["setRestitutionLimAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setRestitutionLimLin ( swigCPtr ,    this ,    restitutionLimLin )  ;", "}", "METHOD_END"], "methodName": ["setRestitutionLimLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setRestitutionOrthoAng ( swigCPtr ,    this ,    restitutionOrthoAng )  ;", "}", "METHOD_END"], "methodName": ["setRestitutionOrthoAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setRestitutionOrthoLin ( swigCPtr ,    this ,    restitutionOrthoLin )  ;", "}", "METHOD_END"], "methodName": ["setRestitutionOrthoLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setSoftnessDirAng ( swigCPtr ,    this ,    softnessDirAng )  ;", "}", "METHOD_END"], "methodName": ["setSoftnessDirAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setSoftnessDirLin ( swigCPtr ,    this ,    softnessDirLin )  ;", "}", "METHOD_END"], "methodName": ["setSoftnessDirLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setSoftnessLimAng ( swigCPtr ,    this ,    softnessLimAng )  ;", "}", "METHOD_END"], "methodName": ["setSoftnessLimAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setSoftnessLimLin ( swigCPtr ,    this ,    softnessLimLin )  ;", "}", "METHOD_END"], "methodName": ["setSoftnessLimLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setSoftnessOrthoAng ( swigCPtr ,    this ,    softnessOrthoAng )  ;", "}", "METHOD_END"], "methodName": ["setSoftnessOrthoAng"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setSoftnessOrthoLin ( swigCPtr ,    this ,    softnessOrthoLin )  ;", "}", "METHOD_END"], "methodName": ["setSoftnessOrthoLin"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setTargetAngMotorVelocity ( swigCPtr ,    this ,    targetAngMotorVelocity )  ;", "}", "METHOD_END"], "methodName": ["setTargetAngMotorVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setTargetLinMotorVelocity ( swigCPtr ,    this ,    targetLinMotorVelocity )  ;", "}", "METHOD_END"], "methodName": ["setTargetLinMotorVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setUpperAngLimit ( swigCPtr ,    this ,    upperLimit )  ;", "}", "METHOD_END"], "methodName": ["setUpperAngLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setUpperLinLimit ( swigCPtr ,    this ,    upperLimit )  ;", "}", "METHOD_END"], "methodName": ["setUpperLinLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ setUseFrameOffset ( swigCPtr ,    this ,    frameOffsetOnOff )  ;", "}", "METHOD_END"], "methodName": ["setUseFrameOffset"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ testAngLimits ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["testAngLimits"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraint _ testLinLimits ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["testLinLimits"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintData _ angularLowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintData _ angularUpperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintData _ linearLowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintData _ linearUpperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSliderConstraintData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSliderConstraintData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSliderConstraintData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintData _ useLinearReferenceFrameA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintData _ useOffsetForConstraintFrame _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ angularLowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ angularUpperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ linearLowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ linearUpperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ useLinearReferenceFrameA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintData _ useOffsetForConstraintFrame _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintDoubleData _ angularLowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintDoubleData _ angularUpperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintDoubleData _ linearLowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintDoubleData _ linearUpperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSliderConstraintDoubleData _ rbAFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSliderConstraintDoubleData _ rbBFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSliderConstraintDoubleData _ typeConstraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraintDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintDoubleData _ useLinearReferenceFrameA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSliderConstraintDoubleData _ useOffsetForConstraintFrame _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ angularLowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ angularUpperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ linearLowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ linearUpperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ rbAFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbAFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ rbBFrame _ set ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbBFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ typeConstraintData _ set ( swigCPtr ,    this ,    btTypedConstraintDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTypeConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ useLinearReferenceFrameA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseLinearReferenceFrameA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSliderConstraintDoubleData _ useOffsetForConstraintFrame _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUseOffsetForConstraintFrame"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSliderConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolve2LinearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolve 2 LinearConstraint _ resolveBilateralPairConstraint ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body 0  )  ,    body 0  ,    btRigidBody . getCPtr ( body 1  )  ,    body 1  ,    world 2 A ,    world 2 B ,    invInertiaADiag ,    invMassA ,    linvelA ,    angvelA ,    rel _ posA 1  ,    invInertiaBDiag ,    invMassB ,    linvelB ,    angvelB ,    rel _ posA 2  ,    depthA ,    normalA ,    rel _ posB 1  ,    rel _ posB 2  ,    depthB ,    normalB ,    SWIGTYPE _ p _ float . getCPtr ( imp 0  )  ,    SWIGTYPE _ p _ float . getCPtr ( imp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveBilateralPairConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolve2LinearConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolve 2 LinearConstraint _ resolveUnilateralPairConstraint ( swigCPtr ,    this ,    btRigidBody . getCPtr ( body 0  )  ,    body 0  ,    btRigidBody . getCPtr ( body 1  )  ,    body 1  ,    world 2 A ,    world 2 B ,    invInertiaADiag ,    invMassA ,    linvelA ,    angvelA ,    rel _ posA 1  ,    invInertiaBDiag ,    invMassB ,    linvelB ,    angvelB ,    rel _ posA 2  ,    depthA ,    normalA ,    rel _ posB 1  ,    rel _ posB 2  ,    depthB ,    normalB ,    SWIGTYPE _ p _ float . getCPtr ( imp 0  )  ,    SWIGTYPE _ p _ float . getCPtr ( imp 1  )  )  ;", "}", "METHOD_END"], "methodName": ["resolveUnilateralPairConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolve2LinearConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolveProjectedGaussSeidel"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolveProjectedGaussSeidel _ leastSquaresResidual _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLeastSquaresResidual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolveProjectedGaussSeidel"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolveProjectedGaussSeidel _ leastSquaresResidualThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLeastSquaresResidualThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolveProjectedGaussSeidel"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolveProjectedGaussSeidel _ leastSquaresResidual _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLeastSquaresResidual"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolveProjectedGaussSeidel"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolveProjectedGaussSeidel _ leastSquaresResidualThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLeastSquaresResidualThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolveProjectedGaussSeidel"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolveProjectedGaussSeidel _ solveMLCP _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolveProjectedGaussSeidel"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolveProjectedGaussSeidel _ solveMLCP _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( A )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( b )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( x )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( lo )  ,    SWIGTYPE _ p _ btVectorXT _ float _ t . getCPtr ( hi )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( limitDependency )  ,    numIterations ,    useSparsity )  ;", "}", "METHOD_END"], "methodName": ["solveMLCP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolveProjectedGaussSeidel"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ applyImpulse ( swigCPtr ,    this ,    linearComponent ,    angularComponent ,    impulseMagnitude )  ;", "}", "METHOD_END"], "methodName": ["applyImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ angularFactor _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ angularVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ getAngularVelocity ( swigCPtr ,    this ,    angVel )  ;", "}", "METHOD_END"], "methodName": ["getAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ deltaAngularVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDeltaAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ deltaLinearVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDeltaLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ externalForceImpulse _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getExternalForceImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ externalTorqueImpulse _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getExternalTorqueImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ invMass _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInvMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ linearFactor _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ linearVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btSolverBody _ originalBody _ get ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOriginalBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ pushVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPushVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ turnVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTurnVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ getVelocityInLocalPointNoDelta ( swigCPtr ,    this ,    rel _ pos ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["getVelocityInLocalPointNoDelta"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ getVelocityInLocalPointObsolete ( swigCPtr ,    this ,    rel _ pos ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["getVelocityInLocalPointObsolete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverBody _ worldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ internalApplyImpulse ( swigCPtr ,    this ,    linearComponent ,    angularComponent ,    impulseMagnitude )  ;", "}", "METHOD_END"], "methodName": ["internalApplyImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ internalApplyPushImpulse ( swigCPtr ,    this ,    linearComponent ,    angularComponent ,    impulseMagnitude )  ;", "}", "METHOD_END"], "methodName": ["internalApplyPushImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ internalGetAngularFactor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ internalGetAngularVelocity ( swigCPtr ,    this ,    angVel )  ;", "}", "METHOD_END"], "methodName": ["internalGetAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ internalGetDeltaAngularVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetDeltaAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ internalGetDeltaLinearVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetDeltaLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ internalGetInvMass ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetInvMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ internalGetPushVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetPushVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ internalGetTurnVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetTurnVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ internalGetVelocityInLocalPointObsolete ( swigCPtr ,    this ,    rel _ pos ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["internalGetVelocityInLocalPointObsolete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ internalSetInvMass ( swigCPtr ,    this ,    invMass )  ;", "}", "METHOD_END"], "methodName": ["internalSetInvMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverBody _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ angularFactor _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ angularVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ deltaAngularVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeltaAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ deltaLinearVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeltaLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ externalForceImpulse _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setExternalForceImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ externalTorqueImpulse _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setExternalTorqueImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ invMass _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInvMass"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ linearFactor _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearFactor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ linearVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ originalBody _ set ( swigCPtr ,    this ,    btRigidBody . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOriginalBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ pushVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPushVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ turnVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTurnVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ worldTransform _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ writebackVelocity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["writebackVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverBody _ writebackVelocityAndTransform ( swigCPtr ,    this ,    timeStep ,    splitImpulseTurnErp )  ;", "}", "METHOD_END"], "methodName": ["writebackVelocityAndTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverConstraint _ angularComponentA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularComponentA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverConstraint _ angularComponentB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAngularComponentB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ appliedImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ appliedPushImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedPushImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ cfm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverConstraint _ contactNormal 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactNormal1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverConstraint _ contactNormal 2  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getContactNormal2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ friction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ frictionIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ jacDiagABInv _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJacDiagABInv"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ lowerLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ numRowsForNonContactConstraint _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumRowsForNonContactConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ originalContactPoint _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOriginalContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ overrideNumSolverIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverConstraint _ relpos 1 CrossNormal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRelpos1CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btSolverConstraint _ relpos 2 CrossNormal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRelpos2CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ rhs _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRhs"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ rhsPenetration _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRhsPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ solverBodyIdA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverBodyIdA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ solverBodyIdB _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverBodyIdB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ unusedPadding 4  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUnusedPadding4"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ upperLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btSolverConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ angularComponentA _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularComponentA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ angularComponentB _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularComponentB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ appliedImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ appliedPushImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedPushImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ cfm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCfm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ contactNormal 1  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactNormal1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ contactNormal 2  _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContactNormal2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ friction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFriction"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ frictionIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionIndex"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ jacDiagABInv _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJacDiagABInv"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ lowerLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ numRowsForNonContactConstraint _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumRowsForNonContactConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ originalContactPoint _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOriginalContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ overrideNumSolverIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ relpos 1 CrossNormal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelpos1CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ relpos 2 CrossNormal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelpos2CrossNormal"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ rhs _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRhs"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ rhsPenetration _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRhsPenetration"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ solverBodyIdA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverBodyIdA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ solverBodyIdB _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSolverBodyIdB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ unusedPadding 4  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUnusedPadding4"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btSolverConstraint _ upperLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btSolverConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ accumulatedImpulse _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAccumulatedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ currentLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ currentLimitError _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ currentLinearDiff _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLinearDiff"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ enableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ limitSoftness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ lowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ maxMotorForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ normalCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormalCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ restitution _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ stopCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ stopERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ targetVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor _ upperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ isLimited ( swigCPtr ,    this ,    limitIndex )  ;", "}", "METHOD_END"], "methodName": ["isLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ needApplyForce ( swigCPtr ,    this ,    limitIndex )  ;", "}", "METHOD_END"], "methodName": ["needApplyForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ accumulatedImpulse _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAccumulatedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ currentLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ currentLimitError _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ currentLinearDiff _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLinearDiff"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ enableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ limitSoftness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLimitSoftness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ lowerLimit _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ maxMotorForce _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ normalCFM _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormalCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ restitution _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestitution"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ stopCFM _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ stopERP _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ targetVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor _ upperLimit _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ solveLinearAxis ( swigCPtr ,    this ,    timeStep ,    jacDiagABInv ,    btRigidBody . getCPtr ( body 1  )  ,    body 1  ,    pointInA ,    btRigidBody . getCPtr ( body 2  )  ,    body 2  ,    pointInB ,    limit _ index ,    axis _ normal _ on _ a ,    anchorPos )  ;", "}", "METHOD_END"], "methodName": ["solveLinearAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor _ testLimitValue ( swigCPtr ,    this ,    limitIndex ,    test _ value )  ;", "}", "METHOD_END"], "methodName": ["testLimitValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ bounce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor 2  _ currentLimit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ currentLimitError _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ currentLimitErrorHi _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLimitErrorHi"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ currentLinearDiff _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCurrentLinearDiff"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor 2  _ enableMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor 2  _ enableSpring _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ equilibriumPoint _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ lowerLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ maxMotorForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ motorCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ motorERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor 2  _ servoMotor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ servoTarget _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ springDamping _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor 2  _ springDampingLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ springStiffness _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor 2  _ springStiffnessLimited _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ stopCFM _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ stopERP _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ targetVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTranslationalLimitMotor 2  _ upperLimit _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTranslationalLimitMotor 2  _ isLimited ( swigCPtr ,    this ,    limitIndex )  ;", "}", "METHOD_END"], "methodName": ["isLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ bounce _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBounce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ currentLimit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ currentLimitError _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimitError"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ currentLimitErrorHi _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLimitErrorHi"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ currentLinearDiff _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCurrentLinearDiff"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ enableMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ enableSpring _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEnableSpring"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ equilibriumPoint _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEquilibriumPoint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ lowerLimit _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ maxMotorForce _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxMotorForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ motorCFM _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMotorCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ motorERP _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMotorERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ servoMotor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setServoMotor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ servoTarget _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setServoTarget"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ springDamping _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringDamping"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ springDampingLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringDampingLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ springStiffness _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ springStiffnessLimited _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSpringStiffnessLimited"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ stopCFM _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopCFM"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ stopERP _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStopERP"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ targetVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTargetVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ upperLimit _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTranslationalLimitMotor 2  _ testLimitValue ( swigCPtr ,    this ,    limitIndex ,    test _ value )  ;", "}", "METHOD_END"], "methodName": ["testLimitValue"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTranslationalLimitMotor2"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ buildJacobian ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["buildJacobian"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ calculateSerializeBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["calculateSerializeBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ enableFeedback ( swigCPtr ,    this ,    needsFeedback )  ;", "}", "METHOD_END"], "methodName": ["enableFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getAppliedImpulse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getBreakingImpulseThreshold ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getConstraintType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getDbgDrawSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btTypedConstraint _ getFixedBody (  )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFixedBody"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ getInfo 1  ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 1  . getCPtr ( info )  ,    info )  ;", "}", "METHOD_END"], "methodName": ["getInfo1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ getInfo 2  ( swigCPtr ,    this ,    btTypedConstraint . btConstraintInfo 2  . getCPtr ( info )  ,    info )  ;", "}", "METHOD_END"], "methodName": ["getInfo2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraint _ getJointFeedback ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btJointFeedback ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJointFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraint _ getJointFeedbackConst ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btJointFeedback ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJointFeedbackConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getOverrideNumSolverIterations ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    axis )  ;", "}", "METHOD_END"], "methodName": ["getParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btTypedConstraint _ getRigidBodyA ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btTypedConstraint _ getRigidBodyAConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyAConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btTypedConstraint _ getRigidBodyB ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( DynamicsJNI . btTypedConstraint _ getRigidBodyBConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyBConst"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getUid ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUid"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getUserConstraintId ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getUserConstraintPtr ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ getUserConstraintType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ internalGetAppliedImpulse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["internalGetAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ internalSetAppliedImpulse ( swigCPtr ,    this ,    appliedImpulse )  ;", "}", "METHOD_END"], "methodName": ["internalSetAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ isEnabled ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ needsFeedback ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["needsFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraint _ serialize ( swigCPtr ,    this ,    dataBuffer ,    btSerializer . getCPtr ( serializer )  ,    serializer )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setBreakingImpulseThreshold ( swigCPtr ,    this ,    threshold )  ;", "}", "METHOD_END"], "methodName": ["setBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setDbgDrawSize ( swigCPtr ,    this ,    dbgDrawSize )  ;", "}", "METHOD_END"], "methodName": ["setDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setEnabled ( swigCPtr ,    this ,    enabled )  ;", "}", "METHOD_END"], "methodName": ["setEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setJointFeedback ( swigCPtr ,    this ,    btJointFeedback . getCPtr ( jointFeedback )  ,    jointFeedback )  ;", "}", "METHOD_END"], "methodName": ["setJointFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setOverrideNumSolverIterations ( swigCPtr ,    this ,    overideNumIterations )  ;", "}", "METHOD_END"], "methodName": ["setOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setParam _  _ SWIG _  1  ( swigCPtr ,    this ,    num ,    value )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setParam _  _ SWIG _  0  ( swigCPtr ,    this ,    num ,    value ,    axis )  ;", "}", "METHOD_END"], "methodName": ["setParam"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setUserConstraintId ( swigCPtr ,    this ,    uid )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setUserConstraintPtr ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setUserConstraintType ( swigCPtr ,    this ,    userConstraintType )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ setupSolverConstraint ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSolverConstraint _ t . getCPtr ( ca )  ,    solverBodyA ,    solverBodyB ,    timeStep )  ;", "}", "METHOD_END"], "methodName": ["setupSolverConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraint _ solveConstraintObsolete ( swigCPtr ,    this ,    btSolverBody . getCPtr ( arg 0  )  ,    arg 0  ,    btSolverBody . getCPtr ( arg 1  )  ,    arg 1  ,    arg 2  )  ;", "}", "METHOD_END"], "methodName": ["solveConstraintObsolete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ appliedImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ breakingImpulseThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ dbgDrawSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ disableCollisionsBetweenLinkedBodies _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDisableCollisionsBetweenLinkedBodies"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ isEnabled _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIsEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ name _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ needsFeedback _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNeedsFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ objectType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ overrideNumSolverIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraintData _ rbA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRigidBodyFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraintData _ rbB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRigidBodyFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ userConstraintId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintData _ userConstraintType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ appliedImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ breakingImpulseThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ dbgDrawSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ disableCollisionsBetweenLinkedBodies _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDisableCollisionsBetweenLinkedBodies"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ isEnabled _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIsEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ name _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ needsFeedback _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNeedsFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ objectType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ overrideNumSolverIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ rbA _ set ( swigCPtr ,    this ,    btRigidBodyFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ rbB _ set ( swigCPtr ,    this ,    btRigidBodyFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ userConstraintId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintData _ userConstraintType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ appliedImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ breakingImpulseThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ dbgDrawSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ disableCollisionsBetweenLinkedBodies _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDisableCollisionsBetweenLinkedBodies"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ isEnabled _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIsEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ name _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ needsFeedback _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNeedsFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ objectType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ overrideNumSolverIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ padding _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraintDoubleData _ rbA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRigidBodyDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraintDoubleData _ rbB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRigidBodyDoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ userConstraintId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintDoubleData _ userConstraintType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ appliedImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ breakingImpulseThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ dbgDrawSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ disableCollisionsBetweenLinkedBodies _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDisableCollisionsBetweenLinkedBodies"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ isEnabled _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIsEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ name _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ needsFeedback _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNeedsFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ objectType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ overrideNumSolverIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ padding _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPadding"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ rbA _ set ( swigCPtr ,    this ,    btRigidBodyDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ rbB _ set ( swigCPtr ,    this ,    btRigidBodyDoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ userConstraintId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintDoubleData _ userConstraintType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ appliedImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ breakingImpulseThreshold _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ dbgDrawSize _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ disableCollisionsBetweenLinkedBodies _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDisableCollisionsBetweenLinkedBodies"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ isEnabled _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIsEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ name _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ needsFeedback _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNeedsFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ objectType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ overrideNumSolverIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraintFloatData _ rbA _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRigidBodyFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btTypedConstraintFloatData _ rbB _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRigidBodyFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRbB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ userConstraintId _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btTypedConstraintFloatData _ userConstraintType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ appliedImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAppliedImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ breakingImpulseThreshold _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBreakingImpulseThreshold"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ dbgDrawSize _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDbgDrawSize"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ disableCollisionsBetweenLinkedBodies _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDisableCollisionsBetweenLinkedBodies"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ isEnabled _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIsEnabled"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ name _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setName"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ needsFeedback _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNeedsFeedback"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ objectType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ overrideNumSolverIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOverrideNumSolverIterations"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ rbA _ set ( swigCPtr ,    this ,    btRigidBodyFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbA"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ rbB _ set ( swigCPtr ,    this ,    btRigidBodyFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRbB"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ userConstraintId _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintId"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btTypedConstraintFloatData _ userConstraintType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserConstraintType"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btTypedConstraintFloatData"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ getAnchor ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ getAnchor 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAnchor2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ getAngle 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngle1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ getAngle 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngle2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ getAxis 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAxis1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ getAxis 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAxis2"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btUniversalConstraint _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btUniversalConstraint _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btUniversalConstraint _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btUniversalConstraint _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btUniversalConstraint _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btUniversalConstraint _ setAxis ( swigCPtr ,    this ,    axis 1  ,    axis 2  )  ;", "}", "METHOD_END"], "methodName": ["setAxis"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btUniversalConstraint _ setLowerLimit ( swigCPtr ,    this ,    ang 1 min ,    ang 2 min )  ;", "}", "METHOD_END"], "methodName": ["setLowerLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btUniversalConstraint _ setUpperLimit ( swigCPtr ,    this ,    ang 1 max ,    ang 2 max )  ;", "}", "METHOD_END"], "methodName": ["setUpperLimit"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btUniversalConstraint"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btVehicleRaycaster _ castRay ( swigCPtr ,    this ,    from ,    to ,    btVehicleRaycaster . btVehicleRaycasterResult . getCPtr ( result )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["castRay"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btVehicleRaycaster"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btVehicleRaycaster"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ bIsFrontWheel _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBIsFrontWheel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ brake _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBrake"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfo _ chassisConnectionPointCS _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChassisConnectionPointCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ clientInfo _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClientInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ clippedInvContactDotSuspension _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClippedInvContactDotSuspension"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ deltaRotation _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDeltaRotation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ engineForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getEngineForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ frictionSlip _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionSlip"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ maxSuspensionForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxSuspensionForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ maxSuspensionTravelCm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxSuspensionTravelCm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfo _ raycastInfo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btWheelInfo . RaycastInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRaycastInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ rollInfluence _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRollInfluence"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ rotation _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRotation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ skidInfo _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSkidInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ steering _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSteering"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ suspensionRelativeVelocity _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSuspensionRelativeVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ getSuspensionRestLength ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSuspensionRestLength"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ suspensionRestLength 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSuspensionRestLength1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ suspensionStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSuspensionStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfo _ wheelAxleCS _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWheelAxleCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfo _ wheelDirectionCS _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWheelDirectionCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ wheelsDampingCompression _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWheelsDampingCompression"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ wheelsDampingRelaxation _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWheelsDampingRelaxation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ wheelsRadius _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWheelsRadius"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfo _ wheelsSuspensionForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWheelsSuspensionForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfo _ worldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ bIsFrontWheel _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBIsFrontWheel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ brake _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBrake"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ chassisConnectionPointCS _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChassisConnectionPointCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ clientInfo _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClientInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ clippedInvContactDotSuspension _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClippedInvContactDotSuspension"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ deltaRotation _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDeltaRotation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ engineForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEngineForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ frictionSlip _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionSlip"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ maxSuspensionForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxSuspensionForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ maxSuspensionTravelCm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxSuspensionTravelCm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ raycastInfo _ set ( swigCPtr ,    this ,    btWheelInfo . RaycastInfo . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRaycastInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ rollInfluence _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRollInfluence"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ rotation _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRotation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ skidInfo _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSkidInfo"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ steering _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSteering"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ suspensionRelativeVelocity _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSuspensionRelativeVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ suspensionRestLength 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSuspensionRestLength1"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ suspensionStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSuspensionStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ wheelAxleCS _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelAxleCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ wheelDirectionCS _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelDirectionCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ wheelsDampingCompression _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelsDampingCompression"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ wheelsDampingRelaxation _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelsDampingRelaxation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ wheelsRadius _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelsRadius"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ wheelsSuspensionForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelsSuspensionForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ worldTransform _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfo _ updateWheel ( swigCPtr ,    this ,    btRigidBody . getCPtr ( chassis )  ,    chassis ,    btWheelInfo . RaycastInfo . getCPtr ( raycastInfo )  ,    raycastInfo )  ;", "}", "METHOD_END"], "methodName": ["updateWheel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ bIsFrontWheel _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBIsFrontWheel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfoConstructionInfo _ chassisConnectionCS _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChassisConnectionCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ frictionSlip _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFrictionSlip"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ maxSuspensionForce _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxSuspensionForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ maxSuspensionTravelCm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxSuspensionTravelCm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ suspensionRestLength _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSuspensionRestLength"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ suspensionStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSuspensionStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfoConstructionInfo _ wheelAxleCS _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWheelAxleCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    DynamicsJNI . btWheelInfoConstructionInfo _ wheelDirectionCS _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWheelDirectionCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ wheelRadius _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWheelRadius"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ wheelsDampingCompression _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWheelsDampingCompression"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   DynamicsJNI . btWheelInfoConstructionInfo _ wheelsDampingRelaxation _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWheelsDampingRelaxation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ bIsFrontWheel _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBIsFrontWheel"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ chassisConnectionCS _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChassisConnectionCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ frictionSlip _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFrictionSlip"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ maxSuspensionForce _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxSuspensionForce"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ maxSuspensionTravelCm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxSuspensionTravelCm"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ suspensionRestLength _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSuspensionRestLength"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ suspensionStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSuspensionStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ wheelAxleCS _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelAxleCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ wheelDirectionCS _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelDirectionCS"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ wheelRadius _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelRadius"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ wheelsDampingCompression _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelsDampingCompression"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "DynamicsJNI . btWheelInfoConstructionInfo _ wheelsDampingRelaxation _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWheelsDampingRelaxation"], "fileName": "com.badlogic.gdx.physics.bullet.dynamics.btWheelInfoConstructionInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.CloneTreeCreator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.CoilCreator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.DillCreator"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . CreateMultiBodyTree ( MultiBodyTreeCreator . getCPtr ( creator )  ,    creator )  ;", "return   cPtr    =  =     0     ?    null    :    new   MultiBodyTree ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreateMultiBodyTree"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "assert   pos _ error . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   acc _ error . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   JNI . compareInverseAndForwardDynamics ( SWIGTYPE _ p _ vecx . getCPtr ( q )  ,    SWIGTYPE _ p _ vecx . getCPtr ( u )  ,    SWIGTYPE _ p _ vecx . getCPtr ( dot _ u )  ,    gravity ,    verbose ,    btMultiBody . getCPtr ( btmb )  ,    btmb ,    MultiBodyTree . getCPtr ( id _ tree )  ,    id _ tree ,    pos _ error ,    acc _ error )  ;", "}", "}", "METHOD_END"], "methodName": ["compareInverseAndForwardDynamics"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ vec 3  ( ExtrasJNI . randomAxis (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["randomAxis"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . randomFloat ( low ,    high )  ;", "}", "METHOD_END"], "methodName": ["randomFloat"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ mat 3  3  ( ExtrasJNI . randomInertiaMatrix (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["randomInertiaMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ vec 3  ( ExtrasJNI . randomInertiaPrincipal (  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["randomInertiaPrincipal"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . randomInit _  _ SWIG _  0  (  )  ;", "}", "METHOD_END"], "methodName": ["randomInit"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . randomInit _  _ SWIG _  1  ( seed )  ;", "}", "METHOD_END"], "methodName": ["randomInit"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . randomInt ( low ,    high )  ;", "}", "METHOD_END"], "methodName": ["randomInt"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . randomMass (  )  ;", "}", "METHOD_END"], "methodName": ["randomMass"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . writeGraphvizDotFile ( MultiBodyTree . getCPtr ( tree )  ,    tree ,    MultiBodyNameMap . getCPtr ( map )  ,    map ,    filename )  ;", "}", "METHOD_END"], "methodName": ["writeGraphvizDotFile"], "fileName": "com.badlogic.gdx.physics.bullet.extras.Extras"}, {"methodBody": ["METHOD_START", "{", "return   jself . convertAllObjects (  ( file    =  =     0     ?    null    :    new   SWIGTYPE _ p _ bParse _  _ btBulletFile ( file ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_convertAllObjects"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createBoxShape ( halfExtents )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createBoxShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btBvhTriangleMeshShape . getCPtr ( jself . createBvhTriangleMeshShape (  ( trimesh    =  =     0     ?    null    :    new   btStridingMeshInterface ( trimesh ,    false )  )  ,     ( bvh    =  =     0     ?    null    :    new   btOptimizedBvh ( bvh ,    false )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createBvhTriangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createCapsuleShapeX ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCapsuleShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createCapsuleShapeY ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCapsuleShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createCapsuleShapeZ ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCapsuleShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getCPtr ( jself . createCollisionObject ( startTransform ,     ( shape    =  =     0     ?    null    :    new   btCollisionShape ( shape ,    false )  )  ,    bodyName )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCompoundShape . getCPtr ( jself . createCompoundShape (  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCompoundShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createConeShapeX ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createConeShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createConeShapeY ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createConeShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createConeShapeZ ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createConeShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btConeTwistConstraint . getCPtr ( jself . createConeTwistConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    rbAFrame ,    rbBFrame )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createConeTwistConstraint__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btConeTwistConstraint . getCPtr ( jself . createConeTwistConstraint ( new   btRigidBody ( rbA ,    false )  ,    rbAFrame )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createConeTwistConstraint__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btConvexHullShape . getCPtr ( jself . createConvexHullShape (  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createConvexHullShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createConvexTriangleMeshShape (  ( trimesh    =  =     0     ?    null    :    new   btStridingMeshInterface ( trimesh ,    false )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createConvexTriangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createCylinderShapeX ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCylinderShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createCylinderShapeY ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCylinderShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createCylinderShapeZ ( radius ,    height )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createCylinderShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btGearConstraint . getCPtr ( jself . createGearConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    axisInA ,    axisInB ,    ratio )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createGearConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btGeneric 6 DofConstraint . getCPtr ( jself . createGeneric 6 DofConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    frameInA ,    frameInB ,    useLinearReferenceFrameA )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createGeneric6DofConstraint__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btGeneric 6 DofConstraint . getCPtr ( jself . createGeneric 6 DofConstraint ( new   btRigidBody ( rbB ,    false )  ,    frameInB ,    useLinearReferenceFrameB )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createGeneric6DofConstraint__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btGeneric 6 DofSpring 2 Constraint . getCPtr ( jself . createGeneric 6 DofSpring 2 Constraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    frameInA ,    frameInB ,    rotateOrder )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createGeneric6DofSpring2Constraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btGeneric 6 DofSpringConstraint . getCPtr ( jself . createGeneric 6 DofSpringConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    frameInA ,    frameInB ,    useLinearReferenceFrameA )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createGeneric6DofSpringConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btGImpactMeshShape . getCPtr ( jself . createGimpactShape (  ( trimesh    =  =     0     ?    null    :    new   btStridingMeshInterface ( trimesh ,    false )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createGimpactShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btHingeConstraint . getCPtr ( jself . createHingeConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    rbAFrame ,    rbBFrame ,    useReferenceFrameA )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createHingeConstraint__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btHingeConstraint . getCPtr ( jself . createHingeConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    rbAFrame ,    rbBFrame )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createHingeConstraint__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btHingeConstraint . getCPtr ( jself . createHingeConstraint ( new   btRigidBody ( rbA ,    false )  ,    rbAFrame ,    useReferenceFrameA )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createHingeConstraint__SWIG_2"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btHingeConstraint . getCPtr ( jself . createHingeConstraint ( new   btRigidBody ( rbA ,    false )  ,    rbAFrame )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createHingeConstraint__SWIG_3"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btTriangleIndexVertexArray . getCPtr ( jself . createMeshInterface ( new   btStridingMeshInterfaceData ( meshData ,    false )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btOptimizedBvh . getCPtr ( jself . createOptimizedBvh (  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createOptimizedBvh"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createPlaneShape ( planeNormal ,    planeConstant )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createPlaneShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btPoint 2 PointConstraint . getCPtr ( jself . createPoint 2 PointConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    pivotInA ,    pivotInB )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createPoint2PointConstraint__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btPoint 2 PointConstraint . getCPtr ( jself . createPoint 2 PointConstraint ( new   btRigidBody ( rbA ,    false )  ,    pivotInA )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createPoint2PointConstraint__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getCPtr ( jself . createRigidBody ( isDynamic ,    mass ,    startTransform ,     ( shape    =  =     0     ?    null    :    new   btCollisionShape ( shape ,    false )  )  ,    bodyName )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btScaledBvhTriangleMeshShape . getCPtr ( jself . createScaledTrangleMeshShape (  ( meshShape    =  =     0     ?    null    :    new   btBvhTriangleMeshShape ( meshShape ,    false )  )  ,    localScalingbtBvhTriangleMeshShape )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createScaledTrangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btSliderConstraint . getCPtr ( jself . createSliderConstraint ( new   btRigidBody ( rbA ,    false )  ,    new   btRigidBody ( rbB ,    false )  ,    frameInA ,    frameInB ,    useLinearReferenceFrameA )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createSliderConstraint__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btSliderConstraint . getCPtr ( jself . createSliderConstraint ( new   btRigidBody ( rbB ,    false )  ,    frameInB ,    useLinearReferenceFrameA )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createSliderConstraint__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionShape . getCPtr ( jself . createSphereShape ( radius )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createSphereShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btStridingMeshInterfaceData . getCPtr ( jself . createStridingMeshInterfaceData (  ( interfaceData    =  =     0     ?    null    :    new   btStridingMeshInterfaceData ( interfaceData ,    false )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createStridingMeshInterfaceData"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btTriangleInfoMap . getCPtr ( jself . createTriangleInfoMap (  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   btTriangleIndexVertexArray . getCPtr ( jself . createTriangleMeshContainer (  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_createTriangleMeshContainer"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "jself . deleteAllData (  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_deleteAllData"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "jself . setDynamicsWorldInfo ( gravity ,    new   btContactSolverInfo ( solverInfo ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btBulletWorldImporter_setDynamicsWorldInfo"], "fileName": "com.badlogic.gdx.physics.bullet.extras.ExtrasJNI"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . MultiBodyNameMap _ addBody ( swigCPtr ,    this ,    index ,    SWIGTYPE _ p _ std _  _ string . getCPtr ( name )  )  ;", "}", "METHOD_END"], "methodName": ["addBody"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . MultiBodyNameMap _ addJoint ( swigCPtr ,    this ,    index ,    SWIGTYPE _ p _ std _  _ string . getCPtr ( name )  )  ;", "}", "METHOD_END"], "methodName": ["addJoint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "assert   index . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   ExtrasJNI _ getBodyIndex ( swigCPtr ,    this ,    SWIGTYPE _ p _ std _  _ string . getCPtr ( name )  ,    index )  ;", "}", "}", "METHOD_END"], "methodName": ["getBodyIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . MultiBodyNameMap _ getBodyName ( swigCPtr ,    this ,    index ,    SWIGTYPE _ p _ std _  _ string . getCPtr ( name )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyName"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "assert   index . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   ExtrasJNI _ getJointIndex ( swigCPtr ,    this ,    SWIGTYPE _ p _ std _  _ string . getCPtr ( name )  ,    index )  ;", "}", "}", "METHOD_END"], "methodName": ["getJointIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . MultiBodyNameMap _ getJointName ( swigCPtr ,    this ,    index ,    SWIGTYPE _ p _ std _  _ string . getCPtr ( name )  )  ;", "}", "METHOD_END"], "methodName": ["getJointName"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "assert   parent _ index . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   mass . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   user _ int . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   ExtrasJNI _ getBody ( swigCPtr ,    this ,    body _ index ,    parent _ index ,    SWIGTYPE _ p _ btInverseDynamicsBullet 3  _  _ JointType . getCPtr ( joint _ type )  ,    SWIGTYPE _ p _ vec 3  . getCPtr ( parent _ r _ parent _ body _ ref )  ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( body _ T _ parent _ ref )  ,    SWIGTYPE _ p _ vec 3  . getCPtr ( body _ axis _ of _ motion )  ,    mass ,    SWIGTYPE _ p _ vec 3  . getCPtr ( body _ r _ body _ com )  ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( body _ I _ body )  ,    user _ int ,    SWIGTYPE _ p _ p _ void . getCPtr ( user _ ptr )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getBody"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyTreeCreator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyTreeCreator"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . MultiBodyTreeCreator _ getNameMap ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ MultiBodyNameMap ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNameMap"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyTreeCreator"}, {"methodBody": ["METHOD_START", "{", "assert   num _ bodies . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   ExtrasJNI _ getNumBodies ( swigCPtr ,    this ,    num _ bodies )  ;", "}", "}", "METHOD_END"], "methodName": ["getNumBodies"], "fileName": "com.badlogic.gdx.physics.bullet.extras.MultiBodyTreeCreator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.RandomTreeCreator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_MultiBodyNameMap"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_bParse__btBulletFile"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_btInverseDynamicsBullet3__JointType"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_mat33"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_p_void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_std__string"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_vec3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SWIGTYPE_p_vecx"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.SimpleTreeCreator"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . User 2 InternalIndex _ addBody ( swigCPtr ,    this ,    body ,    parent )  ;", "}", "METHOD_END"], "methodName": ["addBody"], "fileName": "com.badlogic.gdx.physics.bullet.extras.User2InternalIndex"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . User 2 InternalIndex _ buildMapping ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["buildMapping"], "fileName": "com.badlogic.gdx.physics.bullet.extras.User2InternalIndex"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.User2InternalIndex"}, {"methodBody": ["METHOD_START", "{", "assert   user . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   ExtrasJNI _ internal 2 user ( swigCPtr ,    this ,    internal ,    user )  ;", "}", "}", "METHOD_END"], "methodName": ["internal2user"], "fileName": "com.badlogic.gdx.physics.bullet.extras.User2InternalIndex"}, {"methodBody": ["METHOD_START", "{", "assert   internal . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   ExtrasJNI _ user 2 internal ( swigCPtr ,    this ,    user ,    internal )  ;", "}", "}", "METHOD_END"], "methodName": ["user2internal"], "fileName": "com.badlogic.gdx.physics.bullet.extras.User2InternalIndex"}, {"methodBody": ["METHOD_START", "{", "return    ( getClass (  )  )     =  =     ( btBulletWorldImporter . class )     ?    ExtrasJNI . btBulletWorldImporter _ convertAllObjects ( swigCPtr ,    this ,    SWIGTYPE _ p _ bParse _  _ btBulletFile . getCPtr ( file )  )     :    ExtrasJNI . btBulletWorldImporter _ convertAllObjectsSwigExplicitbtBulletWorldImporter ( swigCPtr ,    this ,    SWIGTYPE _ p _ bParse _  _ btBulletFile . getCPtr ( file )  )  ;", "}", "METHOD_END"], "methodName": ["convertAllObjects"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "final   int   len    =     (  ( int )     ( fileHandle . length (  )  )  )  ;", "if    ( len    <  =     0  )", "throw   new   utils . GdxRuntimeException (  \" Incorrect   file   specified \"  )  ;", "ByteBuffer   buff    =    utils . BufferUtils . newUnsafeByteBuffer ( len )  ;", "buff . put ( fileHandle . readBytes (  )  )  ;", "buff . position (  0  )  ;", "boolean   result    =    loadFileFromMemory ( buff ,    len )  ;", "utils . BufferUtils . disposeUnsafeByteBuffer ( buff )  ;", "return   result ;", "}", "METHOD_END"], "methodName": ["loadFile"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btBulletWorldImporter _ loadFile _  _ SWIG _  1  ( swigCPtr ,    this ,    fileName )  ;", "}", "METHOD_END"], "methodName": ["loadFile"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btBulletWorldImporter _ loadFile _  _ SWIG _  0  ( swigCPtr ,    this ,    fileName ,    preSwapFilenameOut )  ;", "}", "METHOD_END"], "methodName": ["loadFile"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btBulletWorldImporter _ loadFileFromMemory _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ bParse _  _ btBulletFile . getCPtr ( file )  )  ;", "}", "METHOD_END"], "methodName": ["loadFileFromMemory"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "assert   memoryBuffer . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   ExtrasJNI _ loadFileFromMemory _  _ SWIG _  1  ( swigCPtr ,    this ,    memoryBuffer ,    len )  ;", "}", "}", "METHOD_END"], "methodName": ["loadFileFromMemory"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "ExtrasJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "ExtrasJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btBulletWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btMultiBodyTreeCreator _ createFromBtMultiBody _  _ SWIG _  1  ( swigCPtr ,    this ,    btMultiBody . getCPtr ( btmb )  ,    btmb )  ;", "}", "METHOD_END"], "methodName": ["createFromBtMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btMultiBodyTreeCreator"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btMultiBodyTreeCreator _ createFromBtMultiBody _  _ SWIG _  0  ( swigCPtr ,    this ,    btMultiBody . getCPtr ( btmb )  ,    btmb ,    verbose )  ;", "}", "METHOD_END"], "methodName": ["createFromBtMultiBody"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btMultiBodyTreeCreator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btMultiBodyTreeCreator"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ at _  _ SWIG _  0  ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ copyFromArray ( swigCPtr ,    this ,    btStringArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    fillValue )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ expandNonInitializing ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ findBinarySearch ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findBinarySearch"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ findLinearSearch ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ findLinearSearch 2  ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch2"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btStringArray ( ExtrasJNI . btStringArray _ operatorAssignment ( swigCPtr ,    this ,    btStringArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ operatorSubscript _  _ SWIG _  0  ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ push _ back ( swigCPtr ,    this ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ remove ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btStringArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btStringArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btStringArray"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createBoxShape ( swigCPtr ,    this ,    halfExtents )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createBoxShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createBvhTriangleMeshShape ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( trimesh )  ,    trimesh ,    btOptimizedBvh . getCPtr ( bvh )  ,    bvh )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBvhTriangleMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createBvhTriangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createCapsuleShapeX ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCapsuleShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createCapsuleShapeY ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCapsuleShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createCapsuleShapeZ ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCapsuleShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( ExtrasJNI . btWorldImporter _ createCollisionObject ( swigCPtr ,    this ,    startTransform ,    btCollisionShape . getCPtr ( shape )  ,    shape ,    bodyName )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createCompoundShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCompoundShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCompoundShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createConeShapeX ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createConeShapeY ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createConeShapeZ ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createConeTwistConstraint _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    rbAFrame )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConeTwistConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeTwistConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createConeTwistConstraint _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    rbAFrame ,    rbBFrame )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConeTwistConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConeTwistConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createConvexHullShape ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btConvexHullShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConvexHullShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createConvexTriangleMeshShape ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( trimesh )  ,    trimesh )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createConvexTriangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createCylinderShapeX ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCylinderShapeX"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createCylinderShapeY ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCylinderShapeY"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createCylinderShapeZ ( swigCPtr ,    this ,    radius ,    height )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createCylinderShapeZ"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createGearConstraint ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    axisInA ,    axisInB ,    ratio )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGearConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createGearConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createGeneric 6 DofConstraint _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    frameInB ,    useLinearReferenceFrameB )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGeneric 6 DofConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createGeneric6DofConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createGeneric 6 DofConstraint _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    frameInA ,    frameInB ,    useLinearReferenceFrameA )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGeneric 6 DofConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createGeneric6DofConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createGeneric 6 DofSpring 2 Constraint ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    frameInA ,    frameInB ,    rotateOrder )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGeneric 6 DofSpring 2 Constraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createGeneric6DofSpring2Constraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createGeneric 6 DofSpringConstraint ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    frameInA ,    frameInB ,    useLinearReferenceFrameA )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGeneric 6 DofSpringConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createGeneric6DofSpringConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createGimpactShape ( swigCPtr ,    this ,    btStridingMeshInterface . getCPtr ( trimesh )  ,    trimesh )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGImpactMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createGimpactShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createHingeConstraint _  _ SWIG _  3  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    rbAFrame )  ;", "return   cPtr    =  =     0     ?    null    :    new   btHingeConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createHingeConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createHingeConstraint _  _ SWIG _  2  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    rbAFrame ,    useReferenceFrameA )  ;", "return   cPtr    =  =     0     ?    null    :    new   btHingeConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createHingeConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createHingeConstraint _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    rbAFrame ,    rbBFrame )  ;", "return   cPtr    =  =     0     ?    null    :    new   btHingeConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createHingeConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createHingeConstraint _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    rbAFrame ,    rbBFrame ,    useReferenceFrameA )  ;", "return   cPtr    =  =     0     ?    null    :    new   btHingeConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createHingeConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createMeshInterface ( swigCPtr ,    this ,    btStridingMeshInterfaceData . getCPtr ( meshData )  ,    meshData )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleIndexVertexArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createMeshInterface"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "assert   radi . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "long   cPtr    =    ExtrasJNI _ createMultiSphereShape ( swigCPtr ,    this ,    btVector 3  . getCPtr ( positions )  ,    positions ,    radi ,    numSpheres )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMultiSphereShape ( cPtr ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["createMultiSphereShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createOptimizedBvh ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createOptimizedBvh"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createPlaneShape ( swigCPtr ,    this ,    planeNormal ,    planeConstant )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createPlaneShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createPoint 2 PointConstraint _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    pivotInA )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoint 2 PointConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createPoint2PointConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createPoint 2 PointConstraint _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    pivotInA ,    pivotInB )  ;", "return   cPtr    =  =     0     ?    null    :    new   btPoint 2 PointConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createPoint2PointConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( ExtrasJNI . btWorldImporter _ createRigidBody ( swigCPtr ,    this ,    isDynamic ,    mass ,    startTransform ,    btCollisionShape . getCPtr ( shape )  ,    shape ,    bodyName )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["createRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createScaledTrangleMeshShape ( swigCPtr ,    this ,    btBvhTriangleMeshShape . getCPtr ( meshShape )  ,    meshShape ,    localScalingbtBvhTriangleMeshShape )  ;", "return   cPtr    =  =     0     ?    null    :    new   btScaledBvhTriangleMeshShape ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createScaledTrangleMeshShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createSliderConstraint _  _ SWIG _  1  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    frameInB ,    useLinearReferenceFrameA )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSliderConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createSliderConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createSliderConstraint _  _ SWIG _  0  ( swigCPtr ,    this ,    btRigidBody . getCPtr ( rbA )  ,    rbA ,    btRigidBody . getCPtr ( rbB )  ,    rbB ,    frameInA ,    frameInB ,    useLinearReferenceFrameA )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSliderConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createSliderConstraint"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createSphereShape ( swigCPtr ,    this ,    radius )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createSphereShape"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createStridingMeshInterfaceData ( swigCPtr ,    this ,    btStridingMeshInterfaceData . getCPtr ( interfaceData )  ,    interfaceData )  ;", "return   cPtr    =  =     0     ?    null    :    new   btStridingMeshInterfaceData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createStridingMeshInterfaceData"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createTriangleInfoMap ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfoMap ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTriangleInfoMap"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ createTriangleMeshContainer ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleIndexVertexArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["createTriangleMeshContainer"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btWorldImporter _ deleteAllData ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["deleteAllData"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ getBvhByIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btOptimizedBvh ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ getCollisionShapeByIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ getCollisionShapeByName ( swigCPtr ,    this ,    name )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionShapeByName"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ getConstraintByIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ getConstraintByName ( swigCPtr ,    this ,    name )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTypedConstraint ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintByName"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btWorldImporter _ getNameForPointer _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["getNameForPointer"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btWorldImporter _ getNumBvhs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumBvhs"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btWorldImporter _ getNumCollisionShapes ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumCollisionShapes"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btWorldImporter _ getNumConstraints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btWorldImporter _ getNumRigidBodies ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumRigidBodies"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btWorldImporter _ getNumTriangleInfoMaps ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTriangleInfoMaps"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   btCollisionObject . getInstance ( ExtrasJNI . btWorldImporter _ getRigidBodyByIndex ( swigCPtr ,    this ,    index )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   btRigidBody . getInstance ( ExtrasJNI . btWorldImporter _ getRigidBodyByName ( swigCPtr ,    this ,    name )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyByName"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    ExtrasJNI . btWorldImporter _ getTriangleInfoMapByIndex ( swigCPtr ,    this ,    index )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTriangleInfoMap ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTriangleInfoMapByIndex"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "return   ExtrasJNI . btWorldImporter _ getVerboseMode ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVerboseMode"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btWorldImporter _ setDynamicsWorldInfo ( swigCPtr ,    this ,    gravity ,    btContactSolverInfo . getCPtr ( solverInfo )  ,    solverInfo )  ;", "}", "METHOD_END"], "methodName": ["setDynamicsWorldInfo"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "ExtrasJNI . btWorldImporter _ setVerboseMode ( swigCPtr ,    this ,    verboseMode )  ;", "}", "METHOD_END"], "methodName": ["setVerboseMode"], "fileName": "com.badlogic.gdx.physics.bullet.extras.btWorldImporter"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . bodyTParentFromAxisAngle ( SWIGTYPE _ p _ vec 3  . getCPtr ( axis )  ,    angle ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( T )  )  ;", "}", "METHOD_END"], "methodName": ["bodyTParentFromAxisAngle"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . determinant ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( m )  )  ;", "}", "METHOD_END"], "methodName": ["determinant"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . getVecMatFromDH ( theta ,    d ,    a ,    alpha ,    SWIGTYPE _ p _ vec 3  . getCPtr ( r )  ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( T )  )  ;", "}", "METHOD_END"], "methodName": ["getVecMatFromDH"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . isPositiveDefinite ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( m )  )  ;", "}", "METHOD_END"], "methodName": ["isPositiveDefinite"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . isPositiveSemiDefinite ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( m )  )  ;", "}", "METHOD_END"], "methodName": ["isPositiveSemiDefinite"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . isPositiveSemiDefiniteFuzzy ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( m )  )  ;", "}", "METHOD_END"], "methodName": ["isPositiveSemiDefiniteFuzzy"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . isUnitVector ( SWIGTYPE _ p _ vec 3  . getCPtr ( vector )  )  ;", "}", "METHOD_END"], "methodName": ["isUnitVector"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . isValidInertiaMatrix ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( I )  ,    index ,    has _ fixed _ joint )  ;", "}", "METHOD_END"], "methodName": ["isValidInertiaMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . isValidTransformMatrix ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( m )  )  ;", "}", "METHOD_END"], "methodName": ["isValidTransformMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . maxAbs _  _ SWIG _  1  ( SWIGTYPE _ p _ vec 3  . getCPtr ( v )  )  ;", "}", "METHOD_END"], "methodName": ["maxAbs"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . maxAbs _  _ SWIG _  0  ( SWIGTYPE _ p _ vecx . getCPtr ( v )  )  ;", "}", "METHOD_END"], "methodName": ["maxAbs"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ vec 3  ( InverseDynamicsJNI . rpyFromMatrix ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( rot )  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["rpyFromMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . setZero _  _ SWIG _  2  ( SWIGTYPE _ p _ mat 3  3  . getCPtr ( m )  )  ;", "}", "METHOD_END"], "methodName": ["setZero"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . setZero _  _ SWIG _  0  ( SWIGTYPE _ p _ vec 3  . getCPtr ( v )  )  ;", "}", "METHOD_END"], "methodName": ["setZero"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . setZero _  _ SWIG _  1  ( SWIGTYPE _ p _ vecx . getCPtr ( v )  )  ;", "}", "METHOD_END"], "methodName": ["setZero"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . skew ( SWIGTYPE _ p _ vec 3  . getCPtr ( v )  ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( result )  )  ;", "}", "METHOD_END"], "methodName": ["skew"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ mat 3  3  ( InverseDynamicsJNI . tildeOperator ( SWIGTYPE _ p _ vec 3  . getCPtr ( v )  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["tildeOperator"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ mat 3  3  ( InverseDynamicsJNI . transformX ( alpha )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["transformX"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ mat 3  3  ( InverseDynamicsJNI . transformY ( beta )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["transformY"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ mat 3  3  ( InverseDynamicsJNI . transformZ ( gamma )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["transformZ"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.InverseDynamics"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ addBody ( swigCPtr ,    this ,    body _ index ,    parent _ index ,    joint _ type ,    SWIGTYPE _ p _ vec 3  . getCPtr ( parent _ r _ parent _ body _ ref )  ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( body _ T _ parent _ ref )  ,    SWIGTYPE _ p _ vec 3  . getCPtr ( body _ axis _ of _ motion )  ,    mass ,    SWIGTYPE _ p _ vec 3  . getCPtr ( body _ r _ body _ com )  ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( body _ I _ body )  ,    user _ int ,    user _ ptr )  ;", "}", "METHOD_END"], "methodName": ["addBody"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ addUserForce ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( body _ force )  )  ;", "}", "METHOD_END"], "methodName": ["addUserForce"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ addUserMoment ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( body _ moment )  )  ;", "}", "METHOD_END"], "methodName": ["addUserMoment"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ calculateInverseDynamics ( swigCPtr ,    this ,    SWIGTYPE _ p _ vecx . getCPtr ( q )  ,    SWIGTYPE _ p _ vecx . getCPtr ( u )  ,    SWIGTYPE _ p _ vecx . getCPtr ( dot _ u )  ,    SWIGTYPE _ p _ vecx . getCPtr ( joint _ forces )  )  ;", "}", "METHOD_END"], "methodName": ["calculateInverseDynamics"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ calculateKinematics ( swigCPtr ,    this ,    SWIGTYPE _ p _ vecx . getCPtr ( q )  ,    SWIGTYPE _ p _ vecx . getCPtr ( u )  ,    SWIGTYPE _ p _ vecx . getCPtr ( dot _ u )  )  ;", "}", "METHOD_END"], "methodName": ["calculateKinematics"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ calculateMassMatrix _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ vecx . getCPtr ( q )  ,    update _ kinematics ,    initialize _ matrix ,    set _ lower _ triangular _ matrix ,    SWIGTYPE _ p _ matxx . getCPtr ( mass _ matrix )  )  ;", "}", "METHOD_END"], "methodName": ["calculateMassMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ calculateMassMatrix _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ vecx . getCPtr ( q )  ,    SWIGTYPE _ p _ matxx . getCPtr ( mass _ matrix )  )  ;", "}", "METHOD_END"], "methodName": ["calculateMassMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ calculatePositionAndVelocityKinematics ( swigCPtr ,    this ,    SWIGTYPE _ p _ vecx . getCPtr ( q )  ,    SWIGTYPE _ p _ vecx . getCPtr ( u )  )  ;", "}", "METHOD_END"], "methodName": ["calculatePositionAndVelocityKinematics"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ calculatePositionKinematics ( swigCPtr ,    this ,    SWIGTYPE _ p _ vecx . getCPtr ( q )  )  ;", "}", "METHOD_END"], "methodName": ["calculatePositionKinematics"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ clearAllUserForcesAndMoments ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearAllUserForcesAndMoments"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ finalizeInternal ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["finalizeInternal"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getAcceptInvalidMassProperties ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAcceptInvalidMassProperties"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyAngularAcceleration ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( world _ dot _ omega )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyAngularAcceleration"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyAngularVelocity ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( world _ omega )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyAngularVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyAxisOfMotion ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( axis )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyAxisOfMotion"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyCoM ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( world _ com )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyCoM"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyFirstMassMoment ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( first _ mass _ moment )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyFirstMassMoment"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyLinearAcceleration ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( world _ acceleration )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyLinearAcceleration"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyLinearVelocity ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( world _ velocity )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyLinearVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyLinearVelocityCoM ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( world _ velocity )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyLinearVelocityCoM"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "assert   mass . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   InverseDynamicsJNI _ getBodyMass ( swigCPtr ,    this ,    body _ index ,    mass )  ;", "}", "}", "METHOD_END"], "methodName": ["getBodyMass"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyOrigin ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( world _ origin )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodySecondMassMoment ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( second _ mass _ moment )  )  ;", "}", "METHOD_END"], "methodName": ["getBodySecondMassMoment"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyTParentRef ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( T )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyTParentRef"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getBodyTransform ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( world _ T _ body )  )  ;", "}", "METHOD_END"], "methodName": ["getBodyTransform"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "assert   q _ offset . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   InverseDynamicsJNI _ getDoFOffset ( swigCPtr ,    this ,    body _ index ,    q _ offset )  ;", "}", "}", "METHOD_END"], "methodName": ["getDoFOffset"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getJointType ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ btInverseDynamicsBullet 3  _  _ JointType . getCPtr ( joint _ type )  )  ;", "}", "METHOD_END"], "methodName": ["getJointType"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getJointTypeStr ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ p _ char . getCPtr ( joint _ type )  )  ;", "}", "METHOD_END"], "methodName": ["getJointTypeStr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "assert   parent _ index . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   InverseDynamicsJNI _ getParentIndex ( swigCPtr ,    this ,    body _ index ,    parent _ index )  ;", "}", "}", "METHOD_END"], "methodName": ["getParentIndex"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getParentRParentBodyRef ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( r )  )  ;", "}", "METHOD_END"], "methodName": ["getParentRParentBodyRef"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "assert   user _ int . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   InverseDynamicsJNI _ getUserInt ( swigCPtr ,    this ,    body _ index ,    user _ int )  ;", "}", "}", "METHOD_END"], "methodName": ["getUserInt"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ getUserPtr ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ p _ void . getCPtr ( user _ ptr )  )  ;", "}", "METHOD_END"], "methodName": ["getUserPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ numBodies ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["numBodies"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ numDoFs ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["numDoFs"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ printTree ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["printTree"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ printTreeData ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["printTreeData"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "InverseDynamicsJNI . MultiBodyTree _ setAcceptInvalidMassParameters ( swigCPtr ,    this ,    flag )  ;", "}", "METHOD_END"], "methodName": ["setAcceptInvalidMassParameters"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ setBodyFirstMassMoment ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ vec 3  . getCPtr ( first _ mass _ moment )  )  ;", "}", "METHOD_END"], "methodName": ["setBodyFirstMassMoment"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ setBodyMass ( swigCPtr ,    this ,    body _ index ,    mass )  ;", "}", "METHOD_END"], "methodName": ["setBodyMass"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ setBodySecondMassMoment ( swigCPtr ,    this ,    body _ index ,    SWIGTYPE _ p _ mat 3  3  . getCPtr ( second _ mass _ moment )  )  ;", "}", "METHOD_END"], "methodName": ["setBodySecondMassMoment"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ setGravityInWorldFrame ( swigCPtr ,    this ,    SWIGTYPE _ p _ vec 3  . getCPtr ( gravity )  )  ;", "}", "METHOD_END"], "methodName": ["setGravityInWorldFrame"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ setUserInt ( swigCPtr ,    this ,    body _ index ,    user _ int )  ;", "}", "METHOD_END"], "methodName": ["setUserInt"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   InverseDynamicsJNI . MultiBodyTree _ setUserPtr ( swigCPtr ,    this ,    body _ index ,    user _ ptr )  ;", "}", "METHOD_END"], "methodName": ["setUserPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.MultiBodyTree"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.SWIGTYPE_p_btInverseDynamicsBullet3__JointType"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.SWIGTYPE_p_mat33"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.SWIGTYPE_p_matxx"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.SWIGTYPE_p_p_char"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.SWIGTYPE_p_p_void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.SWIGTYPE_p_vec3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.inversedynamics.SWIGTYPE_p_vecx"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.CProfileSample"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.ConvexH"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . ConvexH _ edges _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ ConvexH _  _ HalfEdge _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getEdges"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.ConvexH"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . ConvexH _ facets _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btPlane _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFacets"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.ConvexH"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . ConvexH _ vertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.ConvexH"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . ConvexH _ edges _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ ConvexH _  _ HalfEdge _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setEdges"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.ConvexH"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . ConvexH _ facets _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btPlane _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setFacets"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.ConvexH"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . ConvexH _ vertices _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.ConvexH"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . GrahamVector 3  _ angle _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.GrahamVector3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.GrahamVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . GrahamVector 3  _ orgIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOrgIndex"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.GrahamVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . GrahamVector 3  _ angle _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.GrahamVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . GrahamVector 3  _ orgIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOrgIndex"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.GrahamVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ ClearHullFlag ( swigCPtr ,    this ,    flag )  ;", "}", "METHOD_END"], "methodName": ["ClearHullFlag"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullDesc _ HasHullFlag ( swigCPtr ,    this ,    flag )  ;", "}", "METHOD_END"], "methodName": ["HasHullFlag"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ SetHullFlag ( swigCPtr ,    this ,    flag )  ;", "}", "METHOD_END"], "methodName": ["SetHullFlag"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullDesc _ mFlags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMFlags"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullDesc _ mMaxFaces _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMMaxFaces"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullDesc _ mMaxVertices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMMaxVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullDesc _ mNormalEpsilon _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMNormalEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullDesc _ mVcount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMVcount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullDesc _ mVertexStride _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMVertexStride"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . HullDesc _ mVertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ mFlags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMFlags"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ mMaxFaces _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMMaxFaces"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ mMaxVertices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMMaxVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ mNormalEpsilon _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMNormalEpsilon"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ mVcount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMVcount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ mVertexStride _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMVertexStride"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullDesc _ mVertices _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullDesc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullLibrary _ CreateConvexHull ( swigCPtr ,    this ,    HullDesc . getCPtr ( desc )  ,    desc ,    HullResult . getCPtr ( result )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["CreateConvexHull"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullLibrary"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullLibrary _ ReleaseResult ( swigCPtr ,    this ,    HullResult . getCPtr ( result )  ,    result )  ;", "}", "METHOD_END"], "methodName": ["ReleaseResult"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullLibrary"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullLibrary"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . HullLibrary _ vertexIndexMapping _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertexIndexMapping"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullLibrary"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullLibrary _ vertexIndexMapping _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setVertexIndexMapping"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullLibrary"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . HullResult _ Indices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ unsigned _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIndices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullResult _ mNumFaces _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMNumFaces"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullResult _ mNumIndices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMNumIndices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullResult _ mNumOutputVertices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMNumOutputVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . HullResult _ mPolygons _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMPolygons"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . HullResult _ OutputVertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOutputVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullResult _ Indices _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ unsigned _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setIndices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullResult _ mNumFaces _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMNumFaces"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullResult _ mNumIndices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMNumIndices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullResult _ mNumOutputVertices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMNumOutputVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullResult _ mPolygons _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMPolygons"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . HullResult _ OutputVertices _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOutputVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.HullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . AabbExpand ( aabbMin ,    aabbMax ,    expansionMin ,    expansionMax )  ;", "}", "METHOD_END"], "methodName": ["AabbExpand"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . GEN _ rand (  )  ;", "}", "METHOD_END"], "methodName": ["GEN_rand"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . GEN _ srand ( seed )  ;", "}", "METHOD_END"], "methodName": ["GEN_srand"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . GrahamScanConvexHull 2 D ( SWIGTYPE _ p _ btAlignedObjectArrayT _ GrahamVector 3  _ t . getCPtr ( originalPoints )  ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ GrahamVector 3  _ t . getCPtr ( hull )  ,    normalAxis )  ;", "}", "METHOD_END"], "methodName": ["GrahamScanConvexHull2D"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . TestAabbAgainstAabb 2  ( aabbMin 1  ,    aabbMax 1  ,    aabbMin 2  ,    aabbMax 2  )  ;", "}", "METHOD_END"], "methodName": ["TestAabbAgainstAabb2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . TestPointAgainstAabb 2  ( aabbMin 1  ,    aabbMax 1  ,    point )  ;", "}", "METHOD_END"], "methodName": ["TestPointAgainstAabb2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . TestTriangleAgainstAabb 2  ( btVector 3  . getCPtr ( vertices )  ,    vertices ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["TestTriangleAgainstAabb2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAabbSupport ( halfExtents ,    supportDir )  ;", "}", "METHOD_END"], "methodName": ["btAabbSupport"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAcos ( x )  ;", "}", "METHOD_END"], "methodName": ["btAcos"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAlignedAllocInternal ( size ,    alignment )  ;", "}", "METHOD_END"], "methodName": ["btAlignedAllocInternal"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btAlignedAllocSetCustom ( SWIGTYPE _ p _ f _ size _ t _  _ p _ void . getCPtr ( allocFunc )  ,    SWIGTYPE _ p _ f _ p _ void _  _ void . getCPtr ( freeFunc )  )  ;", "}", "METHOD_END"], "methodName": ["btAlignedAllocSetCustom"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btAlignedAllocSetCustomAligned ( SWIGTYPE _ p _ f _ size _ t _ int _  _ p _ void . getCPtr ( allocFunc )  ,    SWIGTYPE _ p _ f _ p _ void _  _ void . getCPtr ( freeFunc )  )  ;", "}", "METHOD_END"], "methodName": ["btAlignedAllocSetCustomAligned"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btAlignedFreeInternal ( ptr )  ;", "}", "METHOD_END"], "methodName": ["btAlignedFreeInternal"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAngle _  _ SWIG _  1  ( q 1  ,    q 2  )  ;", "}", "METHOD_END"], "methodName": ["btAngle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAngle _  _ SWIG _  0  ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["btAngle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAsin ( x )  ;", "}", "METHOD_END"], "methodName": ["btAsin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAtan ( x )  ;", "}", "METHOD_END"], "methodName": ["btAtan"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAtan 2  ( x ,    y )  ;", "}", "METHOD_END"], "methodName": ["btAtan2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAtan 2 Fast ( y ,    x )  ;", "}", "METHOD_END"], "methodName": ["btAtan2Fast"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btCos ( x )  ;", "}", "METHOD_END"], "methodName": ["btCos"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btCross ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["btCross"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDegrees ( x )  ;", "}", "METHOD_END"], "methodName": ["btDegrees"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDistance ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["btDistance"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDistance 2  ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["btDistance2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDot ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["btDot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btEqual ( a ,    eps )  ;", "}", "METHOD_END"], "methodName": ["btEqual"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btExp ( x )  ;", "}", "METHOD_END"], "methodName": ["btExp"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btFabs ( x )  ;", "}", "METHOD_END"], "methodName": ["btFabs"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btFmod ( x ,    y )  ;", "}", "METHOD_END"], "methodName": ["btFmod"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btFsel ( a ,    b ,    c )  ;", "}", "METHOD_END"], "methodName": ["btFsel"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btFuzzyZero ( x )  ;", "}", "METHOD_END"], "methodName": ["btFuzzyZero"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGetCurrentEnterProfileZoneFunc (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ p _ q _ const _  _ char _  _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btGetCurrentEnterProfileZoneFunc"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGetCurrentLeaveProfileZoneFunc (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _  _  _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btGetCurrentLeaveProfileZoneFunc"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGetCurrentThreadIndex (  )  ;", "}", "METHOD_END"], "methodName": ["btGetCurrentThreadIndex"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGetOpenMPTaskScheduler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btITaskScheduler ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btGetOpenMPTaskScheduler"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGetPPLTaskScheduler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btITaskScheduler ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btGetPPLTaskScheduler"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGetSequentialTaskScheduler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btITaskScheduler ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btGetSequentialTaskScheduler"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGetTBBTaskScheduler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btITaskScheduler ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btGetTBBTaskScheduler"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGetTaskScheduler (  )  ;", "return   cPtr    =  =     0     ?    null    :    new   btITaskScheduler ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["btGetTaskScheduler"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGetVersion (  )  ;", "}", "METHOD_END"], "methodName": ["btGetVersion"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGreaterEqual ( a ,    eps )  ;", "}", "METHOD_END"], "methodName": ["btGreaterEqual"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btIsMainThread (  )  ;", "}", "METHOD_END"], "methodName": ["btIsMainThread"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btIsNegative ( x )  ;", "}", "METHOD_END"], "methodName": ["btIsNegative"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "assert   a . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   b . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   JNI . btLargeDot ( a ,    b ,    n )  ;", "}", "}", "METHOD_END"], "methodName": ["btLargeDot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btLog ( x )  ;", "}", "METHOD_END"], "methodName": ["btLog"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMachineIsLittleEndian (  )  ;", "}", "METHOD_END"], "methodName": ["btMachineIsLittleEndian"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMutexLock ( btSpinMutex . getCPtr ( mutex )  ,    mutex )  ;", "}", "METHOD_END"], "methodName": ["btMutexLock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMutexTryLock ( btSpinMutex . getCPtr ( mutex )  ,    mutex )  ;", "}", "METHOD_END"], "methodName": ["btMutexTryLock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMutexUnlock ( btSpinMutex . getCPtr ( mutex )  ,    mutex )  ;", "}", "METHOD_END"], "methodName": ["btMutexUnlock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btNormalizeAngle ( angleInRadians )  ;", "}", "METHOD_END"], "methodName": ["btNormalizeAngle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btOutcode ( p ,    halfExtent )  ;", "}", "METHOD_END"], "methodName": ["btOutcode"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btParallelFor ( iBegin ,    iEnd ,    grainSize ,    btIParallelForBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["btParallelFor"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPow ( x ,    y )  ;", "}", "METHOD_END"], "methodName": ["btPow"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btRadians ( x )  ;", "}", "METHOD_END"], "methodName": ["btRadians"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btRayAabb ( rayFrom ,    rayTo ,    aabbMin ,    aabbMax ,    SWIGTYPE _ p _ float . getCPtr ( param )  ,    normal )  ;", "}", "METHOD_END"], "methodName": ["btRayAabb"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btRayAabb 2  ( rayFrom ,    rayInvDirection ,    raySign ,    btVector 3  . getCPtr ( bounds )  ,    bounds ,    SWIGTYPE _ p _ float . getCPtr ( tmin )  ,    lambda _ min ,    lambda _ max )  ;", "}", "METHOD_END"], "methodName": ["btRayAabb2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btResetThreadIndexCounter (  )  ;", "}", "METHOD_END"], "methodName": ["btResetThreadIndexCounter"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSelect _  _ SWIG _  2  ( condition ,    valueIfConditionNonZero ,    valueIfConditionZero )  ;", "}", "METHOD_END"], "methodName": ["btSelect"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSelect _  _ SWIG _  1  ( condition ,    valueIfConditionNonZero ,    valueIfConditionZero )  ;", "}", "METHOD_END"], "methodName": ["btSelect"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSelect _  _ SWIG _  0  ( condition ,    valueIfConditionNonZero ,    valueIfConditionZero )  ;", "}", "METHOD_END"], "methodName": ["btSelect"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSetCustomEnterProfileZoneFunc ( SWIGTYPE _ p _ f _ p _ q _ const _  _ char _  _ void . getCPtr ( enterFunc )  )  ;", "}", "METHOD_END"], "methodName": ["btSetCustomEnterProfileZoneFunc"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSetCustomLeaveProfileZoneFunc ( SWIGTYPE _ p _ f _  _  _ void . getCPtr ( leaveFunc )  )  ;", "}", "METHOD_END"], "methodName": ["btSetCustomLeaveProfileZoneFunc"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSetTaskScheduler ( btITaskScheduler . getCPtr ( ts )  ,    ts )  ;", "}", "METHOD_END"], "methodName": ["btSetTaskScheduler"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSin ( x )  ;", "}", "METHOD_END"], "methodName": ["btSin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSqrt ( y )  ;", "}", "METHOD_END"], "methodName": ["btSqrt"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btStrLen ( str )  ;", "}", "METHOD_END"], "methodName": ["btStrLen"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSwapEndian _  _ SWIG _  1  ( val )  ;", "}", "METHOD_END"], "methodName": ["btSwapEndian"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSwapEndian _  _ SWIG _  0  ( val )  ;", "}", "METHOD_END"], "methodName": ["btSwapEndian"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSwapEndian _  _ SWIG _  2  ( val )  ;", "}", "METHOD_END"], "methodName": ["btSwapEndian"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "assert   dst . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "JNI . btSwapEndianDouble ( d ,    dst )  ;", "}", "}", "METHOD_END"], "methodName": ["btSwapEndianDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSwapEndianFloat ( d )  ;", "}", "METHOD_END"], "methodName": ["btSwapEndianFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSwapEndianInt ( val )  ;", "}", "METHOD_END"], "methodName": ["btSwapEndianInt"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSwapScalarEndian ( sourceVal ,    SWIGTYPE _ p _ float . getCPtr ( destVal )  )  ;", "}", "METHOD_END"], "methodName": ["btSwapScalarEndian"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSwapVector 3 Endian ( sourceVec ,    destVec )  ;", "}", "METHOD_END"], "methodName": ["btSwapVector3Endian"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTan ( x )  ;", "}", "METHOD_END"], "methodName": ["btTan"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btThreadsAreRunning (  )  ;", "}", "METHOD_END"], "methodName": ["btThreadsAreRunning"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformAabb _  _ SWIG _  1  ( localAabbMin ,    localAabbMax ,    margin ,    trans ,    aabbMinOut ,    aabbMaxOut )  ;", "}", "METHOD_END"], "methodName": ["btTransformAabb"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformAabb _  _ SWIG _  0  ( halfExtents ,    margin ,    t ,    aabbMinOut ,    aabbMaxOut )  ;", "}", "METHOD_END"], "methodName": ["btTransformAabb"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTriple ( v 1  ,    v 2  ,    v 3  )  ;", "}", "METHOD_END"], "methodName": ["btTriple"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btUnSwapVector 3 Endian ( vector )  ;", "}", "METHOD_END"], "methodName": ["btUnSwapVector3Endian"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "assert   src . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   JNI . btUnswapEndianDouble ( src )  ;", "}", "}", "METHOD_END"], "methodName": ["btUnswapEndianDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btUnswapEndianFloat ( a )  ;", "}", "METHOD_END"], "methodName": ["btUnswapEndianFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . dot ( q 1  ,    q 2  )  ;", "}", "METHOD_END"], "methodName": ["dot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . BT _ HASH _ NULL _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getBT_HASH_NULL"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . BT _ MAX _ THREAD _ COUNT _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getBT_MAX_THREAD_COUNT"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . sBulletDNAlen _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getSBulletDNAlen"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . sBulletDNAlen 6  4  _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getSBulletDNAlen64"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . sBulletDNAstr _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getSBulletDNAstr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . sBulletDNAstr 6  4  _ get (  )  ;", "}", "METHOD_END"], "methodName": ["getSBulletDNAstr64"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . inverse ( q )  ;", "}", "METHOD_END"], "methodName": ["inverse"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . length ( q )  ;", "}", "METHOD_END"], "methodName": ["length"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . lerp ( v 1  ,    v 2  ,    t )  ;", "}", "METHOD_END"], "methodName": ["lerp"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorAddition _  _ SWIG _  1  ( m 1  ,    m 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorAddition"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorAddition _  _ SWIG _  0  ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorAddition"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorDivision _  _ SWIG _  1  ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorDivision"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorDivision _  _ SWIG _  0  ( v ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorDivision"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorEqualTo _  _ SWIG _  1  ( m 1  ,    m 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorEqualTo _  _ SWIG _  0  ( t 1  ,    t 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  9  ( m 1  ,    m 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  7  ( m ,    v )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  6  ( m ,    k )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  3  ( q 1  ,    q 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  4  ( q ,    w )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  8  ( v ,    m )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  5  ( w ,    q )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  0  ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  1  ( v ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorMultiplication _  _ SWIG _  2  ( s ,    v )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorSubtraction _  _ SWIG _  2  ( m 1  ,    m 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorSubtraction _  _ SWIG _  1  ( v )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . operatorSubtraction _  _ SWIG _  0  ( v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . polarDecompose ( a ,    u ,    h )  ;", "}", "METHOD_END"], "methodName": ["polarDecompose"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . quatRotate ( rotation ,    v )  ;", "}", "METHOD_END"], "methodName": ["quatRotate"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . setElem _  _ SWIG _  0  ( SWIGTYPE _ p _ btMatrixXT _ double _ t . getCPtr ( mat )  ,    row ,    col ,    val )  ;", "}", "METHOD_END"], "methodName": ["setElem"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . setElem _  _ SWIG _  1  ( SWIGTYPE _ p _ btMatrixXT _ float _ t . getCPtr ( mat )  ,    row ,    col ,    val )  ;", "}", "METHOD_END"], "methodName": ["setElem"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . sBulletDNAlen _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setSBulletDNAlen"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . sBulletDNAlen 6  4  _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setSBulletDNAlen64"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . sBulletDNAstr _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setSBulletDNAstr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . sBulletDNAstr 6  4  _ set ( value )  ;", "}", "METHOD_END"], "methodName": ["setSBulletDNAstr64"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . shortestArcQuat ( v 0  ,    v 1  )  ;", "}", "METHOD_END"], "methodName": ["shortestArcQuat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . shortestArcQuatNormalize 2  ( v 0  ,    v 1  )  ;", "}", "METHOD_END"], "methodName": ["shortestArcQuatNormalize2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . slerp ( q 1  ,    q 2  ,    t )  ;", "}", "METHOD_END"], "methodName": ["slerp"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "assert   aabbMin 1  . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   aabbMax 1  . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   aabbMin 2  . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   aabbMax 2  . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   JNI . testQuantizedAabbAgainstQuantizedAabb ( aabbMin 1  ,    aabbMax 1  ,    aabbMin 2  ,    aabbMax 2  )  ;", "}", "}", "METHOD_END"], "methodName": ["testQuantizedAabbAgainstQuantizedAabb"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMath"}, {"methodBody": ["METHOD_START", "{", "jself . clearLines (  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_clearLines"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . draw 3 dText ( location ,    textString )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_draw3dText"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawAabb ( from ,    to ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawAabb"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawArc ( center ,    normal ,    axis ,    radiusA ,    radiusB ,    minAngle ,    maxAngle ,    color ,    drawSect ,    stepDegrees )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawArc__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawArc ( center ,    normal ,    axis ,    radiusA ,    radiusB ,    minAngle ,    maxAngle ,    color ,    drawSect )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawArc__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawBox ( bbMin ,    bbMax ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawBox__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawBox ( bbMin ,    bbMax ,    trans ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawBox__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawCapsule ( radius ,    halfHeight ,    upAxis ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawCapsule"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawCone ( radius ,    height ,    upAxis ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawCone"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawContactPoint ( PointOnB ,    normalOnB ,    distance ,    lifeTime ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawCylinder ( radius ,    halfHeight ,    upAxis ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawCylinder"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawLine ( from ,    to ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawLine__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawLine ( from ,    to ,    fromColor ,    toColor )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawLine__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawPlane ( planeNormal ,    planeConst ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawPlane"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawSpherePatch ( center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color ,    stepDegrees ,    drawCenter )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawSpherePatch__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawSpherePatch ( center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color ,    stepDegrees )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawSpherePatch__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawSpherePatch ( center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawSpherePatch__SWIG_2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawSphere ( radius ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawSphere__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawSphere ( p ,    radius ,    color )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawSphere__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawTransform ( transform ,    orthoLen )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawTransform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawTriangle ( v 0  ,    v 1  ,    v 2  ,    arg 3  ,    arg 4  ,    arg 5  ,    color ,    alpha )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawTriangle__SWIG_0"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . drawTriangle ( v 0  ,    v 1  ,    v 2  ,    color ,    arg 4  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_drawTriangle__SWIG_1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . flushLines (  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_flushLines"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "return   jself . getDebugMode (  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_getDebugMode"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "return   btIDebugDraw . DefaultColors . getCPtr ( jself . getDefaultColors (  )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_getDefaultColors"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . reportErrorWarning ( warningString )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_reportErrorWarning"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . setDebugMode ( debugMode )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_setDebugMode"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . setDefaultColors ( new   btIDebugDraw . DefaultColors ( arg 0  ,    false )  )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btIDebugDraw_setDefaultColors"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . getWorldTransform ( worldTrans )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btMotionState_getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "jself . setWorldTransform ( worldTrans )  ;", "}", "METHOD_END"], "methodName": ["SwigDirector_btMotionState_setWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.LinearMathJNI"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . PHullResult _ Indices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ unsigned _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getIndices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . PHullResult _ mFaceCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMFaceCount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . PHullResult _ mIndexCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMIndexCount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . PHullResult _ mVcount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMVcount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . PHullResult _ mVertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . PHullResult _ Indices _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ unsigned _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setIndices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . PHullResult _ mFaceCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMFaceCount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . PHullResult _ mIndexCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMIndexCount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . PHullResult _ mVcount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMVcount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . PHullResult _ mVertices _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.PHullResult"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_ConvexH__HalfEdge_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_GrahamVector3_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObjectDoubleData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btCollisionObjectFloatData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btCollisionShapeData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btConvexHullComputer__Edge_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btDynamicsWorldDoubleData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btDynamicsWorldFloatData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btPlane_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhDoubleData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btQuantizedBvhFloatData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btRigidBodyDoubleData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btRigidBodyFloatData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBodyDoubleData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBodyFloatData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraintData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraintDoubleData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_btTypedConstraintFloatData_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_int_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btAlignedObjectArrayT_unsigned_int_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btHashMapT_btHashPtr_void_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btMatrixXT_double_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_btMatrixXT_float_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_f___void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_f_p_q_const__char__void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_f_p_void__void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_f_size_t__p_void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_f_size_t_int__p_void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_float"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.SWIGTYPE_p_int"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btAngleCompareFunc _ anchor _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btAngleCompareFunc"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btAngleCompareFunc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btAngleCompareFunc _ operatorFunctionCall ( swigCPtr ,    this ,    GrahamVector 3  . getCPtr ( a )  ,    a ,    GrahamVector 3  . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["operatorFunctionCall"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btAngleCompareFunc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btAngleCompareFunc _ anchor _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btAngleCompareFunc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btBlock _ address _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAddress"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBlock"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBlock"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBlock _ previous _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBlock ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPrevious"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBlock"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "LinearMathJNI _ address _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setAddress"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBlock"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBlock _ previous _ set ( swigCPtr ,    this ,    btBlock . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPrevious"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBlock"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ bvhsDouble _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuantizedBvhDoubleData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhsDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ bvhsFloat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuantizedBvhFloatData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBvhsFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ colShapeData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btCollisionShapeData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getColShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ collisionObjectDataDouble _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btCollisionObjectDoubleData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ collisionObjectDataFloat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btCollisionObjectFloatData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ constraintData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btTypedConstraintData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ constraintDataDouble _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btTypedConstraintDoubleData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ constraintDataFloat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btTypedConstraintFloatData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConstraintDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ dynamicWorldInfoDataDouble _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btDynamicsWorldDoubleData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDynamicWorldInfoDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ dynamicWorldInfoDataFloat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btDynamicsWorldFloatData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDynamicWorldInfoDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ rigidBodyDataDouble _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btRigidBodyDoubleData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ rigidBodyDataFloat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btRigidBodyFloatData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBodyDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ softBodyDoubleData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBodyDoubleData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSoftBodyDoubleData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btBulletSerializedArrays _ softBodyFloatData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBodyFloatData _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSoftBodyFloatData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ bvhsDouble _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuantizedBvhDoubleData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setBvhsDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ bvhsFloat _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btQuantizedBvhFloatData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setBvhsFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ colShapeData _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btCollisionShapeData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setColShapeData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ collisionObjectDataDouble _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btCollisionObjectDoubleData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObjectDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ collisionObjectDataFloat _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btCollisionObjectFloatData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObjectDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ constraintData _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btTypedConstraintData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setConstraintData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ constraintDataDouble _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btTypedConstraintDoubleData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setConstraintDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ constraintDataFloat _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btTypedConstraintFloatData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setConstraintDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ dynamicWorldInfoDataDouble _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btDynamicsWorldDoubleData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setDynamicWorldInfoDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ dynamicWorldInfoDataFloat _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btDynamicsWorldFloatData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setDynamicWorldInfoDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ rigidBodyDataDouble _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btRigidBodyDoubleData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setRigidBodyDataDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ rigidBodyDataFloat _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btRigidBodyFloatData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setRigidBodyDataFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ softBodyDoubleData _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBodyDoubleData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setSoftBodyDoubleData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btBulletSerializedArrays _ softBodyFloatData _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBodyFloatData _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setSoftBodyFloatData"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btBulletSerializedArrays"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btChunk _ chunkCode _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getChunkCode"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btChunk _ dna _ nr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDna_nr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btChunk _ length _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLength"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btChunk _ number _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumber"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btChunk _ oldPtr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOldPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btChunk _ chunkCode _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChunkCode"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btChunk _ dna _ nr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDna_nr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btChunk _ length _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLength"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btChunk _ number _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumber"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btChunk _ oldPtr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOldPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btChunk"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btClock"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btClock _ getTimeMicroseconds ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeMicroseconds"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btClock"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btClock _ getTimeMilliseconds ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeMilliseconds"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btClock"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btClock _ getTimeNanoseconds ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeNanoseconds"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btClock"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btClock _ getTimeSeconds ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeSeconds"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btClock"}, {"methodBody": ["METHOD_START", "{", "return   new   btClock ( LinearMathJNI . btClock _ operatorAssignment ( swigCPtr ,    this ,    btClock . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btClock"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btClock _ reset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["reset"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btClock"}, {"methodBody": ["METHOD_START", "{", "assert   coords . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   LinearMathJNI _ compute _  _ SWIG _  1  ( swigCPtr ,    this ,    coords ,    stride ,    count ,    shrink ,    shrinkClamp )  ;", "}", "}", "METHOD_END"], "methodName": ["compute"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "assert   coords . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "return   LinearMathJNI _ compute _  _ SWIG _  0  ( swigCPtr ,    this ,    coords ,    stride ,    count ,    shrink ,    shrinkClamp )  ;", "}", "}", "METHOD_END"], "methodName": ["compute"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btConvexHullComputer _ edges _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btConvexHullComputer _  _ Edge _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getEdges"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btConvexHullComputer _ faces _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFaces"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btConvexHullComputer _ vertices _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 Array ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btConvexHullComputer _ edges _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btConvexHullComputer _  _ Edge _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setEdges"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btConvexHullComputer _ faces _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setFaces"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btConvexHullComputer _ vertices _ set ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexHullComputer"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexSeparatingDistanceUtil"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btConvexSeparatingDistanceUtil _ getConservativeSeparatingDistance ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getConservativeSeparatingDistance"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexSeparatingDistanceUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btConvexSeparatingDistanceUtil _ initSeparatingDistance ( swigCPtr ,    this ,    separatingVector ,    separatingDistance ,    transA ,    transB )  ;", "}", "METHOD_END"], "methodName": ["initSeparatingDistance"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexSeparatingDistanceUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btConvexSeparatingDistanceUtil _ updateSeparatingDistance ( swigCPtr ,    this ,    transA ,    transB )  ;", "}", "METHOD_END"], "methodName": ["updateSeparatingDistance"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btConvexSeparatingDistanceUtil"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btDefaultMotionState _ centerOfMassOffset _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCenterOfMassOffset"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ getCenterOfMassOffset ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getCenterOfMassOffset"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btDefaultMotionState _ graphicsWorldTrans _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGraphicsWorldTrans"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ getGraphicsWorldTrans ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getGraphicsWorldTrans"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btDefaultMotionState _ startWorldTrans _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getStartWorldTrans"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ getStartWorldTrans ( swigCPtr ,    this ,    out )  ;", "}", "METHOD_END"], "methodName": ["getStartWorldTrans"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultMotionState _ userPointer _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultMotionState _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultMotionState _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultMotionState _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultMotionState _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ centerOfMassOffset _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCenterOfMassOffset"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ graphicsWorldTrans _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGraphicsWorldTrans"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ startWorldTrans _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setStartWorldTrans"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultMotionState _ userPointer _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUserPointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultMotionState"}, {"methodBody": ["METHOD_START", "{", "assert   buffer . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   LinearMathJNI . new _  _  _ SWIG _  0  ( totalSize ,    buffer )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtDefaultSerializer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultSerializer _ getMemoryDna (  )  ;", "}", "METHOD_END"], "methodName": ["getMemoryDna"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultSerializer _ getMemoryDnaSizeInBytes (  )  ;", "}", "METHOD_END"], "methodName": ["getMemoryDnaSizeInBytes"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btDefaultSerializer _ skipPointers _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btHashMapT _ btHashPtr _ void _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSkipPointers"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btDefaultSerializer _ insertHeader ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["insertHeader"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btDefaultSerializer _ internalAlloc ( swigCPtr ,    this ,    size )  ;", "}", "METHOD_END"], "methodName": ["internalAlloc"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "assert   buffer . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "LinearMathJNI _ writeHeader ( swigCPtr ,    this ,    buffer )  ;", "}", "}", "METHOD_END"], "methodName": ["writeHeader"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btDefaultSerializer"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGEN _ Link _ getNext ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGEN _ Link ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNext"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGEN _ Link _ getPrev ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGEN _ Link ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPrev"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btGEN _ Link _ insertAfter ( swigCPtr ,    this ,    btGEN _ Link . getCPtr ( link )  ,    link )  ;", "}", "METHOD_END"], "methodName": ["insertAfter"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btGEN _ Link _ insertBefore ( swigCPtr ,    this ,    btGEN _ Link . getCPtr ( link )  ,    link )  ;", "}", "METHOD_END"], "methodName": ["insertBefore"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGEN _ Link _ isHead ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isHead"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGEN _ Link _ isTail ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isTail"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btGEN _ Link _ remove ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_Link"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btGEN _ List _ addHead ( swigCPtr ,    this ,    btGEN _ Link . getCPtr ( link )  ,    link )  ;", "}", "METHOD_END"], "methodName": ["addHead"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_List"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btGEN _ List _ addTail ( swigCPtr ,    this ,    btGEN _ Link . getCPtr ( link )  ,    link )  ;", "}", "METHOD_END"], "methodName": ["addTail"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_List"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_List"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGEN _ List _ getHead ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGEN _ Link ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getHead"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_List"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btGEN _ List _ getTail ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btGEN _ Link ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTail"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGEN_List"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGeometryUtil _ areVerticesBehindPlane ( planeNormal ,    btVector 3 Array . getCPtr ( vertices )  ,    vertices ,    margin )  ;", "}", "METHOD_END"], "methodName": ["areVerticesBehindPlane"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGeometryUtil"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGeometryUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btGeometryUtil _ getPlaneEquationsFromVertices ( btVector 3 Array . getCPtr ( vertices )  ,    vertices ,    btVector 3 Array . getCPtr ( planeEquationsOut )  ,    planeEquationsOut )  ;", "}", "METHOD_END"], "methodName": ["getPlaneEquationsFromVertices"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGeometryUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btGeometryUtil _ getVerticesFromPlaneEquations ( btVector 3 Array . getCPtr ( planeEquations )  ,    planeEquations ,    btVector 3 Array . getCPtr ( verticesOut )  ,    verticesOut )  ;", "}", "METHOD_END"], "methodName": ["getVerticesFromPlaneEquations"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGeometryUtil"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGeometryUtil _ isInside ( btVector 3 Array . getCPtr ( vertices )  ,    vertices ,    planeNormal ,    margin )  ;", "}", "METHOD_END"], "methodName": ["isInside"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGeometryUtil"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btGeometryUtil _ isPointInsidePlanes ( btVector 3 Array . getCPtr ( planeEquations )  ,    planeEquations ,    point ,    margin )  ;", "}", "METHOD_END"], "methodName": ["isPointInsidePlanes"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btGeometryUtil"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashInt _ equals ( swigCPtr ,    this ,    btHashInt . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashInt"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashInt"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashInt _ getHash ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHash"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashInt"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashInt _ getUid 1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUid1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashInt"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btHashInt _ setUid 1  ( swigCPtr ,    this ,    uid )  ;", "}", "METHOD_END"], "methodName": ["setUid1"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashInt"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashPtr _ equals ( swigCPtr ,    this ,    btHashPtr . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashPtr"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashPtr"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashPtr _ getHash ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHash"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashPtr"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashPtr _ getPointer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashPtr"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashString _ equals ( swigCPtr ,    this ,    btHashString . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["equals"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashString"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashString"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashString _ hash _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getHash"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashString"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashString _ string _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getString"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashString"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btHashString _ portableStringCompare ( swigCPtr ,    this ,    src ,    dst )  ;", "}", "METHOD_END"], "methodName": ["portableStringCompare"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashString"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btHashString _ hash _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setHash"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btHashString"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ clearLines ( swigCPtr ,    this )  ;", "else", "LinearMathJNI _ clearLinesSwigExplici ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearLines"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btIDebugDraw _ draw 3 dText ( swigCPtr ,    this ,    location ,    textString )  ;", "}", "METHOD_END"], "methodName": ["draw3dText"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawAabb ( swigCPtr ,    this ,    from ,    to ,    color )  ;", "else", "LinearMathJNI _ drawAabbSwigExplici ( swigCPtr ,    this ,    from ,    to ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawAabb"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawArc _  _ SWIG _  1  ( swigCPtr ,    this ,    center ,    normal ,    axis ,    radiusA ,    radiusB ,    minAngle ,    maxAngle ,    color ,    drawSect )  ;", "else", "LinearMathJNI _ drawArcSwigExplici _  _ SWIG _  1  ( swigCPtr ,    this ,    center ,    normal ,    axis ,    radiusA ,    radiusB ,    minAngle ,    maxAngle ,    color ,    drawSect )  ;", "}", "METHOD_END"], "methodName": ["drawArc"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawArc _  _ SWIG _  0  ( swigCPtr ,    this ,    center ,    normal ,    axis ,    radiusA ,    radiusB ,    minAngle ,    maxAngle ,    color ,    drawSect ,    stepDegrees )  ;", "else", "LinearMathJNI _ drawArcSwigExplici _  _ SWIG _  0  ( swigCPtr ,    this ,    center ,    normal ,    axis ,    radiusA ,    radiusB ,    minAngle ,    maxAngle ,    color ,    drawSect ,    stepDegrees )  ;", "}", "METHOD_END"], "methodName": ["drawArc"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawBox _  _ SWIG _  1  ( swigCPtr ,    this ,    bbMin ,    bbMax ,    trans ,    color )  ;", "else", "LinearMathJNI _ drawBoxSwigExplici _  _ SWIG _  1  ( swigCPtr ,    this ,    bbMin ,    bbMax ,    trans ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawBox"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawBox _  _ SWIG _  0  ( swigCPtr ,    this ,    bbMin ,    bbMax ,    color )  ;", "else", "LinearMathJNI _ drawBoxSwigExplici _  _ SWIG _  0  ( swigCPtr ,    this ,    bbMin ,    bbMax ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawBox"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawCapsule ( swigCPtr ,    this ,    radius ,    halfHeight ,    upAxis ,    transform ,    color )  ;", "else", "LinearMathJNI _ drawCapsuleSwigExplici ( swigCPtr ,    this ,    radius ,    halfHeight ,    upAxis ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawCapsule"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawCone ( swigCPtr ,    this ,    radius ,    height ,    upAxis ,    transform ,    color )  ;", "else", "LinearMathJNI _ drawConeSwigExplici ( swigCPtr ,    this ,    radius ,    height ,    upAxis ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawCone"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btIDebugDraw _ drawContactPoint ( swigCPtr ,    this ,    PointOnB ,    normalOnB ,    distance ,    lifeTime ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawContactPoint"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawCylinder ( swigCPtr ,    this ,    radius ,    halfHeight ,    upAxis ,    transform ,    color )  ;", "else", "LinearMathJNI _ drawCylinderSwigExplici ( swigCPtr ,    this ,    radius ,    halfHeight ,    upAxis ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawCylinder"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btIDebugDraw _ drawLine _  _ SWIG _  0  ( swigCPtr ,    this ,    from ,    to ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawLine"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawLine _  _ SWIG _  1  ( swigCPtr ,    this ,    from ,    to ,    fromColor ,    toColor )  ;", "else", "LinearMathJNI _ drawLineSwigExplici _  _ SWIG _  1  ( swigCPtr ,    this ,    from ,    to ,    fromColor ,    toColor )  ;", "}", "METHOD_END"], "methodName": ["drawLine"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawPlane ( swigCPtr ,    this ,    planeNormal ,    planeConst ,    transform ,    color )  ;", "else", "LinearMathJNI _ drawPlaneSwigExplici ( swigCPtr ,    this ,    planeNormal ,    planeConst ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawPlane"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawSphere _  _ SWIG _  1  ( swigCPtr ,    this ,    p ,    radius ,    color )  ;", "else", "LinearMathJNI _ drawSphereSwigExplici _  _ SWIG _  1  ( swigCPtr ,    this ,    p ,    radius ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawSphere"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawSphere _  _ SWIG _  0  ( swigCPtr ,    this ,    radius ,    transform ,    color )  ;", "else", "LinearMathJNI _ drawSphereSwigExplici _  _ SWIG _  0  ( swigCPtr ,    this ,    radius ,    transform ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawSphere"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawSpherePatch _  _ SWIG _  2  ( swigCPtr ,    this ,    center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color )  ;", "else", "LinearMathJNI _ drawSpherePatchSwigExplici _  _ SWIG _  2  ( swigCPtr ,    this ,    center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color )  ;", "}", "METHOD_END"], "methodName": ["drawSpherePatch"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawSpherePatch _  _ SWIG _  1  ( swigCPtr ,    this ,    center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color ,    stepDegrees )  ;", "else", "LinearMathJNI _ drawSpherePatchSwigExplici _  _ SWIG _  1  ( swigCPtr ,    this ,    center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color ,    stepDegrees )  ;", "}", "METHOD_END"], "methodName": ["drawSpherePatch"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawSpherePatch _  _ SWIG _  0  ( swigCPtr ,    this ,    center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color ,    stepDegrees ,    drawCenter )  ;", "else", "LinearMathJNI _ drawSpherePatchSwigExplici _  _ SWIG _  0  ( swigCPtr ,    this ,    center ,    up ,    axis ,    radius ,    minTh ,    maxTh ,    minPs ,    maxPs ,    color ,    stepDegrees ,    drawCenter )  ;", "}", "METHOD_END"], "methodName": ["drawSpherePatch"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawTransform ( swigCPtr ,    this ,    transform ,    orthoLen )  ;", "else", "LinearMathJNI _ drawTransformSwigExplici ( swigCPtr ,    this ,    transform ,    orthoLen )  ;", "}", "METHOD_END"], "methodName": ["drawTransform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawTriangle _  _ SWIG _  0  ( swigCPtr ,    this ,    v 0  ,    v 1  ,    v 2  ,    arg 3  ,    arg 4  ,    arg 5  ,    color ,    alpha )  ;", "else", "LinearMathJNI _ drawTriangleSwigExplici _  _ SWIG _  0  ( swigCPtr ,    this ,    v 0  ,    v 1  ,    v 2  ,    arg 3  ,    arg 4  ,    arg 5  ,    color ,    alpha )  ;", "}", "METHOD_END"], "methodName": ["drawTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ drawTriangle _  _ SWIG _  1  ( swigCPtr ,    this ,    v 0  ,    v 1  ,    v 2  ,    color ,    arg 4  )  ;", "else", "LinearMathJNI _ drawTriangleSwigExplici _  _ SWIG _  1  ( swigCPtr ,    this ,    v 0  ,    v 1  ,    v 2  ,    color ,    arg 4  )  ;", "}", "METHOD_END"], "methodName": ["drawTriangle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ flushLines ( swigCPtr ,    this )  ;", "else", "LinearMathJNI _ flushLinesSwigExplici ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["flushLines"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btIDebugDraw _ getDebugMode ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDebugMode"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "return   new   btIDebugDraw . DefaultColors (  (  ( getClass (  )  )     =  =     ( btIDebugDraw . class )     ?    LinearMathJNI . btIDebugDraw _ getDefaultColors ( swigCPtr ,    this )     :    LinearMathJNI . btIDebugDraw _ getDefaultColorsSwigExplicitbtIDebugDraw ( swigCPtr ,    this )  )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["getDefaultColors"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btIDebugDraw _ reportErrorWarning ( swigCPtr ,    this ,    warningString )  ;", "}", "METHOD_END"], "methodName": ["reportErrorWarning"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btIDebugDraw _ setDebugMode ( swigCPtr ,    this ,    debugMode )  ;", "}", "METHOD_END"], "methodName": ["setDebugMode"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "if    (  ( getClass (  )  )     =  =     . class )  )", "LinearMathJNI _ setDefaultColors ( swigCPtr ,    this ,  . DefaultColors . getCPtr ( arg 0  )  ,    arg 0  )  ;", "else", "LinearMathJNI _ setDefaultColorsSwigExplici ( swigCPtr ,    this ,  . DefaultColors . getCPtr ( arg 0  )  ,    arg 0  )  ;", "}", "METHOD_END"], "methodName": ["setDefaultColors"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "LinearMathJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "LinearMathJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIDebugDraw"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btIParallelForBody _ forLoop ( swigCPtr ,    this ,    iBegin ,    iEnd )  ;", "}", "METHOD_END"], "methodName": ["forLoop"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIParallelForBody"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIParallelForBody"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btITaskScheduler _ activate ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["activate"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btITaskScheduler _ deactivate ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["deactivate"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btITaskScheduler _ getMaxNumThreads ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxNumThreads"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btITaskScheduler _ getName ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btITaskScheduler _ getNumThreads ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumThreads"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btITaskScheduler _ parallelFor ( swigCPtr ,    this ,    iBegin ,    iEnd ,    grainSize ,    btIParallelForBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["parallelFor"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btITaskScheduler _ setNumThreads ( swigCPtr ,    this ,    numThreads )  ;", "}", "METHOD_END"], "methodName": ["setNumThreads"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btITaskScheduler"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIntSortPredicate"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btIntSortPredicate _ operatorFunctionCall ( swigCPtr ,    this ,    a ,    b )  ;", "}", "METHOD_END"], "methodName": ["operatorFunctionCall"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btIntSortPredicate"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ absolute ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["absolute"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ adjoint ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["adjoint"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ cofac ( swigCPtr ,    this ,    r 1  ,    c 1  ,    r 2  ,    c 2  )  ;", "}", "METHOD_END"], "methodName": ["cofac"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ deSerialize ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ deSerializeDouble ( swigCPtr ,    this ,    btMatrix 3 x 3 DoubleData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ deSerializeFloat ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ determinant ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["determinant"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ diagonalize _  _ SWIG _  2  ( swigCPtr ,    this ,    rot )  ;", "}", "METHOD_END"], "methodName": ["diagonalize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ diagonalize _  _ SWIG _  1  ( swigCPtr ,    this ,    rot ,    tolerance )  ;", "}", "METHOD_END"], "methodName": ["diagonalize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ diagonalize _  _ SWIG _  0  ( swigCPtr ,    this ,    rot ,    tolerance ,    maxIter )  ;", "}", "METHOD_END"], "methodName": ["diagonalize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ extractRotation _  _ SWIG _  2  ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["extractRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ extractRotation _  _ SWIG _  1  ( swigCPtr ,    this ,    q ,    tolerance )  ;", "}", "METHOD_END"], "methodName": ["extractRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ extractRotation _  _ SWIG _  0  ( swigCPtr ,    this ,    q ,    tolerance ,    maxIter )  ;", "}", "METHOD_END"], "methodName": ["extractRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ getColumn ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getColumn"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ getEulerYPR ( swigCPtr ,    this ,    SWIGTYPE _ p _ float . getCPtr ( yaw )  ,    SWIGTYPE _ p _ float . getCPtr ( pitch )  ,    SWIGTYPE _ p _ float . getCPtr ( roll )  )  ;", "}", "METHOD_END"], "methodName": ["getEulerYPR"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ getEulerZYX _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ float . getCPtr ( yaw )  ,    SWIGTYPE _ p _ float . getCPtr ( pitch )  ,    SWIGTYPE _ p _ float . getCPtr ( roll )  )  ;", "}", "METHOD_END"], "methodName": ["getEulerZYX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ getEulerZYX _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ float . getCPtr ( yaw )  ,    SWIGTYPE _ p _ float . getCPtr ( pitch )  ,    SWIGTYPE _ p _ float . getCPtr ( roll )  ,    solution _ number )  ;", "}", "METHOD_END"], "methodName": ["getEulerZYX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ getIdentity (  )  ;", "}", "METHOD_END"], "methodName": ["getIdentity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "assert   m . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "LinearMathJNI _ getOpenGLSubMatrix ( swigCPtr ,    this ,    m )  ;", "}", "}", "METHOD_END"], "methodName": ["getOpenGLSubMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ getRotation ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["getRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ getRow ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["getRow"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ inverse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["inverse"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ operatorAdditionAssignment ( swigCPtr ,    this ,    m )  ;", "}", "METHOD_END"], "methodName": ["operatorAdditionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ operatorAssignment ( swigCPtr ,    this ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ operatorMultiplicationAssignment ( swigCPtr ,    this ,    m )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplicationAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ operatorSubscript ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ operatorSubscriptConst ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ operatorSubtractionAssignment ( swigCPtr ,    this ,    m )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtractionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ scaled ( swigCPtr ,    this ,    s )  ;", "}", "METHOD_END"], "methodName": ["scaled"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ serialize ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ serializeFloat ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ setEulerYPR ( swigCPtr ,    this ,    yaw ,    pitch ,    roll )  ;", "}", "METHOD_END"], "methodName": ["setEulerYPR"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ setEulerZYX ( swigCPtr ,    this ,    eulerX ,    eulerY ,    eulerZ )  ;", "}", "METHOD_END"], "methodName": ["setEulerZYX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "assert   m . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "LinearMathJNI _ setFromOpenGLSubMatrix ( swigCPtr ,    this ,    m )  ;", "}", "}", "METHOD_END"], "methodName": ["setFromOpenGLSubMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ setIdentity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setIdentity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ setRotation ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["setRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3  _ setValue ( swigCPtr ,    this ,    xx ,    xy ,    xz ,    yx ,    yy ,    yz ,    zx ,    zy ,    zz )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ solve 3  3  ( swigCPtr ,    this ,    b )  ;", "}", "METHOD_END"], "methodName": ["solve33"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ tdotx ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["tdotx"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ tdoty ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["tdoty"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ tdotz ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["tdotz"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ timesTranspose ( swigCPtr ,    this ,    m )  ;", "}", "METHOD_END"], "methodName": ["timesTranspose"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ transpose ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["transpose"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btMatrix 3 x 3  _ transposeTimes ( swigCPtr ,    this ,    m )  ;", "}", "METHOD_END"], "methodName": ["transposeTimes"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3DoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btMatrix 3 x 3 DoubleData _ el _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getEl"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3DoubleData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3 DoubleData _ el _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEl"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3DoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3FloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btMatrix 3 x 3 FloatData _ el _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getEl"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3FloatData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMatrix 3 x 3 FloatData _ el _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setEl"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMatrix3x3FloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMotionState _ getWorldTransform ( swigCPtr ,    this ,    worldTrans )  ;", "}", "METHOD_END"], "methodName": ["getWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMotionState"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btMotionState _ setWorldTransform ( swigCPtr ,    this ,    worldTrans )  ;", "}", "METHOD_END"], "methodName": ["setWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMotionState"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "dee (  )  ;", "}", "METHOD_END"], "methodName": ["swigDirectorDisconnect"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMotionState"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    false ;", "LinearMathJNI _ change _ ownership ( this ,    swigCPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["swigReleaseOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMotionState"}, {"methodBody": ["METHOD_START", "{", "swigCMemOwn    =    true ;", "LinearMathJNI _ change _ ownership ( this ,    swigCPtr ,    true )  ;", "}", "METHOD_END"], "methodName": ["swigTakeOwnership"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btMotionState"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPlane"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPlane _ dist _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDist"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPlane"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btPlane _ normal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormal"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPlane"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btPlane _ dist _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDist"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPlane"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btPlane _ normal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormal"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPlane"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPointerUid"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPointerUid _ ptr _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPointerUid"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPointerUid _ uniqueIds _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUniqueIds"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPointerUid"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btPointerUid _ ptr _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPointerUid"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btPointerUid _ uniqueIds _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setUniqueIds"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPointerUid"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPolarDecomposition _ decompose ( swigCPtr ,    this ,    a ,    u ,    h )  ;", "}", "METHOD_END"], "methodName": ["decompose"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPolarDecomposition"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPolarDecomposition"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPolarDecomposition _ maxIterations ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["maxIterations"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPolarDecomposition"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ allocate ( swigCPtr ,    this ,    size )  ;", "}", "METHOD_END"], "methodName": ["allocate"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btPoolAllocator _ freeMemory ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["freeMemory"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ getElementSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getElementSize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ getFreeCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFreeCount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ getMaxCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxCount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ getPoolAddress ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPoolAddress"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ getPoolAddressConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPoolAddressConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ getUsedCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUsedCount"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btPoolAllocator _ validPtr ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["validPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btPoolAllocator"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ getX ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ getY ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ getZ ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getZ"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ operatorEqualTo ( swigCPtr ,    this ,    btQuadWord . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ operatorNotEqualTo ( swigCPtr ,    this ,    btQuadWord . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorNotEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ operatorbtConstScalarPtr ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["operatorbtConstScalarPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ operatorbtScalarPtr ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["operatorbtScalarPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setMax ( swigCPtr ,    this ,    btQuadWord . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["setMax"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setMin ( swigCPtr ,    this ,    btQuadWord . getCPtr ( other )  ,    other )  ;", "}", "METHOD_END"], "methodName": ["setMin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setValue _  _ SWIG _  0  ( swigCPtr ,    this ,     _ x ,     _ y ,     _ z )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setValue _  _ SWIG _  1  ( swigCPtr ,    this ,     _ x ,     _ y ,     _ z ,     _ w )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setW ( swigCPtr ,    this ,     _ w )  ;", "}", "METHOD_END"], "methodName": ["setW"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setX ( swigCPtr ,    this ,     _ x )  ;", "}", "METHOD_END"], "methodName": ["setX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setY ( swigCPtr ,    this ,     _ y )  ;", "}", "METHOD_END"], "methodName": ["setY"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuadWord _ setZ ( swigCPtr ,    this ,     _ z )  ;", "}", "METHOD_END"], "methodName": ["setZ"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ w ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["w"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ x ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["x"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ y ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["y"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuadWord _ z ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["z"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuadWord"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ angle ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["angle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ angleShortestPath ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["angleShortestPath"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ deSerialize ( swigCPtr ,    this ,    btQuaternionFloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ deSerializeDouble ( swigCPtr ,    this ,    btQuaternionDoubleData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ deSerializeFloat ( swigCPtr ,    this ,    btQuaternionFloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ dot ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["dot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ farthest ( swigCPtr ,    this ,    qd )  ;", "}", "METHOD_END"], "methodName": ["farthest"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ getAngle ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ getAngleShortestPath ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngleShortestPath"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ getAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAxis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ getEulerZYX ( swigCPtr ,    this ,    SWIGTYPE _ p _ float . getCPtr ( yawZ )  ,    SWIGTYPE _ p _ float . getCPtr ( pitchY )  ,    SWIGTYPE _ p _ float . getCPtr ( rollX )  )  ;", "}", "METHOD_END"], "methodName": ["getEulerZYX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ getIdentity (  )  ;", "}", "METHOD_END"], "methodName": ["getIdentity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ getW ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getW"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ inverse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["inverse"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ length ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["length"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ length 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["length2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ nearest ( swigCPtr ,    this ,    qd )  ;", "}", "METHOD_END"], "methodName": ["nearest"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ normalize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["normalize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ normalized ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["normalized"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorAddition ( swigCPtr ,    this ,    q 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorAddition"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorAdditionAssignment ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["operatorAdditionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorDivision ( swigCPtr ,    this ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorDivision"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorDivisionAssignment ( swigCPtr ,    this ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorDivisionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorMultiplication ( swigCPtr ,    this ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorMultiplicationAssignment _  _ SWIG _  1  ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplicationAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorMultiplicationAssignment _  _ SWIG _  0  ( swigCPtr ,    this ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplicationAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorSubtraction _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorSubtraction _  _ SWIG _  0  ( swigCPtr ,    this ,    q 2  )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ operatorSubtractionAssignment ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtractionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ safeNormalize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["safeNormalize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ serialize ( swigCPtr ,    this ,    btQuaternionFloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ serializeDouble ( swigCPtr ,    this ,    btQuaternionDoubleData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serializeDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ serializeFloat ( swigCPtr ,    this ,    btQuaternionFloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ setEuler ( swigCPtr ,    this ,    yaw ,    pitch ,    roll )  ;", "}", "METHOD_END"], "methodName": ["setEuler"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ setEulerZYX ( swigCPtr ,    this ,    yawZ ,    pitchY ,    rollX )  ;", "}", "METHOD_END"], "methodName": ["setEulerZYX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternion _ setRotation ( swigCPtr ,    this ,    axis ,     _ angle )  ;", "}", "METHOD_END"], "methodName": ["setRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternion _ slerp ( swigCPtr ,    this ,    q ,    t )  ;", "}", "METHOD_END"], "methodName": ["slerp"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternion"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternionDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternionDoubleData _ floats _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternionDoubleData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternionDoubleData _ floats _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternionDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternionFloatData"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btQuaternionFloatData _ floats _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternionFloatData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btQuaternionFloatData _ floats _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btQuaternionFloatData"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ float ( LinearMathJNI . btScalarArray _ at ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btScalarArray _ atConst ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btScalarArray _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ copyFromArray ( swigCPtr ,    this ,    btScalarArray . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ float ( LinearMathJNI . btScalarArray _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ float ( LinearMathJNI . btScalarArray _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    fillValue )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ float ( LinearMathJNI . btScalarArray _ expandNonInitializing ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btScalarArray _ findBinarySearch ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findBinarySearch"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btScalarArray _ findLinearSearch ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btScalarArray _ findLinearSearch 2  ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   new   btScalarArray ( LinearMathJNI . btScalarArray _ operatorAssignment ( swigCPtr ,    this ,    btScalarArray . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ float ( LinearMathJNI . btScalarArray _ operatorSubscript ( swigCPtr ,    this ,    n )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btScalarArray _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ push _ back ( swigCPtr ,    this ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ remove ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btScalarArray _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btScalarArray _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btScalarArray"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSerializer _ allocate ( swigCPtr ,    this ,    size ,    numElements )  ;", "return   cPtr    =  =     0     ?    null    :    new   btChunk ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["allocate"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSerializer _ finalizeChunk ( swigCPtr ,    this ,    btChunk . getCPtr ( chunk )  ,    chunk ,    structType ,    chunkCode ,    oldPtr )  ;", "}", "METHOD_END"], "methodName": ["finalizeChunk"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSerializer _ findNameForPointer ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["findNameForPointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSerializer _ findPointer ( swigCPtr ,    this ,    oldPtr )  ;", "}", "METHOD_END"], "methodName": ["findPointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSerializer _ finishSerialization ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["finishSerialization"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSerializer _ getBufferPointer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBufferPointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSerializer _ getChunk ( swigCPtr ,    this ,    chunkIndex )  ;", "return   cPtr    =  =     0     ?    null    :    new   btChunk ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChunk"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSerializer _ getCurrentBufferSize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCurrentBufferSize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSerializer _ getNumChunks ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumChunks"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSerializer _ getSerializationFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSerializationFlags"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSerializer _ getUniquePointer ( swigCPtr ,    this ,    oldPtr )  ;", "}", "METHOD_END"], "methodName": ["getUniquePointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSerializer _ registerNameForPointer ( swigCPtr ,    this ,    ptr ,    name )  ;", "}", "METHOD_END"], "methodName": ["registerNameForPointer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSerializer _ serializeName ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["serializeName"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSerializer _ setSerializationFlags ( swigCPtr ,    this ,    flags )  ;", "}", "METHOD_END"], "methodName": ["setSerializationFlags"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSerializer _ startSerialization ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["startSerialization"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSerializer"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ addAngular ( swigCPtr ,    this ,    angular )  ;", "}", "METHOD_END"], "methodName": ["addAngular"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ addLinear ( swigCPtr ,    this ,    linear )  ;", "}", "METHOD_END"], "methodName": ["addLinear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ addValue ( swigCPtr ,    this ,    ax ,    ay ,    az ,    lx ,    ly ,    lz )  ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ addVector ( swigCPtr ,    this ,    angular ,    linear )  ;", "}", "METHOD_END"], "methodName": ["addVector"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSpatialForceVector _ getAngular ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngular"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSpatialForceVector _ bottomVec _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBottomVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSpatialForceVector _ getLinear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSpatialForceVector _ topVec _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTopVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialForceVector ( LinearMathJNI . btSpatialForceVector _ operatorAddition ( swigCPtr ,    this ,    btSpatialForceVector . getCPtr ( vec )  ,    vec )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorAddition"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialForceVector ( LinearMathJNI . btSpatialForceVector _ operatorAdditionAssignment ( swigCPtr ,    this ,    btSpatialForceVector . getCPtr ( vec )  ,    vec )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAdditionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialForceVector ( LinearMathJNI . btSpatialForceVector _ operatorMultiplication ( swigCPtr ,    this ,    s )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialForceVector ( LinearMathJNI . btSpatialForceVector _ operatorSubtraction _  _ SWIG _  1  ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialForceVector ( LinearMathJNI . btSpatialForceVector _ operatorSubtraction _  _ SWIG _  0  ( swigCPtr ,    this ,    btSpatialForceVector . getCPtr ( vec )  ,    vec )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialForceVector ( LinearMathJNI . btSpatialForceVector _ operatorSubtractionAssignment ( swigCPtr ,    this ,    btSpatialForceVector . getCPtr ( vec )  ,    vec )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtractionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ setAngular ( swigCPtr ,    this ,    angular )  ;", "}", "METHOD_END"], "methodName": ["setAngular"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ bottomVec _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBottomVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ setLinear ( swigCPtr ,    this ,    linear )  ;", "}", "METHOD_END"], "methodName": ["setLinear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ topVec _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTopVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ setValue ( swigCPtr ,    this ,    ax ,    ay ,    az ,    lx ,    ly ,    lz )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ setVector ( swigCPtr ,    this ,    angular ,    linear )  ;", "}", "METHOD_END"], "methodName": ["setVector"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialForceVector _ setZero ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setZero"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialForceVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ addAngular ( swigCPtr ,    this ,    angular )  ;", "}", "METHOD_END"], "methodName": ["addAngular"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ addLinear ( swigCPtr ,    this ,    linear )  ;", "}", "METHOD_END"], "methodName": ["addLinear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ addValue ( swigCPtr ,    this ,    ax ,    ay ,    az ,    lx ,    ly ,    lz )  ;", "}", "METHOD_END"], "methodName": ["addValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ addVector ( swigCPtr ,    this ,    angular ,    linear )  ;", "}", "METHOD_END"], "methodName": ["addVector"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSpatialMotionVector _ dot ( swigCPtr ,    this ,    btSpatialForceVector . getCPtr ( b )  ,    b )  ;", "}", "METHOD_END"], "methodName": ["dot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSpatialMotionVector _ getAngular ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngular"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSpatialMotionVector _ bottomVec _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBottomVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSpatialMotionVector _ getLinear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSpatialMotionVector _ topVec _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTopVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialMotionVector ( LinearMathJNI . btSpatialMotionVector _ operatorAddition ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( vec )  ,    vec )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorAddition"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialMotionVector ( LinearMathJNI . btSpatialMotionVector _ operatorAdditionAssignment ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( vec )  ,    vec )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAdditionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialMotionVector ( LinearMathJNI . btSpatialMotionVector _ operatorMultiplication ( swigCPtr ,    this ,    s )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialMotionVector ( LinearMathJNI . btSpatialMotionVector _ operatorMultiplicationAssignment ( swigCPtr ,    this ,    s )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplicationAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialMotionVector ( LinearMathJNI . btSpatialMotionVector _ operatorSubtraction _  _ SWIG _  1  ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialMotionVector ( LinearMathJNI . btSpatialMotionVector _ operatorSubtraction _  _ SWIG _  0  ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( vec )  ,    vec )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtraction"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialMotionVector ( LinearMathJNI . btSpatialMotionVector _ operatorSubtractionAssignment ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( vec )  ,    vec )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtractionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ setAngular ( swigCPtr ,    this ,    angular )  ;", "}", "METHOD_END"], "methodName": ["setAngular"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ bottomVec _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBottomVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ setLinear ( swigCPtr ,    this ,    linear )  ;", "}", "METHOD_END"], "methodName": ["setLinear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ topVec _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTopVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ setValue ( swigCPtr ,    this ,    ax ,    ay ,    az ,    lx ,    ly ,    lz )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ setVector ( swigCPtr ,    this ,    angular ,    linear )  ;", "}", "METHOD_END"], "methodName": ["setVector"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialMotionVector _ setZero ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setZero"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialMotionVector"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialTransformationMatrix"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSpatialTransformationMatrix _ rotMat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRotMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialTransformationMatrix"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSpatialTransformationMatrix _ trnVec _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTrnVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialTransformationMatrix"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialTransformationMatrix _ rotMat _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRotMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialTransformationMatrix"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialTransformationMatrix _ trnVec _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTrnVec"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialTransformationMatrix"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialTransformationMatrix _ transformInverse _  _ SWIG _  3  ( swigCPtr ,    this ,    btSymmetricSpatialDyad . getCPtr ( inMat )  ,    inMat ,    btSymmetricSpatialDyad . getCPtr ( outMat )  ,    outMat )  ;", "}", "METHOD_END"], "methodName": ["transformInverse"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialTransformationMatrix"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpatialTransformationMatrix _ transformInverse _  _ SWIG _  2  ( swigCPtr ,    this ,    btSymmetricSpatialDyad . getCPtr ( inMat )  ,    inMat ,    btSymmetricSpatialDyad . getCPtr ( outMat )  ,    outMat ,    outOp )  ;", "}", "METHOD_END"], "methodName": ["transformInverse"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpatialTransformationMatrix"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpinMutex"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpinMutex _ lock ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["lock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpinMutex"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btSpinMutex _ tryLock ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["tryLock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpinMutex"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSpinMutex _ unlock ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["unlock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSpinMutex"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btStackAlloc _ allocate ( swigCPtr ,    this ,    size )  ;", "}", "METHOD_END"], "methodName": ["allocate"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btStackAlloc"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btStackAlloc _ beginBlock ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBlock ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["beginBlock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btStackAlloc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btStackAlloc _ create ( swigCPtr ,    this ,    size )  ;", "}", "METHOD_END"], "methodName": ["create"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btStackAlloc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btStackAlloc _ destroy ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["destroy"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btStackAlloc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btStackAlloc _ endBlock ( swigCPtr ,    this ,    btBlock . getCPtr ( block )  ,    block )  ;", "}", "METHOD_END"], "methodName": ["endBlock"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btStackAlloc"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btStackAlloc _ getAvailableMemory ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAvailableMemory"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btStackAlloc"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btStackAlloc"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSymmetricSpatialDyad _ addMatrix ( swigCPtr ,    this ,    topLeftMat ,    topRightMat ,    bottomLeftMat )  ;", "}", "METHOD_END"], "methodName": ["addMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSymmetricSpatialDyad _ bottomLeftMat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBottomLeftMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSymmetricSpatialDyad _ topLeftMat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTopLeftMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btSymmetricSpatialDyad _ topRightMat _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTopRightMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "return   new   btSpatialForceVector ( LinearMathJNI . btSymmetricSpatialDyad _ operatorMultiplication ( swigCPtr ,    this ,    btSpatialMotionVector . getCPtr ( vec )  ,    vec )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "return   new   btSymmetricSpatialDyad ( LinearMathJNI . btSymmetricSpatialDyad _ operatorSubtractionAssignment ( swigCPtr ,    this ,    btSymmetricSpatialDyad . getCPtr ( mat )  ,    mat )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtractionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSymmetricSpatialDyad _ bottomLeftMat _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBottomLeftMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSymmetricSpatialDyad _ setIdentity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setIdentity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSymmetricSpatialDyad _ setMatrix ( swigCPtr ,    this ,    topLeftMat ,    topRightMat ,    bottomLeftMat )  ;", "}", "METHOD_END"], "methodName": ["setMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSymmetricSpatialDyad _ topLeftMat _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTopLeftMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btSymmetricSpatialDyad _ topRightMat _ set ( swigCPtr ,    this ,    btMatrix 3 x 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTopRightMat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btSymmetricSpatialDyad"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ deSerialize ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ deSerializeDouble ( swigCPtr ,    this ,    btTransformDoubleData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ deSerializeFloat ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ getBasis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBasis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ getBasisConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBasisConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ getIdentity (  )  ;", "}", "METHOD_END"], "methodName": ["getIdentity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ getOpenGLMatrix ( swigCPtr ,    this ,    m )  ;", "}", "METHOD_END"], "methodName": ["getOpenGLMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ getOrigin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ getOriginConst ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getOriginConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ getRotation ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ invXform ( swigCPtr ,    this ,    inVec )  ;", "}", "METHOD_END"], "methodName": ["invXform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ inverse ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["inverse"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ inverseTimes ( swigCPtr ,    this ,    t )  ;", "}", "METHOD_END"], "methodName": ["inverseTimes"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ mult ( swigCPtr ,    this ,    t 1  ,    t 2  )  ;", "}", "METHOD_END"], "methodName": ["mult"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ operatorAssignment ( swigCPtr ,    this ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ operatorFunctionCall ( swigCPtr ,    this ,    x )  ;", "}", "METHOD_END"], "methodName": ["operatorFunctionCall"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ operatorMultiplication _  _ SWIG _  2  ( swigCPtr ,    this ,    t )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ operatorMultiplication _  _ SWIG _  1  ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ operatorMultiplication _  _ SWIG _  0  ( swigCPtr ,    this ,    x )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplication"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTransform _ operatorMultiplicationAssignment ( swigCPtr ,    this ,    t )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplicationAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ serialize ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ serializeFloat ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ setBasis ( swigCPtr ,    this ,    basis )  ;", "}", "METHOD_END"], "methodName": ["setBasis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ setFromOpenGLMatrix ( swigCPtr ,    this ,    m )  ;", "}", "METHOD_END"], "methodName": ["setFromOpenGLMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ setIdentity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setIdentity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ setOrigin ( swigCPtr ,    this ,    origin )  ;", "}", "METHOD_END"], "methodName": ["setOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransform _ setRotation ( swigCPtr ,    this ,    q )  ;", "}", "METHOD_END"], "methodName": ["setRotation"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransform"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btTransformDoubleData _ basis _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBasis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformDoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btTransformDoubleData _ origin _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 DoubleData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformDoubleData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformDoubleData _ basis _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBasis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformDoubleData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformDoubleData _ origin _ set ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformDoubleData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btTransformFloatData _ basis _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBasis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    LinearMathJNI . btTransformFloatData _ origin _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformFloatData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformFloatData _ basis _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBasis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformFloatData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformFloatData _ origin _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformFloatData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformUtil _ calculateDiffAxisAngle ( transform 0  ,    transform 1  ,    axis ,    SWIGTYPE _ p _ float . getCPtr ( angle )  )  ;", "}", "METHOD_END"], "methodName": ["calculateDiffAxisAngle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformUtil _ calculateDiffAxisAngleQuaternion ( orn 0  ,    orn 1 a ,    axis ,    SWIGTYPE _ p _ float . getCPtr ( angle )  )  ;", "}", "METHOD_END"], "methodName": ["calculateDiffAxisAngleQuaternion"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformUtil _ calculateVelocity ( transform 0  ,    transform 1  ,    timeStep ,    linVel ,    angVel )  ;", "}", "METHOD_END"], "methodName": ["calculateVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformUtil _ calculateVelocityQuaternion ( pos 0  ,    pos 1  ,    orn 0  ,    orn 1  ,    timeStep ,    linVel ,    angVel )  ;", "}", "METHOD_END"], "methodName": ["calculateVelocityQuaternion"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformUtil"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformUtil"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTransformUtil _ integrateTransform ( curTrans ,    linvel ,    angvel ,    timeStep ,    predictedTransform )  ;", "}", "METHOD_END"], "methodName": ["integrateTransform"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTransformUtil"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTypedObject"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btTypedObject _ objectType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTypedObject"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btTypedObject _ objectType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setObjectType"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btTypedObject"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ absolute ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["absolute"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ angle ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["angle"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ closestAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["closestAxis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ cross ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["cross"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ deSerialize ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ deSerializeDouble ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ deSerializeFloat ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( dataIn )  ,    dataIn )  ;", "}", "METHOD_END"], "methodName": ["deSerializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ distance ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["distance"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ distance 2  ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["distance2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ dot ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["dot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ dot 3  ( swigCPtr ,    this ,    v 0  ,    v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["dot3"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ furthestAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["furthestAxis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ fuzzyZero ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["fuzzyZero"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ floats _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ getSkewSymmetricMatrix ( swigCPtr ,    this ,    btVector 3  . getCPtr ( v 0  )  ,    v 0  ,    btVector 3  . getCPtr ( v 1  )  ,    v 1  ,    btVector 3  . getCPtr ( v 2  )  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["getSkewSymmetricMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ getX ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ getY ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ getZ ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getZ"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ isZero ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["isZero"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ length ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["length"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ length 2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["length2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ lerp ( swigCPtr ,    this ,    v ,    t )  ;", "}", "METHOD_END"], "methodName": ["lerp"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ maxAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["maxAxis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ maxDot ( swigCPtr ,    this ,    btVector 3  . getCPtr ( array )  ,    array ,    array _ count ,    SWIGTYPE _ p _ float . getCPtr ( dotOut )  )  ;", "}", "METHOD_END"], "methodName": ["maxDot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ minAxis ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["minAxis"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ minDot ( swigCPtr ,    this ,    btVector 3  . getCPtr ( array )  ,    array ,    array _ count ,    SWIGTYPE _ p _ float . getCPtr ( dotOut )  )  ;", "}", "METHOD_END"], "methodName": ["minDot"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ norm ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["norm"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ normalize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["normalize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ normalized ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["normalized"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorAdditionAssignment ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["operatorAdditionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ operatorDelete _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ operatorDelete _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDelete"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ operatorDeleteArray _  _ SWIG _  0  ( swigCPtr ,    this ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ operatorDeleteArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["operatorDeleteArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorDivisionAssignment ( swigCPtr ,    this ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorDivisionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorEqualTo ( swigCPtr ,    this ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorMultiplicationAssignment _  _ SWIG _  1  ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplicationAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorMultiplicationAssignment _  _ SWIG _  0  ( swigCPtr ,    this ,    s )  ;", "}", "METHOD_END"], "methodName": ["operatorMultiplicationAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorNew _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorNew _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNew"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorNewArray _  _ SWIG _  0  ( swigCPtr ,    this ,    sizeInBytes )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorNewArray _  _ SWIG _  1  ( swigCPtr ,    this ,    arg 0  ,    ptr )  ;", "}", "METHOD_END"], "methodName": ["operatorNewArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorNotEqualTo ( swigCPtr ,    this ,    other )  ;", "}", "METHOD_END"], "methodName": ["operatorNotEqualTo"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorSubtractionAssignment ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["operatorSubtractionAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorbtConstScalarPtr ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["operatorbtConstScalarPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ operatorbtScalarPtr ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["operatorbtScalarPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ rotate ( swigCPtr ,    this ,    wAxis ,    angle )  ;", "}", "METHOD_END"], "methodName": ["rotate"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ safeNorm ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["safeNorm"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ safeNormalize ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["safeNormalize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ serialize ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ serializeDouble ( swigCPtr ,    this ,    btVector 3 DoubleData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serializeDouble"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ serializeFloat ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( dataOut )  ,    dataOut )  ;", "}", "METHOD_END"], "methodName": ["serializeFloat"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ floats _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setInterpolate 3  ( swigCPtr ,    this ,    v 0  ,    v 1  ,    rt )  ;", "}", "METHOD_END"], "methodName": ["setInterpolate3"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setMax ( swigCPtr ,    this ,    other )  ;", "}", "METHOD_END"], "methodName": ["setMax"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setMin ( swigCPtr ,    this ,    other )  ;", "}", "METHOD_END"], "methodName": ["setMin"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setValue ( swigCPtr ,    this ,     _ x ,     _ y ,     _ z )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setW ( swigCPtr ,    this ,     _ w )  ;", "}", "METHOD_END"], "methodName": ["setW"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setX ( swigCPtr ,    this ,     _ x )  ;", "}", "METHOD_END"], "methodName": ["setX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setY ( swigCPtr ,    this ,     _ y )  ;", "}", "METHOD_END"], "methodName": ["setY"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setZ ( swigCPtr ,    this ,     _ z )  ;", "}", "METHOD_END"], "methodName": ["setZ"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3  _ setZero ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["setZero"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ triple ( swigCPtr ,    this ,    v 1  ,    v 2  )  ;", "}", "METHOD_END"], "methodName": ["triple"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ w ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["w"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ x ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["x"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ y ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["y"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3  _ z ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["z"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ at ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["at"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ atConst ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["atConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ capacity ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["capacity"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ clear ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ copyFromArray ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( otherArray )  ,    otherArray )  ;", "}", "METHOD_END"], "methodName": ["copyFromArray"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ expand _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ expand _  _ SWIG _  0  ( swigCPtr ,    this ,    fillValue )  ;", "}", "METHOD_END"], "methodName": ["expand"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ expandNonInitializing ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["expandNonInitializing"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ findBinarySearch ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findBinarySearch"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ findLinearSearch ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ findLinearSearch 2  ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["findLinearSearch2"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ initializeFromBuffer ( swigCPtr ,    this ,    buffer ,    size ,    capacity )  ;", "}", "METHOD_END"], "methodName": ["initializeFromBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   new   btVector 3 Array ( LinearMathJNI . btVector 3 Array _ operatorAssignment ( swigCPtr ,    this ,    btVector 3 Array . getCPtr ( other )  ,    other )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorAssignment"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ operatorSubscript ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ operatorSubscriptConst ( swigCPtr ,    this ,    n )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ pop _ back ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pop_back"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ push _ back ( swigCPtr ,    this ,     _ Val )  ;", "}", "METHOD_END"], "methodName": ["push_back"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ remove ( swigCPtr ,    this ,    key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ removeAtIndex ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["removeAtIndex"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ reserve ( swigCPtr ,    this ,     _ Count )  ;", "}", "METHOD_END"], "methodName": ["reserve"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ resize _  _ SWIG _  1  ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ resize _  _ SWIG _  0  ( swigCPtr ,    this ,    newsize ,    fillData )  ;", "}", "METHOD_END"], "methodName": ["resize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ resizeNoInitialize ( swigCPtr ,    this ,    newsize )  ;", "}", "METHOD_END"], "methodName": ["resizeNoInitialize"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 Array _ size ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["size"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 Array _ swap ( swigCPtr ,    this ,    index 0  ,    index 1  )  ;", "}", "METHOD_END"], "methodName": ["swap"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3Array"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3DoubleData"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 DoubleData _ floats _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3DoubleData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 DoubleData _ floats _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3DoubleData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3FloatData"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 3 FloatData _ floats _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3FloatData"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 3 FloatData _ floats _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFloats"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector3FloatData"}, {"methodBody": ["METHOD_START", "{", "return   new   btVector 4  ( LinearMathJNI . btVector 4  _ absolute 4  ( swigCPtr ,    this )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["absolute4"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 4  _ closestAxis 4  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["closestAxis4"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector4"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 4  _ getW ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getW"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 4  _ maxAxis 4  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["maxAxis4"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . btVector 4  _ minAxis 4  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["minAxis4"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector4"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . btVector 4  _ setValue ( swigCPtr ,    this ,     _ x ,     _ y ,     _ z ,     _ w )  ;", "}", "METHOD_END"], "methodName": ["setValue"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.btVector4"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . int 4  _ w _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getW"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . int 4  _ x _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . int 4  _ y _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getY"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . int 4  _ z _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getZ"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ int ( LinearMathJNI . int 4  _ operatorSubscript ( swigCPtr ,    this ,    i )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscript"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "return   LinearMathJNI . int 4  _ operatorSubscriptConst ( swigCPtr ,    this ,    i )  ;", "}", "METHOD_END"], "methodName": ["operatorSubscriptConst"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . int 4  _ w _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setW"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . int 4  _ x _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setX"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . int 4  _ y _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setY"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "LinearMathJNI . int 4  _ z _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setZ"], "fileName": "com.badlogic.gdx.physics.bullet.linearmath.int4"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_a_3_1__a_3_1__float"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_bool_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Anchor_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Cluster_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Face_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Joint_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Link_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Material_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Node_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Note_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__RContact_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__SContact_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__Tetra_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__ePSolver____t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody__eVSolver____t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSoftBody_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_btSparseSdfT_3_t__Cell_p_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btAlignedObjectArrayT_int_t"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_btSoftBody__eFeature___"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_f_p_btSoftBody_float_float__void"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_float"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_int"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_p_SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_p_btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SWIGTYPE_p_p_btSoftBody__Node"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ adamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAdamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ av _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAv"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ clusterIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClusterIndex"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ collide _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollide"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ com _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCom"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ containsAnchor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getContainsAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ dimpulses _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ framerefs _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFramerefs"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ framexform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransformFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFramexform"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ idmass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getIdmass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ imass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getImass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ invwi _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInvwi"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ ldamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLdamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ locii _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocii"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ lv _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLv"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ masses _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMasses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ matching _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMatching"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ maxSelfCollisionImpulse _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxSelfCollisionImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ ndamping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNdamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ ndimpulses _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNdimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ nodeIndices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ numFrameRefs _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumFrameRefs"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ numMasses _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumMasses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ numNodes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ nvimpulses _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNvimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyClusterData _ selfCollisionImpulseFactor _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSelfCollisionImpulseFactor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyClusterData _ vimpulses _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ adamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAdamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ av _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAv"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ clusterIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClusterIndex"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ collide _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollide"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ com _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCom"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ containsAnchor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setContainsAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ dimpulses _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ framerefs _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFramerefs"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ framexform _ set ( swigCPtr ,    this ,    btTransformFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFramexform"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ idmass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setIdmass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ imass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setImass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ invwi _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInvwi"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ ldamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLdamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ locii _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocii"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ lv _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLv"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ masses _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setMasses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ matching _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMatching"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ maxSelfCollisionImpulse _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxSelfCollisionImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ ndamping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNdamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ ndimpulses _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNdimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ nodeIndices _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ numFrameRefs _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumFrameRefs"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ numMasses _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumMasses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ numNodes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ nvimpulses _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNvimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ selfCollisionImpulseFactor _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSelfCollisionImpulseFactor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyClusterData _ vimpulses _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVimpulses"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyClusterData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ aeroModel _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAeroModel"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ anchorHardness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAnchorHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ baumgarte _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBaumgarte"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ clusterIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClusterIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ collisionFlags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ damping _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ drag _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDrag"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ driftIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDriftIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ dynamicFriction _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDynamicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ kineticContactHardness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getKineticContactHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ lift _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLift"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ maxVolume _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ poseMatch _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPoseMatch"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ positionIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPositionIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ pressure _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPressure"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ rigidContactHardness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRigidContactHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ softContactHardness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftContactHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ softKineticClusterHardness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftKineticClusterHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ softKineticClusterImpulseSplit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftKineticClusterImpulseSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ softRigidClusterHardness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftRigidClusterHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ softRigidClusterImpulseSplit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftRigidClusterImpulseSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ softSoftClusterHardness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftSoftClusterHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ softSoftClusterImpulseSplit _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSoftSoftClusterImpulseSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ timeScale _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeScale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ velocityIterations _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVelocityIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyConfigData _ volume _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ aeroModel _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAeroModel"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ anchorHardness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAnchorHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ baumgarte _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBaumgarte"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ clusterIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClusterIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ collisionFlags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ damping _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDamping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ drag _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDrag"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ driftIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDriftIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ dynamicFriction _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDynamicFriction"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ kineticContactHardness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setKineticContactHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ lift _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLift"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ maxVolume _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ poseMatch _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPoseMatch"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ positionIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPositionIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ pressure _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPressure"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ rigidContactHardness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRigidContactHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ softContactHardness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftContactHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ softKineticClusterHardness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftKineticClusterHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ softKineticClusterImpulseSplit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftKineticClusterImpulseSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ softRigidClusterHardness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftRigidClusterHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ softRigidClusterImpulseSplit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftRigidClusterImpulseSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ softSoftClusterHardness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftSoftClusterHardness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ softSoftClusterImpulseSplit _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftSoftClusterImpulseSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ timeScale _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTimeScale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ velocityIterations _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVelocityIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyConfigData _ volume _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyConfigData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyFaceData _ material _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyMaterialData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyFaceData _ nodeIndices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyFaceData _ normal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormal"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyFaceData _ restArea _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestArea"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyFaceData _ material _ set ( swigCPtr ,    this ,    SoftBodyMaterialData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyFaceData _ nodeIndices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyFaceData _ normal _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormal"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyFaceData _ restArea _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestArea"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyFaceData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyLinkData _ bbending _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBbending"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyLinkData _ material _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyMaterialData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyLinkData _ nodeIndices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyLinkData _ restLength _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestLength"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyLinkData _ bbending _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBbending"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyLinkData _ material _ set ( swigCPtr ,    this ,    SoftBodyMaterialData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyLinkData _ nodeIndices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyLinkData _ restLength _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestLength"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyLinkData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyMaterialData _ angularStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAngularStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyMaterialData _ flags _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyMaterialData _ linearStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinearStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyMaterialData _ volumeStiffness _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVolumeStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyMaterialData _ angularStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAngularStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyMaterialData _ flags _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyMaterialData _ linearStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinearStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyMaterialData _ volumeStiffness _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVolumeStiffness"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyMaterialData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyNodeData _ accumulatedForce _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAccumulatedForce"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyNodeData _ area _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getArea"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyNodeData _ attach _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAttach"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyNodeData _ inverseMass _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getInverseMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyNodeData _ material _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyMaterialData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyNodeData _ normal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNormal"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyNodeData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyNodeData _ position _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPosition"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyNodeData _ previousPosition _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPreviousPosition"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyNodeData _ velocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ accumulatedForce _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAccumulatedForce"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ area _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setArea"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ attach _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAttach"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ inverseMass _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInverseMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ material _ set ( swigCPtr ,    this ,    SoftBodyMaterialData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ normal _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNormal"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ position _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPosition"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ previousPosition _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPreviousPosition"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyNodeData _ velocity _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyNodeData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyPoseData _ aqq _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAqq"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyPoseData _ bframe _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBframe"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyPoseData _ bvolume _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBvolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyPoseData _ com _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCom"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyPoseData _ numPositions _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumPositions"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyPoseData _ numWeigts _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumWeigts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyPoseData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyPoseData _ positions _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPositions"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyPoseData _ restVolume _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyPoseData _ rot _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRot"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyPoseData _ scale _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyPoseData _ weights _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWeights"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ aqq _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAqq"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ bframe _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBframe"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ bvolume _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBvolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ com _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCom"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ numPositions _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumPositions"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ numWeigts _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumWeigts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ positions _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPositions"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ restVolume _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ rot _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRot"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyPoseData _ scale _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setScale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "assert   value . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ weights _ set ( swigCPtr ,    this ,    value )  ;", "}", "}", "METHOD_END"], "methodName": ["setWeights"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyPoseData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyTetraData _ c 0  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getC0"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyTetraData _ c 1  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getC1"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyTetraData _ c 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getC2"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftBodyTetraData _ material _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyMaterialData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyTetraData _ nodeIndices _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyTetraData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftBodyTetraData _ restVolume _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyTetraData _ c 0  _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setC0"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyTetraData _ c 1  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setC1"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyTetraData _ c 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setC2"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyTetraData _ material _ set ( swigCPtr ,    this ,    SoftBodyMaterialData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyTetraData _ nodeIndices _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNodeIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyTetraData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftBodyTetraData _ restVolume _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftBodyTetraData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftRigidAnchorData _ c 0  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btMatrix 3 x 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getC0"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftRigidAnchorData _ c 1  _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getC1"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftRigidAnchorData _ c 2  _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getC2"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftRigidAnchorData _ localFrame _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLocalFrame"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . SoftRigidAnchorData _ nodeIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . SoftRigidAnchorData _ rigidBody _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btRigidBodyFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftRigidAnchorData _ c 0  _ set ( swigCPtr ,    this ,    btMatrix 3 x 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setC0"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftRigidAnchorData _ c 1  _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setC1"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftRigidAnchorData _ c 2  _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setC2"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftRigidAnchorData _ localFrame _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLocalFrame"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftRigidAnchorData _ nodeIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNodeIndex"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . SoftRigidAnchorData _ rigidBody _ set ( swigCPtr ,    this ,    btRigidBodyFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRigidBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.SoftRigidAnchorData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . Add ( a ,    b )  ;", "}", "METHOD_END"], "methodName": ["Add"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . AngularImpulseMatrix ( iia ,    iib )  ;", "}", "METHOD_END"], "methodName": ["AngularImpulseMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . ApplyClampedForce ( btSoftBody . Node . getCPtr ( n )  ,    n ,    f ,    dt )  ;", "}", "METHOD_END"], "methodName": ["ApplyClampedForce"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . AreaOf ( x 0  ,    x 1  ,    x 2  )  ;", "}", "METHOD_END"], "methodName": ["AreaOf"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . BaryCoord ( a ,    b ,    c ,    p )  ;", "}", "METHOD_END"], "methodName": ["BaryCoord"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . CenterOf ( btSoftBody . Face . getCPtr ( f )  ,    f )  ;", "}", "METHOD_END"], "methodName": ["CenterOf"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . Clamp ( v ,    maxlength )  ;", "}", "METHOD_END"], "methodName": ["Clamp"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ClusterMetric ( x ,    y )  ;", "}", "METHOD_END"], "methodName": ["ClusterMetric"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . Cross ( v )  ;", "}", "METHOD_END"], "methodName": ["Cross"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . Diagonal ( x )  ;", "}", "METHOD_END"], "methodName": ["Diagonal"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . EvaluateMedium ( btSoftBodyWorldInfo . getCPtr ( wfi )  ,    wfi ,    x ,    btSoftBody . sMedium . getCPtr ( medium )  ,    medium )  ;", "}", "METHOD_END"], "methodName": ["EvaluateMedium"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ImplicitSolve _  _ SWIG _  1  ( btSoftBody . ImplicitFn . getCPtr ( fn )  ,    fn ,    a ,    b ,    accuracy )  ;", "}", "METHOD_END"], "methodName": ["ImplicitSolve"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ImplicitSolve _  _ SWIG _  0  ( btSoftBody . ImplicitFn . getCPtr ( fn )  ,    fn ,    a ,    b ,    accuracy ,    maxiterations )  ;", "}", "METHOD_END"], "methodName": ["ImplicitSolve"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ImpulseMatrix _  _ SWIG _  1  ( ima ,    iia ,    ra ,    imb ,    iib ,    rb )  ;", "}", "METHOD_END"], "methodName": ["ImpulseMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ImpulseMatrix _  _ SWIG _  0  ( dt ,    ima ,    imb ,    iwi ,    r )  ;", "}", "METHOD_END"], "methodName": ["ImpulseMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . Lerp ( a ,    b ,    t )  ;", "}", "METHOD_END"], "methodName": ["Lerp"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . MassMatrix ( im ,    iwi ,    r )  ;", "}", "METHOD_END"], "methodName": ["MassMatrix"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . MatchEdge ( btSoftBody . Node . getCPtr ( a )  ,    a ,    btSoftBody . Node . getCPtr ( b )  ,    b ,    btSoftBody . Node . getCPtr ( ma )  ,    ma ,    btSoftBody . Node . getCPtr ( mb )  ,    mb )  ;", "}", "METHOD_END"], "methodName": ["MatchEdge"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . Mul ( a ,    b )  ;", "}", "METHOD_END"], "methodName": ["Mul"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . NormalizeAny ( v )  ;", "}", "METHOD_END"], "methodName": ["NormalizeAny"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . Orthogonalize ( m )  ;", "}", "METHOD_END"], "methodName": ["Orthogonalize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . PolarDecompose ( m ,    q ,    s )  ;", "}", "METHOD_END"], "methodName": ["PolarDecompose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ProjectOnAxis ( v ,    a )  ;", "}", "METHOD_END"], "methodName": ["ProjectOnAxis"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ProjectOnPlane ( v ,    a )  ;", "}", "METHOD_END"], "methodName": ["ProjectOnPlane"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . ProjectOrigin _  _ SWIG _  1  ( a ,    b ,    c ,    prj ,    SWIGTYPE _ p _ float . getCPtr ( sqd )  )  ;", "}", "METHOD_END"], "methodName": ["ProjectOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . ProjectOrigin _  _ SWIG _  0  ( a ,    b ,    prj ,    SWIGTYPE _ p _ float . getCPtr ( sqd )  )  ;", "}", "METHOD_END"], "methodName": ["ProjectOrigin"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . ScaleAlongAxis ( a ,    s )  ;", "}", "METHOD_END"], "methodName": ["ScaleAlongAxis"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . Sub ( a ,    b )  ;", "}", "METHOD_END"], "methodName": ["Sub"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . VolumeOf _  _ SWIG _  1  ( x 0  ,    x 1  ,    x 2  ,    x 3  )  ;", "}", "METHOD_END"], "methodName": ["VolumeOf"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "return   new   btDbvtAabbMm ( SoftbodyJNI . VolumeOf _  _ SWIG _  0  ( btSoftBody . Face . getCPtr ( f )  ,    f ,    margin )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["VolumeOf"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.Softbody"}, {"methodBody": ["METHOD_START", "{", "assert   basePointer . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   SoftbodyJNI . new _  _  _ SWIG _  0  ( basePointer ,    vertexOffset ,    vertexStride )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtCPUVertexBufferDescriptor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btCPUVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "assert   basePointer . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   SoftbodyJNI . new _  _  _ SWIG _  1  ( basePointer ,    vertexOffset ,    vertexStride ,    normalOffset ,    normalStride )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtCPUVertexBufferDescriptor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btCPUVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btCPUVertexBufferDescriptor _ getBasePointer ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBasePointer"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btCPUVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btCPUVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btDefaultSoftBodySolver _ copyBackToSoftBodies _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["copyBackToSoftBodies"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btDefaultSoftBodySolver _ copyBackToSoftBodies _  _ SWIG _  0  ( swigCPtr ,    this ,    bMove )  ;", "}", "METHOD_END"], "methodName": ["copyBackToSoftBodies"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btDefaultSoftBodySolver _ copySoftBodyToVertexBuffer ( swigCPtr ,    this ,    btSoftBody . getCPtr ( softBody )  ,    softBody ,    btVertexBufferDescriptor . getCPtr ( vertexBuffer )  ,    vertexBuffer )  ;", "}", "METHOD_END"], "methodName": ["copySoftBodyToVertexBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btDefaultSoftBodySolver _ optimize _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t . getCPtr ( softBodies )  )  ;", "}", "METHOD_END"], "methodName": ["optimize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btDefaultSoftBodySolver _ optimize _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t . getCPtr ( softBodies )  ,    forceUpdate )  ;", "}", "METHOD_END"], "methodName": ["optimize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btDefaultSoftBodySolver _ processCollision _  _ SWIG _  0  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( arg 0  )  ,    arg 0  ,    btCollisionObjectWrapper . getCPtr ( arg 1  )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["processCollision"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btDefaultSoftBodySolver _ processCollision _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( arg 0  )  ,    arg 0  ,    btSoftBody . getCPtr ( arg 1  )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["processCollision"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btDefaultSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btEigen"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btEigen _ system _  _ SWIG _  1  ( a ,    btMatrix 3 x 3  . getCPtr ( vectors )  ,    vectors )  ;", "}", "METHOD_END"], "methodName": ["system"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btEigen"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btEigen _ system _  _ SWIG _  0  ( a ,    btMatrix 3 x 3  . getCPtr ( vectors )  ,    vectors ,    btVector 3  . getCPtr ( values )  ,    values )  ;", "}", "METHOD_END"], "methodName": ["system"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btEigen"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ PSolve _ Anchors ( btSoftBody . getCPtr ( psb )  ,    psb ,    kst ,    ti )  ;", "}", "METHOD_END"], "methodName": ["PSolve_Anchors"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ PSolve _ Links ( btSoftBody . getCPtr ( psb )  ,    psb ,    kst ,    ti )  ;", "}", "METHOD_END"], "methodName": ["PSolve_Links"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ PSolve _ RContacts ( btSoftBody . getCPtr ( psb )  ,    psb ,    kst ,    ti )  ;", "}", "METHOD_END"], "methodName": ["PSolve_RContacts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ PSolve _ SContacts ( btSoftBody . getCPtr ( psb )  ,    psb ,    arg 1  ,    ti )  ;", "}", "METHOD_END"], "methodName": ["PSolve_SContacts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "assert   m . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   SoftbodyJNI . new _  _  _ SWIG _  0  ( WorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    node _ count ,    btVector 3  . getCPtr ( x )  ,    x ,    m )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "assert   vertices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   indices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   indexMap . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "return   SoftbodyJNI . new _  _  _ SWIG _  2  ( WorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    vertices ,    vertexSize ,    posOffset ,    normalOffset ,    indices ,    indexOffset ,    numVertices ,    indexMap ,    indexMapOffset )  ;", "}", "METHOD_END"], "methodName": ["SwigConstructbtSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ VSolve _ Links ( btSoftBody . getCPtr ( psb )  ,    psb ,    kst )  ;", "}", "METHOD_END"], "methodName": ["VSolve_Links"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ addAeroForceToFace ( swigCPtr ,    this ,    windVelocity ,    faceIndex )  ;", "}", "METHOD_END"], "methodName": ["addAeroForceToFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ addAeroForceToNode ( swigCPtr ,    this ,    windVelocity ,    nodeIndex )  ;", "}", "METHOD_END"], "methodName": ["addAeroForceToNode"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ addForce _  _ SWIG _  0  ( swigCPtr ,    this ,    force )  ;", "}", "METHOD_END"], "methodName": ["addForce"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ addForce _  _ SWIG _  1  ( swigCPtr ,    this ,    force ,    node )  ;", "}", "METHOD_END"], "methodName": ["addForce"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ addVelocity _  _ SWIG _  0  ( swigCPtr ,    this ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["addVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ addVelocity _  _ SWIG _  1  ( swigCPtr ,    this ,    velocity ,    node )  ;", "}", "METHOD_END"], "methodName": ["addVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAnchor _  _ SWIG _  2  ( swigCPtr ,    this ,    node ,    btRigidBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["appendAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAnchor _  _ SWIG _  1  ( swigCPtr ,    this ,    node ,    btRigidBody . getCPtr ( body )  ,    body ,    disableCollisionBetweenLinkedBodies )  ;", "}", "METHOD_END"], "methodName": ["appendAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAnchor _  _ SWIG _  0  ( swigCPtr ,    this ,    node ,    btRigidBody . getCPtr ( body )  ,    body ,    disableCollisionBetweenLinkedBodies ,    influence )  ;", "}", "METHOD_END"], "methodName": ["appendAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAnchor _  _ SWIG _  5  ( swigCPtr ,    this ,    node ,    btRigidBody . getCPtr ( body )  ,    body ,    localPivot )  ;", "}", "METHOD_END"], "methodName": ["appendAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAnchor _  _ SWIG _  4  ( swigCPtr ,    this ,    node ,    btRigidBody . getCPtr ( body )  ,    body ,    localPivot ,    disableCollisionBetweenLinkedBodies )  ;", "}", "METHOD_END"], "methodName": ["appendAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAnchor _  _ SWIG _  3  ( swigCPtr ,    this ,    node ,    btRigidBody . getCPtr ( body )  ,    body ,    localPivot ,    disableCollisionBetweenLinkedBodies ,    influence )  ;", "}", "METHOD_END"], "methodName": ["appendAnchor"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAngularJoint _  _ SWIG _  2  ( swigCPtr ,    this ,    btSoftBody . AJoint . Specs . getCPtr ( specs )  ,    specs )  ;", "}", "METHOD_END"], "methodName": ["appendAngularJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAngularJoint _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . AJoint . Specs . getCPtr ( specs )  ,    specs ,    btSoftBody . Body . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["appendAngularJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAngularJoint _  _ SWIG _  0  ( swigCPtr ,    this ,    btSoftBody . AJoint . Specs . getCPtr ( specs )  ,    specs ,    btSoftBody . Cluster . getCPtr ( body 0  )  ,    body 0  ,    btSoftBody . Body . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["appendAngularJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendAngularJoint _  _ SWIG _  3  ( swigCPtr ,    this ,    btSoftBody . AJoint . Specs . getCPtr ( specs )  ,    specs ,    btSoftBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["appendAngularJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendFace _  _ SWIG _  2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["appendFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendFace _  _ SWIG _  1  ( swigCPtr ,    this ,    model )  ;", "}", "METHOD_END"], "methodName": ["appendFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendFace _  _ SWIG _  0  ( swigCPtr ,    this ,    model ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["appendFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendFace _  _ SWIG _  4  ( swigCPtr ,    this ,    node 0  ,    node 1  ,    node 2  )  ;", "}", "METHOD_END"], "methodName": ["appendFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendFace _  _ SWIG _  3  ( swigCPtr ,    this ,    node 0  ,    node 1  ,    node 2  ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["appendFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLinearJoint _  _ SWIG _  2  ( swigCPtr ,    this ,    btSoftBody . LJoint . Specs . getCPtr ( specs )  ,    specs )  ;", "}", "METHOD_END"], "methodName": ["appendLinearJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLinearJoint _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . LJoint . Specs . getCPtr ( specs )  ,    specs ,    btSoftBody . Body . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["appendLinearJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLinearJoint _  _ SWIG _  0  ( swigCPtr ,    this ,    btSoftBody . LJoint . Specs . getCPtr ( specs )  ,    specs ,    btSoftBody . Cluster . getCPtr ( body 0  )  ,    body 0  ,    btSoftBody . Body . getCPtr ( body 1  )  ,    body 1  )  ;", "}", "METHOD_END"], "methodName": ["appendLinearJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLinearJoint _  _ SWIG _  3  ( swigCPtr ,    this ,    btSoftBody . LJoint . Specs . getCPtr ( specs )  ,    specs ,    btSoftBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["appendLinearJoint"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  8  ( swigCPtr ,    this ,    btSoftBody . Node . getCPtr ( node 0  )  ,    node 0  ,    btSoftBody . Node . getCPtr ( node 1  )  ,    node 1  )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  7  ( swigCPtr ,    this ,    btSoftBody . Node . getCPtr ( node 0  )  ,    node 0  ,    btSoftBody . Node . getCPtr ( node 1  )  ,    node 1  ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  6  ( swigCPtr ,    this ,    btSoftBody . Node . getCPtr ( node 0  )  ,    node 0  ,    btSoftBody . Node . getCPtr ( node 1  )  ,    node 1  ,    btSoftBody . Material . getCPtr ( mat )  ,    mat ,    bcheckexist )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  1  ( swigCPtr ,    this ,    model )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  0  ( swigCPtr ,    this ,    model ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  5  ( swigCPtr ,    this ,    node 0  ,    node 1  )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  4  ( swigCPtr ,    this ,    node 0  ,    node 1  ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendLink _  _ SWIG _  3  ( swigCPtr ,    this ,    node 0  ,    node 1  ,    btSoftBody . Material . getCPtr ( mat )  ,    mat ,    bcheckexist )  ;", "}", "METHOD_END"], "methodName": ["appendLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ appendMaterial ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . Material ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["appendMaterial"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNode ( swigCPtr ,    this ,    x ,    m )  ;", "}", "METHOD_END"], "methodName": ["appendNode"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  5  ( swigCPtr ,    this ,    text ,    o )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  4  ( swigCPtr ,    this ,    text ,    o ,    btVector 4  . getCPtr ( c )  ,    c )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  3  ( swigCPtr ,    this ,    text ,    o ,    btVector 4  . getCPtr ( c )  ,    c ,    btSoftBody . Node . getCPtr ( n 0  )  ,    n 0  )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  2  ( swigCPtr ,    this ,    text ,    o ,    btVector 4  . getCPtr ( c )  ,    c ,    btSoftBody . Node . getCPtr ( n 0  )  ,    n 0  ,    btSoftBody . Node . getCPtr ( n 1  )  ,    n 1  )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  1  ( swigCPtr ,    this ,    text ,    o ,    btVector 4  . getCPtr ( c )  ,    c ,    btSoftBody . Node . getCPtr ( n 0  )  ,    n 0  ,    btSoftBody . Node . getCPtr ( n 1  )  ,    n 1  ,    btSoftBody . Node . getCPtr ( n 2  )  ,    n 2  )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  0  ( swigCPtr ,    this ,    text ,    o ,    btVector 4  . getCPtr ( c )  ,    c ,    btSoftBody . Node . getCPtr ( n 0  )  ,    n 0  ,    btSoftBody . Node . getCPtr ( n 1  )  ,    n 1  ,    btSoftBody . Node . getCPtr ( n 2  )  ,    n 2  ,    btSoftBody . Node . getCPtr ( n 3  )  ,    n 3  )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  8  ( swigCPtr ,    this ,    text ,    o ,    btSoftBody . Face . getCPtr ( feature )  ,    feature )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  7  ( swigCPtr ,    this ,    text ,    o ,    btSoftBody . Link . getCPtr ( feature )  ,    feature )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendNote _  _ SWIG _  6  ( swigCPtr ,    this ,    text ,    o ,    btSoftBody . Node . getCPtr ( feature )  ,    feature )  ;", "}", "METHOD_END"], "methodName": ["appendNote"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendTetra _  _ SWIG _  0  ( swigCPtr ,    this ,    model ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["appendTetra"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendTetra _  _ SWIG _  2  ( swigCPtr ,    this ,    node 0  ,    node 1  ,    node 2  ,    node 3  )  ;", "}", "METHOD_END"], "methodName": ["appendTetra"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ appendTetra _  _ SWIG _  1  ( swigCPtr ,    this ,    node 0  ,    node 1  ,    node 2  ,    node 3  ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["appendTetra"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ applyClusters ( swigCPtr ,    this ,    drift )  ;", "}", "METHOD_END"], "methodName": ["applyClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ applyForces ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["applyForces"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ checkContact ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( colObjWrap )  ,    colObjWrap ,    x ,    margin ,    btSoftBody . sCti . getCPtr ( cti )  ,    cti )  ;", "}", "METHOD_END"], "methodName": ["checkContact"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ checkFace ( swigCPtr ,    this ,    node 0  ,    node 1  ,    node 2  )  ;", "}", "METHOD_END"], "methodName": ["checkFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ checkLink _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . Node . getCPtr ( node 0  )  ,    node 0  ,    btSoftBody . Node . getCPtr ( node 1  )  ,    node 1  )  ;", "}", "METHOD_END"], "methodName": ["checkLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ checkLink _  _ SWIG _  0  ( swigCPtr ,    this ,    node 0  ,    node 1  )  ;", "}", "METHOD_END"], "methodName": ["checkLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ cleanupClusters ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["cleanupClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterAImpulse ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    btSoftBody . Impulse . getCPtr ( impulse )  ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["clusterAImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ clusterCom _  _ SWIG _  0  ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster )  ;", "}", "METHOD_END"], "methodName": ["clusterCom"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ clusterCom _  _ SWIG _  1  ( swigCPtr ,    this ,    cluster )  ;", "}", "METHOD_END"], "methodName": ["clusterCom"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ clusterCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clusterCount"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterDAImpulse ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["clusterDAImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterDCImpulse ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["clusterDCImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterDImpulse ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    rpos ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["clusterDImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterImpulse ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    rpos ,    btSoftBody . Impulse . getCPtr ( impulse )  ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["clusterImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterVAImpulse ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["clusterVAImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterVImpulse ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    rpos ,    impulse )  ;", "}", "METHOD_END"], "methodName": ["clusterVImpulse"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ clusterVelocity ( btSoftBody . Cluster . getCPtr ( cluster )  ,    cluster ,    rpos )  ;", "}", "METHOD_END"], "methodName": ["clusterVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ cutLink _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . Node . getCPtr ( node 0  )  ,    node 0  ,    btSoftBody . Node . getCPtr ( node 1  )  ,    node 1  ,    position )  ;", "}", "METHOD_END"], "methodName": ["cutLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ cutLink _  _ SWIG _  0  ( swigCPtr ,    this ,    node 0  ,    node 1  ,    position )  ;", "}", "METHOD_END"], "methodName": ["cutLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ dampClusters ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["dampClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ defaultCollisionHandler _  _ SWIG _  0  ( swigCPtr ,    this ,    btCollisionObjectWrapper . getCPtr ( pcoWrap )  ,    pcoWrap )  ;", "}", "METHOD_END"], "methodName": ["defaultCollisionHandler"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ defaultCollisionHandler _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( psb )  ,    psb )  ;", "}", "METHOD_END"], "methodName": ["defaultCollisionHandler"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ evaluateCom ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["evaluateCom"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ generateBendingConstraints _  _ SWIG _  1  ( swigCPtr ,    this ,    distance )  ;", "}", "METHOD_END"], "methodName": ["generateBendingConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ generateBendingConstraints _  _ SWIG _  0  ( swigCPtr ,    this ,    distance ,    btSoftBody . Material . getCPtr ( mat )  ,    mat )  ;", "}", "METHOD_END"], "methodName": ["generateBendingConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ generateClusters _  _ SWIG _  1  ( swigCPtr ,    this ,    k )  ;", "}", "METHOD_END"], "methodName": ["generateClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ generateClusters _  _ SWIG _  0  ( swigCPtr ,    this ,    k ,    maxiterations )  ;", "}", "METHOD_END"], "methodName": ["generateClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ getAabb ( swigCPtr ,    this ,    aabbMin ,    aabbMax )  ;", "}", "METHOD_END"], "methodName": ["getAabb"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ anchors _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Anchor _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAnchors"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ bUpdateRtCst _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBUpdateRtCst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ bounds _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBounds"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ cdbvt _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCdbvt"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ cfg _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . Config ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCfg"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ clusterConnectivity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ bool _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getClusterConnectivity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ clusters _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Cluster _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ collisionDisabledObjects _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectConstArray ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionDisabledObjects"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ getFace ( swigCPtr ,    this ,    idx )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . Face ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFace"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ getFaceCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getFaceCount"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ faces _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Face _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFaces"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ fdbvt _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFdbvt"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "assert   buffer . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ getIndices ( swigCPtr ,    this ,    buffer ,    triangleCount )  ;", "}", "}", "METHOD_END"], "methodName": ["getIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ initialWorldTransform _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btTransform ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getInitialWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ joints _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Joint _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJoints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ getLink ( swigCPtr ,    this ,    idx )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . Link ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLink"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ getLinkCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getLinkCount"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ links _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Link _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ getMass ( swigCPtr ,    this ,    node )  ;", "}", "METHOD_END"], "methodName": ["getMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ materials _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Material _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ ndbvt _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDbvt ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNdbvt"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ getNode ( swigCPtr ,    this ,    idx )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . Node ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNode"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ getNodeCount ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNodeCount"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ nodes _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Node _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ notes _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Note _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNotes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ pose _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . Pose ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ rcontacts _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ RContact _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRcontacts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ restLengthScale _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getRestLengthScale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ scontacts _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ SContact _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getScontacts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ softBodySolver _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBodySolver ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSoftBodySolver"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ getSolver _  _ SWIG _  0  ( solver )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ f _ p _ btSoftBody _ float _ float _  _ void ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSolver"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ sst _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . SolverState ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ tag _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTag"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ tetras _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Tetra _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTetras"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ timeacc _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeacc"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ getTotalMass ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTotalMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ userIndexMapping _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getUserIndexMapping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "assert   buffer . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ getVertices _  _ SWIG _  0  ( swigCPtr ,    this ,    buffer ,    vertexCount ,    vertexSize ,    posOffset )  ;", "}", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "assert   vertices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   indices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   indexMap . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ getVertices _  _ SWIG _  2  ( swigCPtr ,    this ,    vertices ,    vertexSize ,    posOffset ,    normalOffset ,    indices ,    indexOffset ,    numVertices ,    indexMap ,    indexMapOffset )  ;", "}", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "assert   vertices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   indices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   indexMap . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ getVertices _  _ SWIG _  1  ( swigCPtr ,    this ,    vertices ,    vertexSize ,    posOffset ,    indices ,    indexOffset ,    numVertices ,    indexMap ,    indexMapOffset )  ;", "}", "}", "METHOD_END"], "methodName": ["getVertices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ getVolume ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ windVelocity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWindVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ worldInfo _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBodyWorldInfo ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldInfo"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ indicesToPointers _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["indicesToPointers"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "assert   map . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "SoftbodyJNI _ indicesToPointers _  _ SWIG _  0  ( swigCPtr ,    this ,    map )  ;", "}", "}", "METHOD_END"], "methodName": ["indicesToPointers"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ initDefaults ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["initDefaults"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ initializeClusters ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["initializeClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ initializeFaceTree ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["initializeFaceTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ integrateMotion ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["integrateMotion"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ pointersToIndices ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["pointersToIndices"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ predictMotion ( swigCPtr ,    this ,    dt )  ;", "}", "METHOD_END"], "methodName": ["predictMotion"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ prepareClusters ( swigCPtr ,    this ,    iterations )  ;", "}", "METHOD_END"], "methodName": ["prepareClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ randomizeConstraints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["randomizeConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ rayTest _  _ SWIG _  1  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    SWIGTYPE _ p _ float . getCPtr ( mint )  ,    SWIGTYPE _ p _ btSoftBody _  _ eFeature _  _  _  . getCPtr ( feature )  ,    SWIGTYPE _ p _ int . getCPtr ( index )  ,    bcountonly )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBody _ rayTest _  _ SWIG _  0  ( swigCPtr ,    this ,    rayFrom ,    rayTo ,    btSoftBody . sRayCast . getCPtr ( results )  ,    results )  ;", "}", "METHOD_END"], "methodName": ["rayTest"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ refine ( swigCPtr ,    this ,    btSoftBody . ImplicitFn . getCPtr ( ifn )  ,    ifn ,    accurary ,    cut )  ;", "}", "METHOD_END"], "methodName": ["refine"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ releaseCluster ( swigCPtr ,    this ,    index )  ;", "}", "METHOD_END"], "methodName": ["releaseCluster"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ releaseClusters ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["releaseClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ resetLinkRestLengths ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["resetLinkRestLengths"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ rotate ( swigCPtr ,    this ,    rot )  ;", "}", "METHOD_END"], "methodName": ["rotate"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ scale ( swigCPtr ,    this ,    scl )  ;", "}", "METHOD_END"], "methodName": ["scale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ anchors _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Anchor _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setAnchors"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ bUpdateRtCst _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBUpdateRtCst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ bounds _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBounds"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ cdbvt _ set ( swigCPtr ,    this ,    btDbvt . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCdbvt"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ cfg _ set ( swigCPtr ,    this ,    btSoftBody . Config . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCfg"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusterConnectivity _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ bool _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setClusterConnectivity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ clusters _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Cluster _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ collisionDisabledObjects _ set ( swigCPtr ,    this ,    btCollisionObjectConstArray . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionDisabledObjects"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ citerations ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_citerations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ collisions ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_collisions"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ diterations ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_diterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kAHR ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kAHR"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kCHR ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kCHR"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kDF ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kDF"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kDG ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kDG"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kDP ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kDP"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kKHR ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kKHR"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kLF ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kLF"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kMT ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kMT"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kPR ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kPR"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kSHR ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kSHR"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kSKHR _ CL ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kSKHR_CL"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kSK _ SPLT _ CL ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kSK_SPLT_CL"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kSRHR _ CL ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kSRHR_CL"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kSR _ SPLT _ CL ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kSR_SPLT_CL"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kSSHR _ CL ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kSSHR_CL"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kSS _ SPLT _ CL ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kSS_SPLT_CL"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kVC ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kVC"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ kVCF ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_kVCF"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ maxvolume ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_maxvolume"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ piterations ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_piterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ timescale ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_timescale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setConfig _ viterations ( swigCPtr ,    this ,    v )  ;", "}", "METHOD_END"], "methodName": ["setConfig_viterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ faces _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Face _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setFaces"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ fdbvt _ set ( swigCPtr ,    this ,    btDbvt . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFdbvt"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ initialWorldTransform _ set ( swigCPtr ,    this ,    btTransform . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setInitialWorldTransform"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ joints _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Joint _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setJoints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ links _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Link _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setLinks"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setMass ( swigCPtr ,    this ,    node ,    mass )  ;", "}", "METHOD_END"], "methodName": ["setMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ materials _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Material _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ ndbvt _ set ( swigCPtr ,    this ,    btDbvt . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNdbvt"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ nodes _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Node _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ notes _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Note _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setNotes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setPose ( swigCPtr ,    this ,    bvolume ,    bframe )  ;", "}", "METHOD_END"], "methodName": ["setPose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ pose _ set ( swigCPtr ,    this ,    btSoftBody . Pose . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ rcontacts _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ RContact _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setRcontacts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ restLengthScale _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRestLengthScale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ scontacts _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ SContact _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setScontacts"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ softBodySolver _ set ( swigCPtr ,    this ,    btSoftBodySolver . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSoftBodySolver"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setSolver ( swigCPtr ,    this ,    preset )  ;", "}", "METHOD_END"], "methodName": ["setSolver"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ sst _ set ( swigCPtr ,    this ,    btSoftBody . SolverState . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ tag _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTag"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ tetras _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _  _ Tetra _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setTetras"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ timeacc _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTimeacc"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setTotalDensity ( swigCPtr ,    this ,    density )  ;", "}", "METHOD_END"], "methodName": ["setTotalDensity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setTotalMass _  _ SWIG _  1  ( swigCPtr ,    this ,    mass )  ;", "}", "METHOD_END"], "methodName": ["setTotalMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setTotalMass _  _ SWIG _  0  ( swigCPtr ,    this ,    mass ,    fromfaces )  ;", "}", "METHOD_END"], "methodName": ["setTotalMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ userIndexMapping _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ int _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setUserIndexMapping"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setVelocity ( swigCPtr ,    this ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["setVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setVolumeDensity ( swigCPtr ,    this ,    density )  ;", "}", "METHOD_END"], "methodName": ["setVolumeDensity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setVolumeMass ( swigCPtr ,    this ,    mass )  ;", "}", "METHOD_END"], "methodName": ["setVolumeMass"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ setWindVelocity ( swigCPtr ,    this ,    velocity )  ;", "}", "METHOD_END"], "methodName": ["setWindVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ windVelocity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWindVelocity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ worldInfo _ set ( swigCPtr ,    this ,    btSoftBodyWorldInfo . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWorldInfo"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ solveClusters _  _ SWIG _  0  ( SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t . getCPtr ( bodies )  )  ;", "}", "METHOD_END"], "methodName": ["solveClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ solveClusters _  _ SWIG _  1  ( swigCPtr ,    this ,    sor )  ;", "}", "METHOD_END"], "methodName": ["solveClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ solveCommonConstraints ( SWIGTYPE _ p _ p _ btSoftBody . getCPtr ( bodies )  ,    count ,    iterations )  ;", "}", "METHOD_END"], "methodName": ["solveCommonConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ solveConstraints ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["solveConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ staticSolve ( swigCPtr ,    this ,    iterations )  ;", "}", "METHOD_END"], "methodName": ["staticSolve"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ transform ( swigCPtr ,    this ,    trs )  ;", "}", "METHOD_END"], "methodName": ["transform"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ translate ( swigCPtr ,    this ,    trs )  ;", "}", "METHOD_END"], "methodName": ["translate"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ upcast ( btCollisionObject . getCPtr ( colObj )  ,    colObj )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["upcast"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBody _ upcastConstBtCollisionObject ( btCollisionObject . getCPtr ( colObj )  ,    colObj )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["upcastConstBtCollisionObject"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updateArea _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateArea"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updateArea _  _ SWIG _  0  ( swigCPtr ,    this ,    averageArea )  ;", "}", "METHOD_END"], "methodName": ["updateArea"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updateBounds ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateBounds"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updateClusters ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updateConstants ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateConstants"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updateLinkConstants ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateLinkConstants"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updateNormals ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateNormals"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBody _ updatePose ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updatePose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBody"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyCollisionShape _ body _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyCollisionShape"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyCollisionShape _ body _ set ( swigCPtr ,    this ,    btSoftBody . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyCollisionShape"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyConcaveCollisionAlgorithm _ clearCache ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyConcaveCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ anchors _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftRigidAnchorData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getAnchors"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ clusters _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyClusterData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ collisionObjectData _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btCollisionObjectFloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCollisionObjectData"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ config _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyConfigData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getConfig"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ faces _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyFaceData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getFaces"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ joints _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBodyJointData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getJoints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ links _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyLinkData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getLinks"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ materials _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ p _ SoftBodyMaterialData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ nodes _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyNodeData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numAnchors _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumAnchors"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numClusters _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numFaces _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumFaces"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numJoints _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumJoints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numLinks _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numMaterials _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numNodes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyFloatData _ numTetrahedra _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumTetrahedra"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ pose _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyPoseData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getPose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyFloatData _ tetrahedra _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SoftBodyTetraData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getTetrahedra"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ anchors _ set ( swigCPtr ,    this ,    SoftRigidAnchorData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAnchors"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ clusters _ set ( swigCPtr ,    this ,    SoftBodyClusterData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ collisionObjectData _ set ( swigCPtr ,    this ,    btCollisionObjectFloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCollisionObjectData"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ config _ set ( swigCPtr ,    this ,    SoftBodyConfigData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setConfig"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ faces _ set ( swigCPtr ,    this ,    SoftBodyFaceData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setFaces"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ joints _ set ( swigCPtr ,    this ,    btSoftBodyJointData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJoints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ links _ set ( swigCPtr ,    this ,    SoftBodyLinkData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setLinks"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ materials _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ p _ SoftBodyMaterialData . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ nodes _ set ( swigCPtr ,    this ,    SoftBodyNodeData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numAnchors _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumAnchors"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numClusters _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumClusters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numFaces _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumFaces"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numJoints _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumJoints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numLinks _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumLinks"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numMaterials _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumMaterials"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numNodes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumNodes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ numTetrahedra _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNumTetrahedra"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ pose _ set ( swigCPtr ,    this ,    SoftBodyPoseData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyFloatData _ tetrahedra _ set ( swigCPtr ,    this ,    SoftBodyTetraData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTetrahedra"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyFloatData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyHelpers _ CalculateUV ( resx ,    resy ,    ix ,    iy ,    id )  ;", "}", "METHOD_END"], "methodName": ["CalculateUV"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyHelpers _ CreateEllipsoid ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    center ,    radius ,    res )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreateEllipsoid"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyHelpers _ CreateFromConvexHull _  _ SWIG _  1  ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    btVector 3  . getCPtr ( vertices )  ,    vertices ,    nvertices )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreateFromConvexHull"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyHelpers _ CreateFromConvexHull _  _ SWIG _  0  ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    btVector 3  . getCPtr ( vertices )  ,    vertices ,    nvertices ,    randomizeConstraints )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreateFromConvexHull"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyHelpers _ CreateFromTetGenData ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    ele ,    face ,    node ,    bfacelinks ,    btetralinks ,    bfacesfromtetras )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreateFromTetGenData"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "assert   vertices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   triangles . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "long   cPtr    =    SoftbodyJNI _ CreateFromTriMesh _  _ SWIG _  1  ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    vertices ,    triangles ,    ntriangles )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["CreateFromTriMesh"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "assert   vertices . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "assert   triangles . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "long   cPtr    =    SoftbodyJNI _ CreateFromTriMesh _  _ SWIG _  0  ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    vertices ,    triangles ,    ntriangles ,    randomizeConstraints )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["CreateFromTriMesh"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyHelpers _ CreatePatch ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    corner 0  0  ,    corner 1  0  ,    corner 0  1  ,    corner 1  1  ,    resx ,    resy ,    fixeds ,    gendiags )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreatePatch"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyHelpers _ CreatePatchUV _  _ SWIG _  1  ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    corner 0  0  ,    corner 1  0  ,    corner 0  1  ,    corner 1  1  ,    resx ,    resy ,    fixeds ,    gendiags )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreatePatchUV"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "assert   tex _ coords . isDirect (  )     :     \" Buffer   must   be   allocated   direct .  \"  ;", "{", "long   cPtr    =    SoftbodyJNI _ CreatePatchUV _  _ SWIG _  0  ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    corner 0  0  ,    corner 1  0  ,    corner 0  1  ,    corner 1  1  ,    resx ,    resy ,    fixeds ,    gendiags ,    tex _ coords )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "}", "METHOD_END"], "methodName": ["CreatePatchUV"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyHelpers _ CreateRope ( btSoftBodyWorldInfo . getCPtr ( worldInfo )  ,    worldInfo ,    from ,    to ,    res ,    fixeds )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["CreateRope"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ Draw _  _ SWIG _  1  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw )  ;", "}", "METHOD_END"], "methodName": ["Draw"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ Draw _  _ SWIG _  0  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    drawflags )  ;", "}", "METHOD_END"], "methodName": ["Draw"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawClusterTree _  _ SWIG _  2  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw )  ;", "}", "METHOD_END"], "methodName": ["DrawClusterTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawClusterTree _  _ SWIG _  1  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    mindepth )  ;", "}", "METHOD_END"], "methodName": ["DrawClusterTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawClusterTree _  _ SWIG _  0  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    mindepth ,    maxdepth )  ;", "}", "METHOD_END"], "methodName": ["DrawClusterTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawFaceTree _  _ SWIG _  2  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw )  ;", "}", "METHOD_END"], "methodName": ["DrawFaceTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawFaceTree _  _ SWIG _  1  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    mindepth )  ;", "}", "METHOD_END"], "methodName": ["DrawFaceTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawFaceTree _  _ SWIG _  0  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    mindepth ,    maxdepth )  ;", "}", "METHOD_END"], "methodName": ["DrawFaceTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawFrame ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw )  ;", "}", "METHOD_END"], "methodName": ["DrawFrame"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawInfos ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    masses ,    areas ,    stress )  ;", "}", "METHOD_END"], "methodName": ["DrawInfos"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawNodeTree _  _ SWIG _  2  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw )  ;", "}", "METHOD_END"], "methodName": ["DrawNodeTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawNodeTree _  _ SWIG _  1  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    mindepth )  ;", "}", "METHOD_END"], "methodName": ["DrawNodeTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ DrawNodeTree _  _ SWIG _  0  ( btSoftBody . getCPtr ( psb )  ,    psb ,    btIDebugDraw . getCPtr ( idraw )  ,    idraw ,    mindepth ,    maxdepth )  ;", "}", "METHOD_END"], "methodName": ["DrawNodeTree"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyHelpers _ ReoptimizeLinkOrder ( btSoftBody . getCPtr ( psb )  ,    psb )  ;", "}", "METHOD_END"], "methodName": ["ReoptimizeLinkOrder"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyHelpers"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ bodyA _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ bodyAtype _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBodyAtype"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ bodyB _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ bodyBtype _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBodyBtype"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ cfm _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getCfm"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ delete _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDelete"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ erp _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getErp"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ jointType _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getJointType"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ pad _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyJointData _ refs _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRefs"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyJointData _ relPosition _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3 FloatData ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getRelPosition"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyJointData _ split _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ bodyA _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBodyA"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ bodyAtype _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBodyAtype"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ bodyB _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBodyB"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ bodyBtype _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBodyBtype"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ cfm _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCfm"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ delete _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDelete"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ erp _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setErp"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ jointType _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setJointType"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ pad _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPad"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ refs _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRefs"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ relPosition _ set ( swigCPtr ,    this ,    btVector 3 FloatData . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setRelPosition"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyJointData _ split _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSplit"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyJointData"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyRigidBodyCollisionConfiguration"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodySolver _ checkInitialized ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["checkInitialized"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ copyBackToSoftBodies _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["copyBackToSoftBodies"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ copyBackToSoftBodies _  _ SWIG _  0  ( swigCPtr ,    this ,    bMove )  ;", "}", "METHOD_END"], "methodName": ["copyBackToSoftBodies"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodySolver _ getNumberOfPositionIterations ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumberOfPositionIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodySolver _ getNumberOfVelocityIterations ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNumberOfVelocityIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodySolver _ getSolverType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getSolverType"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodySolver _ getTimeScale ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTimeScale"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ optimize _  _ SWIG _  1  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t . getCPtr ( softBodies )  )  ;", "}", "METHOD_END"], "methodName": ["optimize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ optimize _  _ SWIG _  0  ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t . getCPtr ( softBodies )  ,    forceUpdate )  ;", "}", "METHOD_END"], "methodName": ["optimize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ predictMotion ( swigCPtr ,    this ,    solverdt )  ;", "}", "METHOD_END"], "methodName": ["predictMotion"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ processCollision _  _ SWIG _  0  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( arg 0  )  ,    arg 0  ,    btCollisionObjectWrapper . getCPtr ( arg 1  )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["processCollision"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ processCollision _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( arg 0  )  ,    arg 0  ,    btSoftBody . getCPtr ( arg 1  )  ,    arg 1  )  ;", "}", "METHOD_END"], "methodName": ["processCollision"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ setNumberOfPositionIterations ( swigCPtr ,    this ,    iterations )  ;", "}", "METHOD_END"], "methodName": ["setNumberOfPositionIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ setNumberOfVelocityIterations ( swigCPtr ,    this ,    iterations )  ;", "}", "METHOD_END"], "methodName": ["setNumberOfVelocityIterations"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ solveConstraints ( swigCPtr ,    this ,    solverdt )  ;", "}", "METHOD_END"], "methodName": ["solveConstraints"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolver _ updateSoftBodies ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["updateSoftBodies"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolver"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodySolverOutput _ copySoftBodyToVertexBuffer ( swigCPtr ,    this ,    btSoftBody . getCPtr ( softBody )  ,    softBody ,    btVertexBufferDescriptor . getCPtr ( vertexBuffer )  ,    vertexBuffer )  ;", "}", "METHOD_END"], "methodName": ["copySoftBodyToVertexBuffer"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolverOutput"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodySolverOutput"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyTriangleCallback _ clearCache ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["clearCache"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyTriangleCallback _ getAabbMax ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAabbMax"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyTriangleCallback _ getAabbMin ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAabbMin"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyTriangleCallback _ triangleCount _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleCount"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyTriangleCallback _ setTimeStepAndCounters ( swigCPtr ,    this ,    collisionMarginTriangle ,    btCollisionObjectWrapper . getCPtr ( triObjWrap )  ,    triObjWrap ,    btDispatcherInfo . getCPtr ( dispatchInfo )  ,    dispatchInfo ,    btManifoldResult . getCPtr ( resultOut )  ,    resultOut )  ;", "}", "METHOD_END"], "methodName": ["setTimeStepAndCounters"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyTriangleCallback _ triangleCount _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setTriangleCount"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyTriangleCallback"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyWorldInfo _ air _ density _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getAir_density"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyWorldInfo _ broadphase _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btBroadphaseInterface ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBroadphase"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyWorldInfo _ dispatcher _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btDispatcher ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getDispatcher"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyWorldInfo _ gravity _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getGravity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyWorldInfo _ maxDisplacement _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getMaxDisplacement"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyWorldInfo _ sparsesdf _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSparseSdf 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSparsesdf"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyWorldInfo _ water _ density _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWater_density"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftBodyWorldInfo _ water _ normal _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btVector 3  ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWater_normal"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftBodyWorldInfo _ water _ offset _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getWater_offset"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ air _ density _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setAir_density"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ broadphase _ set ( swigCPtr ,    this ,    btBroadphaseInterface . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setBroadphase"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ dispatcher _ set ( swigCPtr ,    this ,    btDispatcher . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setDispatcher"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ gravity _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setGravity"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ maxDisplacement _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setMaxDisplacement"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ sparsesdf _ set ( swigCPtr ,    this ,    btSparseSdf 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setSparsesdf"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ water _ density _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWater_density"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ water _ normal _ set ( swigCPtr ,    this ,    btVector 3  . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWater_normal"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftBodyWorldInfo _ water _ offset _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setWater_offset"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftBodyWorldInfo"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftClusterCollisionShape"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSoftClusterCollisionShape _ cluster _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   btSoftBody . Cluster ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCluster"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftClusterCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftClusterCollisionShape _ getShapeType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getShapeType"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftClusterCollisionShape"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftClusterCollisionShape _ cluster _ set ( swigCPtr ,    this ,    btSoftBody . Cluster . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setCluster"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftClusterCollisionShape"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftColliders"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ addSoftBody _  _ SWIG _  2  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["addSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ addSoftBody _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body ,    collisionFilterGroup )  ;", "}", "METHOD_END"], "methodName": ["addSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ addSoftBody _  _ SWIG _  0  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body ,    collisionFilterGroup ,    collisionFilterMask )  ;", "}", "METHOD_END"], "methodName": ["addSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ getDrawFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDrawFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t ( SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ getSoftBodyArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSoftBodyArray"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t ( SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ getSoftBodyArrayConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSoftBodyArrayConst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btSoftBodyWorldInfo ( SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ getWorldInfo ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldInfo"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btSoftBodyWorldInfo ( SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ getWorldInfoConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldInfoConst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ rayTestSingle ( rayFromTrans ,    rayToTrans ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    btCollisionShape . getCPtr ( collisionShape )  ,    collisionShape ,    colObjWorldTransform ,    RayResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTestSingle"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ removeSoftBody ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["removeSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftMultiBodyDynamicsWorld _ setDrawFlags ( swigCPtr ,    this ,    f )  ;", "}", "METHOD_END"], "methodName": ["setDrawFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftMultiBodyDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftRigidDynamicsWorld _ addSoftBody _  _ SWIG _  2  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["addSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftRigidDynamicsWorld _ addSoftBody _  _ SWIG _  1  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body ,    collisionFilterGroup )  ;", "}", "METHOD_END"], "methodName": ["addSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftRigidDynamicsWorld _ addSoftBody _  _ SWIG _  0  ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body ,    collisionFilterGroup ,    collisionFilterMask )  ;", "}", "METHOD_END"], "methodName": ["addSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSoftRigidDynamicsWorld _ getDrawFlags ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getDrawFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t ( SoftbodyJNI . btSoftRigidDynamicsWorld _ getSoftBodyArray ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSoftBodyArray"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSoftBody _ p _ t ( SoftbodyJNI . btSoftRigidDynamicsWorld _ getSoftBodyArrayConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getSoftBodyArrayConst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btSoftBodyWorldInfo ( SoftbodyJNI . btSoftRigidDynamicsWorld _ getWorldInfo ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldInfo"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   new   btSoftBodyWorldInfo ( SoftbodyJNI . btSoftRigidDynamicsWorld _ getWorldInfoConst ( swigCPtr ,    this )  ,    false )  ;", "}", "METHOD_END"], "methodName": ["getWorldInfoConst"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftRigidDynamicsWorld _ rayTestSingle ( rayFromTrans ,    rayToTrans ,    btCollisionObject . getCPtr ( collisionObject )  ,    collisionObject ,    btCollisionShape . getCPtr ( collisionShape )  ,    collisionShape ,    colObjWorldTransform ,    RayResultCallback . getCPtr ( resultCallback )  ,    resultCallback )  ;", "}", "METHOD_END"], "methodName": ["rayTestSingle"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftRigidDynamicsWorld _ removeSoftBody ( swigCPtr ,    this ,    btSoftBody . getCPtr ( body )  ,    body )  ;", "}", "METHOD_END"], "methodName": ["removeSoftBody"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSoftRigidDynamicsWorld _ setDrawFlags ( swigCPtr ,    this ,    f )  ;", "}", "METHOD_END"], "methodName": ["setDrawFlags"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftRigidDynamicsWorld"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSoftSoftCollisionAlgorithm"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ BuildCell ( swigCPtr ,    this ,    btSparseSdf 3  . Cell . getCPtr ( c )  ,    c )  ;", "}", "METHOD_END"], "methodName": ["BuildCell"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   new   btSparseSdf 3  . IntFrac ( SoftbodyJNI . btSparseSdf 3  _ Decompose ( x )  ,    true )  ;", "}", "METHOD_END"], "methodName": ["Decompose"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ DistanceToShape ( x ,    btCollisionShape . getCPtr ( shape )  ,    shape )  ;", "}", "METHOD_END"], "methodName": ["DistanceToShape"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ Evaluate ( swigCPtr ,    this ,    x ,    btCollisionShape . getCPtr ( shape )  ,    shape ,    normal ,    margin )  ;", "}", "METHOD_END"], "methodName": ["Evaluate"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ GarbageCollect _  _ SWIG _  1  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["GarbageCollect"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ GarbageCollect _  _ SWIG _  0  ( swigCPtr ,    this ,    lifetime )  ;", "}", "METHOD_END"], "methodName": ["GarbageCollect"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ Hash ( x ,    y ,    z ,    btCollisionShape . getCPtr ( shape )  ,    shape )  ;", "}", "METHOD_END"], "methodName": ["Hash"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ Initialize _  _ SWIG _  2  ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Initialize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ Initialize _  _ SWIG _  1  ( swigCPtr ,    this ,    hashsize )  ;", "}", "METHOD_END"], "methodName": ["Initialize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ Initialize _  _ SWIG _  0  ( swigCPtr ,    this ,    hashsize ,    clampCells )  ;", "}", "METHOD_END"], "methodName": ["Initialize"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ Lerp ( a ,    b ,    t )  ;", "}", "METHOD_END"], "methodName": ["Lerp"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ RemoveReferences ( swigCPtr ,    this ,    btCollisionShape . getCPtr ( pcs )  ,    pcs )  ;", "}", "METHOD_END"], "methodName": ["RemoveReferences"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ Reset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["Reset"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btSparseSdf 3  _ cells _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    new   SWIGTYPE _ p _ btAlignedObjectArrayT _ btSparseSdfT _  3  _ t _  _ Cell _ p _ t ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getCells"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ clampCells _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getClampCells"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ ncells _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNcells"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ nprobes _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNprobes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ nqueries _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNqueries"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ puid _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPuid"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btSparseSdf 3  _ voxelsz _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVoxelsz"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ cells _ set ( swigCPtr ,    this ,    SWIGTYPE _ p _ btAlignedObjectArrayT _ btSparseSdfT _  3  _ t _  _ Cell _ p _ t . getCPtr ( value )  )  ;", "}", "METHOD_END"], "methodName": ["setCells"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ clampCells _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setClampCells"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ ncells _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNcells"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ nprobes _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNprobes"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ nqueries _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setNqueries"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ puid _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPuid"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btSparseSdf 3  _ voxelsz _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setVoxelsz"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btSparseSdf3"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "long   cPtr    =    SoftbodyJNI . btTriIndex _ childShape _ get ( swigCPtr ,    this )  ;", "return   cPtr    =  =     0     ?    null    :    btCollisionShape . newDerivedObject ( cPtr ,    false )  ;", "}", "METHOD_END"], "methodName": ["getChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btTriIndex _ getPartId ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPartId"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btTriIndex _ PartIdTriangleIndex _ get ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getPartIdTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btTriIndex _ getTriangleIndex ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btTriIndex _ getUid ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getUid"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btTriIndex _ childShape _ set ( swigCPtr ,    this ,    btCollisionShape . getCPtr ( value )  ,    value )  ;", "}", "METHOD_END"], "methodName": ["setChildShape"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "SoftbodyJNI . btTriIndex _ PartIdTriangleIndex _ set ( swigCPtr ,    this ,    value )  ;", "}", "METHOD_END"], "methodName": ["setPartIdTriangleIndex"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btTriIndex"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btVertexBufferDescriptor _ getBufferType ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getBufferType"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btVertexBufferDescriptor _ getNormalOffset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNormalOffset"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btVertexBufferDescriptor _ getNormalStride ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getNormalStride"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btVertexBufferDescriptor _ getVertexOffset ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVertexOffset"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btVertexBufferDescriptor _ getVertexStride ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["getVertexStride"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btVertexBufferDescriptor _ hasNormals ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasNormals"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   SoftbodyJNI . btVertexBufferDescriptor _ hasVertexPositions ( swigCPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["hasVertexPositions"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.btVertexBufferDescriptor"}, {"methodBody": ["METHOD_START", "{", "return   obj    =  =    null    ?     0     :    obj . swigCPtr ;", "}", "METHOD_END"], "methodName": ["getCPtr"], "fileName": "com.badlogic.gdx.physics.bullet.softbody.fDrawFlags"}]