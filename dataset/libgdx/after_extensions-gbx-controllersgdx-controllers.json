[{"methodBody": ["METHOD_START", "{", "return   new   com . badlogic . gdx . utils . Array < ControllerListener >  (  )  ;", "}", "METHOD_END"], "methodName": ["getListeners"], "fileName": "com.badlogic.gdx.controllers.ControllerManagerStub"}, {"methodBody": ["METHOD_START", "{", "Controllers . initialize (  )  ;", "Controllers . getManager (  )  . addListener ( listener )  ;", "}", "METHOD_END"], "methodName": ["addListener"], "fileName": "com.badlogic.gdx.controllers.Controllers"}, {"methodBody": ["METHOD_START", "{", "Controllers . initialize (  )  ;", "Controllers . getManager (  )  . clearListeners (  )  ;", "}", "METHOD_END"], "methodName": ["clearListeners"], "fileName": "com.badlogic.gdx.controllers.Controllers"}, {"methodBody": ["METHOD_START", "{", "Controllers . initialize (  )  ;", "return   Controllers . getManager (  )  . getControllers (  )  ;", "}", "METHOD_END"], "methodName": ["getControllers"], "fileName": "com.badlogic.gdx.controllers.Controllers"}, {"methodBody": ["METHOD_START", "{", "Controllers . initialize (  )  ;", "return   Controllers . getManager (  )  . getListeners (  )  ;", "}", "METHOD_END"], "methodName": ["getListeners"], "fileName": "com.badlogic.gdx.controllers.Controllers"}, {"methodBody": ["METHOD_START", "{", "return   Controllers . managers . get ( app )  ;", "}", "METHOD_END"], "methodName": ["getManager"], "fileName": "com.badlogic.gdx.controllers.Controllers"}, {"methodBody": ["METHOD_START", "{", "if    ( Controllers . managers . containsKey ( app )  )", "return ;", "String   className    =    null ;", "ApplicationType   type    =    app . getType (  )  ;", "ControllerManager   manager    =    null ;", "if    ( type    =  =     ( ApplicationType . Android )  )     {", "if    (  ( app . getVersion (  )  )     >  =     1  2  )     {", "className    =     \" android . AndroidControllers \"  ;", "} else    {", "app . log ( Controllers . TAG ,     \" No   controller   manager   is   available   for   Android   versions    <    API   level    1  2  \"  )  ;", "manager    =    new   ControllerManagerStub (  )  ;", "}", "} else", "if    ( type    =  =     ( ApplicationType . Desktop )  )     {", "if    (  ( Gdx . graphics . getType (  )  )     =  =     ( com . badlogic . gdx . Graphics . GraphicsType . LWJGL 3  )  )     {", "className    =     \" lwjgl 3  . Lwjgl 3 ControllerManager \"  ;", "} else    {", "className    =     \" desktop . DesktopControllerManager \"  ;", "}", "} else", "if    ( type    =  =     ( ApplicationType . WebGL )  )     {", "className    =     \" gwt . GwtControllers \"  ;", "} else    {", "app . log ( Controllers . TAG ,     (  \" No   controller   manager   is   available   for :     \"     +     ( app . getType (  )  )  )  )  ;", "manager    =    new   ControllerManagerStub (  )  ;", "}", "if    ( manager    =  =    null )     {", "try    {", "Class   controllerManagerClass    =    ClassReflection . forName ( className )  ;", "manager    =     (  ( ControllerManager )     ( ClassReflection . newInstance ( controllerManagerClass )  )  )  ;", "}    catch    ( Throwable   ex )     {", "throw   new   GdxRuntimeException (  (  \" Error   creating   controller   manager :     \"     +    className )  ,    ex )  ;", "}", "}", "Controllers . managers . put ( app ,    manager )  ;", "final   Application   app    =    Gdx . app ;", "app . addLifecycleListener ( new   LifecycleListener (  )     {", "@ Override", "public   void   resume (  )     {", "}", "@ Override", "public   void   pause (  )     {", "}", "@ Override", "public   void   dispose (  )     {", "Controllers . managers . remove ( app )  ;", "app . log ( Controllers . TAG ,     (  (  \" removed   manager   for   application ,     \"     +     ( Controllers . managers . size )  )     +     \"    managers   active \"  )  )  ;", "}", "}  )  ;", "app . log ( Controllers . TAG ,     (  (  \" added   manager   for   application ,     \"     +     ( Controllers . managers . size )  )     +     \"    managers   active \"  )  )  ;", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "com.badlogic.gdx.controllers.Controllers"}, {"methodBody": ["METHOD_START", "{", "Controllers . initialize (  )  ;", "Controllers . getManager (  )  . removeListener ( listener )  ;", "}", "METHOD_END"], "methodName": ["removeListener"], "fileName": "com.badlogic.gdx.controllers.Controllers"}, {"methodBody": ["METHOD_START", "{", "return    ( Ouya . runningOnOuya )     |  |     ( Ouya . simulateRunningOnOuya )  ;", "}", "METHOD_END"], "methodName": ["isRunningOnOuya"], "fileName": "com.badlogic.gdx.controllers.mappings.Ouya"}, {"methodBody": ["METHOD_START", "{", "return   controller . getName (  )  . contains (  \" Xbox \"  )  ;", "}", "METHOD_END"], "methodName": ["isXboxController"], "fileName": "com.badlogic.gdx.controllers.mappings.Xbox"}]