[{"methodBody": ["METHOD_START", "{", "return   deviceId ;", "}", "METHOD_END"], "methodName": ["getDeviceId"], "fileName": "com.badlogic.gdx.controllers.android.AndroidController"}, {"methodBody": ["METHOD_START", "{", "return   this . listeners ;", "}", "METHOD_END"], "methodName": ["getListeners"], "fileName": "com.badlogic.gdx.controllers.android.AndroidController"}, {"methodBody": ["METHOD_START", "{", "return   povAxis ;", "}", "METHOD_END"], "methodName": ["hasPovAxis"], "fileName": "com.badlogic.gdx.controllers.android.AndroidController"}, {"methodBody": ["METHOD_START", "{", "return   attached ;", "}", "METHOD_END"], "methodName": ["isAttached"], "fileName": "com.badlogic.gdx.controllers.android.AndroidController"}, {"methodBody": ["METHOD_START", "{", "this . attached    =    attached ;", "}", "METHOD_END"], "methodName": ["setAttached"], "fileName": "com.badlogic.gdx.controllers.android.AndroidController"}, {"methodBody": ["METHOD_START", "{", "InputDevice   device    =    InputDevice . getDevice ( deviceId )  ;", "if    (  !  ( isController ( device )  )  )", "return ;", "String   name    =    device . getName (  )  ;", "AndroidController   controller    =    new   AndroidController ( deviceId ,    name )  ;", "controllerMap . put ( deviceId ,    controller )  ;", "if    ( sendEvent )     {", "synchronized ( eventQueue )     {", "AndroidControllerEvent   event    =    eventPool . obtain (  )  ;", "event . type    =    AndroidControllerEvent . CONNECTED ;", "event . controller    =    controller ;", "eventQueue . add ( event )  ;", "}", "} else    {", "controllers . add ( controller )  ;", "}", "app . log (  . TAG ,     (  (  \" added   controller    '  \"     +    name )     +     \"  '  \"  )  )  ;", "}", "METHOD_END"], "methodName": ["addController"], "fileName": "com.badlogic.gdx.controllers.android.AndroidControllers"}, {"methodBody": ["METHOD_START", "{", "IntMap < AndroidController >    removedControllers    =    new   IntMap < AndroidController >  (  )  ;", "removedControllers . putAll ( controllerMap )  ;", "for    ( int   deviceId    :    InputDevice . getDeviceIds (  )  )     {", "InputDevice   device    =    InputDevice . getDevice ( deviceId )  ;", "AndroidController   controller    =    controllerMap . get ( deviceId )  ;", "if    ( controller    !  =    null )     {", "removedControllers . remove ( deviceId )  ;", "} else    {", "addController ( deviceId ,    sendEvent )  ;", "}", "}", "for    ( Entry < AndroidController >    entry    :    removedControllers . entries (  )  )     {", "removeController ( entry . key )  ;", "}", "}", "METHOD_END"], "methodName": ["gatherControllers"], "fileName": "com.badlogic.gdx.controllers.android.AndroidControllers"}, {"methodBody": ["METHOD_START", "{", "return    (  (  ( device . getSources (  )  )     &     ( InputDevice . SOURCE _ CLASS _ JOYSTICK )  )     =  =     ( InputDevice . SOURCE _ CLASS _ JOYSTICK )  )     &  &     (  (  (  ( device . getSources (  )  )     &     ( InputDevice . SOURCE _ GAMEPAD )  )     =  =     ( InputDevice . SOURCE _ GAMEPAD )  )     |  |     (  ( device . getKeyboardType (  )  )     !  =     ( InputDevice . KEYBOARD _ TYPE _ ALPHABETIC )  )  )  ;", "}", "METHOD_END"], "methodName": ["isController"], "fileName": "com.badlogic.gdx.controllers.android.AndroidControllers"}, {"methodBody": ["METHOD_START", "{", "AndroidController   controller    =    controllerMap . remove ( deviceId )  ;", "if    ( controller    !  =    null )     {", "synchronized ( eventQueue )     {", "AndroidControllerEvent   event    =    eventPool . obtain (  )  ;", "event . type    =    AndroidControllerEvent . DISCONNECTED ;", "event . controller    =    controller ;", "eventQueue . add ( event )  ;", "}", "app . log (  . TAG ,     (  (  \" removed   controller    '  \"     +     ( controller . getName (  )  )  )     +     \"  '  \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["removeController"], "fileName": "com.badlogic.gdx.controllers.android.AndroidControllers"}, {"methodBody": ["METHOD_START", "{", "new   Runnable (  )     {", "@ SuppressWarnings (  \" synthetic - access \"  )", "@ Override", "public   void   run (  )     {", "synchronized ( eventQueue )     {", "for    ( Event   event    :    eventQueue )     {", "switch    ( event . type )     {", "case   Event . CONNECTED    :", "controllers . add ( event . controller )  ;", "for    ( ControllerListener   listener    :    listeners )     {", "listener . connected ( event . controller )  ;", "}", "break ;", "case   Event . DISCONNECTED    :", "controllers . removeValue ( event . controller ,    true )  ;", "for    ( ControllerListener   listener    :    listeners )     {", "listener . disconnected ( event . controller )  ;", "}", "for    ( ControllerListener   listener    :    event . controller . getListeners (  )  )     {", "listener . disconnected ( event . controller )  ;", "}", "break ;", "case   Event . BUTTON _ DOWN    :", "event . controller . buttons . put ( event . code ,    event . code )  ;", "for    ( ControllerListener   listener    :    listeners )     {", "if    ( listener . buttonDown ( event . controller ,    event . code )  )", "break ;", "}", "for    ( ControllerListener   listener    :    event . controller . getListeners (  )  )     {", "if    ( listener . buttonDown ( event . controller ,    event . code )  )", "break ;", "}", "break ;", "case   Event . BUTTON _ UP    :", "event . controller . buttons . remove ( event . code ,     0  )  ;", "for    ( ControllerListener   listener    :    listeners )     {", "if    ( listener . buttonUp ( event . controller ,    event . code )  )", "break ;", "}", "for    ( ControllerListener   listener    :    event . controller . getListeners (  )  )     {", "if    ( listener . buttonUp ( event . controller ,    event . code )  )", "break ;", "}", "break ;", "case   Event . AXIS    :", "event . controller . axes [ event . code ]     =    event . axisValue ;", "for    ( ControllerListener   listener    :    listeners )     {", "if    ( listener . axisMoved ( event . controller ,    event . code ,    event . axisValue )  )", "break ;", "}", "for    ( ControllerListener   listener    :    event . controller . getListeners (  )  )     {", "if    ( listener . axisMoved ( event . controller ,    event . code ,    event . axisValue )  )", "break ;", "}", "break ;", "case   Event . POV    :", "for    ( ControllerListener   listener    :    listeners )     {", "if    ( listener . povMoved ( event . controller ,     0  ,    event . povDirection )  )", "break ;", "}", "for    ( ControllerListener   listener    :    event . controller . getListeners (  )  )     {", "if    ( listener . povMoved ( event . controller ,     0  ,    event . povDirection )  )", "break ;", "}", "break ;", "default    :", "}", "}", "eventPool . freeAll ( eventQueue )  ;", "eventQueue . clear (  )  ;", "}", "app . postRunnable ( this )  ;", "}", "}  . run (  )  ;", "}", "METHOD_END"], "methodName": ["setupEventQueue"], "fileName": "com.badlogic.gdx.controllers.android.AndroidControllers"}]