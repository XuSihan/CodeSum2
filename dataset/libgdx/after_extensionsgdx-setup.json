[{"methodBody": ["METHOD_START", "{", "BuildScriptHelper . write ( wr ,     \" allprojects    {  \"  )  ;", "BuildScriptHelper . write ( wr ,     \" apply   plugin :     \\  \" eclipse \\  \"  \"  )  ;", "BuildScriptHelper . write ( wr ,     \" apply   plugin :     \\  \" idea \\  \"  \"  )  ;", "BuildScriptHelper . space ( wr )  ;", "BuildScriptHelper . write ( wr ,     \" version    =     '  1  .  0  '  \"  )  ;", "BuildScriptHelper . write ( wr ,     \" ext    {  \"  )  ;", "BuildScriptHelper . write ( wr ,     \" appName    =     \\  \"  % APP _ NAME %  \\  \"  \"  )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" gdxVersion    =     '  \"     +     ( DependencyBank . libgdxVersion )  )     +     \"  '  \"  )  )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" roboVMVersion    =     '  \"     +     ( DependencyBank . roboVMVersion )  )     +     \"  '  \"  )  )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" box 2 DLightsVersion    =     '  \"     +     ( DependencyBank . box 2 DLightsVersion )  )     +     \"  '  \"  )  )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" ashleyVersion    =     '  \"     +     ( DependencyBank . ashleyVersion )  )     +     \"  '  \"  )  )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" aiVersion    =     '  \"     +     ( DependencyBank . aiVersion )  )     +     \"  '  \"  )  )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "BuildScriptHelper . space ( wr )  ;", "BuildScriptHelper . write ( wr ,     \" repositories    {  \"  )  ;", "BuildScriptHelper . write ( wr ,    DependencyBank . mavenLocal )  ;", "BuildScriptHelper . write ( wr ,    DependencyBank . mavenCentral )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" maven    {    url    \\  \"  \"     +     ( DependencyBank . libGDXSnapshotsUrl )  )     +     \"  \\  \"     }  \"  )  )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" maven    {    url    \\  \"  \"     +     ( DependencyBank . libGDXReleaseUrl )  )     +     \"  \\  \"     }  \"  )  )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "}", "METHOD_END"], "methodName": ["addAllProjects"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "BuildScriptHelper . write ( wr ,     \" buildscript    {  \"  )  ;", "BuildScriptHelper . write ( wr ,     (  ( language . buildScript )     +     \"  \\ n \"  )  )  ;", "BuildScriptHelper . write ( wr ,     \" repositories    {  \"  )  ;", "BuildScriptHelper . write ( wr ,    DependencyBank . mavenLocal )  ;", "BuildScriptHelper . write ( wr ,    DependencyBank . mavenCentral )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" maven    {    url    \\  \"  \"     +     ( DependencyBank . libGDXSnapshotsUrl )  )     +     \"  \\  \"     }  \"  )  )  ;", "BuildScriptHelper . write ( wr ,    DependencyBank . jCenter )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "BuildScriptHelper . write ( wr ,     \" dependencies    {  \"  )  ;", "if    ( projects . contains ( DependencyBank . ProjectType . HTML )  )     {", "BuildScriptHelper . write ( wr ,     (  (  \" classpath    '  \"     +     ( DependencyBank . gwtPluginImport )  )     +     \"  '  \"  )  )  ;", "}", "if    ( projects . contains ( DependencyBank . ProjectType . ANDROID )  )     {", "BuildScriptHelper . write ( wr ,     (  (  \" classpath    '  \"     +     ( DependencyBank . androidPluginImport )  )     +     \"  '  \"  )  )  ;", "}", "if    ( projects . contains ( DependencyBank . ProjectType . IOS )  )     {", "BuildScriptHelper . write ( wr ,     (  (  \" classpath    '  \"     +     ( DependencyBank . roboVMPluginImport )  )     +     \"  '  \"  )  )  ;", "}", "if    ( projects . contains ( DependencyBank . ProjectType . IOSMOE )  )     {", "BuildScriptHelper . write ( wr ,     (  (  \" classpath    '  \"     +     ( DependencyBank . moePluginImport )  )     +     \"  '  \"  )  )  ;", "}", "BuildScriptHelper . write ( wr ,     (  ( language . buildScriptDependencies )     +     \"  \\ n \"  )  )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "BuildScriptHelper . space ( wr )  ;", "}", "METHOD_END"], "methodName": ["addBuildScript"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "if    (  ( project . equals ( DependencyBank . ProjectType . ANDROID )  )     |  |     ( project . equals ( DependencyBank . ProjectType . IOSMOE )  )  )     {", ". write ( wr ,     \" configurations    {    natives    }  \"  )  ;", "}", "}", "METHOD_END"], "methodName": ["addConfigurations"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "BuildScriptHelper . write ( wr ,     \" dependencies    {  \"  )  ;", "if    (  !  ( project . equals ( DependencyBank . ProjectType . CORE )  )  )     {", "BuildScriptHelper . write ( wr ,     (  (  \" compile   project (  \\  \"  :  \"     +     ( DependencyBank . ProjectType . CORE . getName (  )  )  )     +     \"  \\  \"  )  \"  )  )  ;", "}", "for    ( Dependency   dep    :    dependencyList )     {", "if    (  ( dep . getDependencies ( project )  )     =  =    null )", "continue ;", "for    ( String   moduleDependency    :    dep . getDependencies ( project )  )     {", "if    ( moduleDependency    =  =    null )", "continue ;", "if    (  (  ( project . equals ( DependencyBank . ProjectType . ANDROID )  )     |  |     ( project . equals ( DependencyBank . ProjectType . IOSMOE )  )  )     &  &     ( moduleDependency . contains (  \" native \"  )  )  )     {", "BuildScriptHelper . write ( wr ,     (  (  \" natives    \\  \"  \"     +    moduleDependency )     +     \"  \\  \"  \"  )  )  ;", "} else    {", "BuildScriptHelper . write ( wr ,     (  (  \" compile    \\  \"  \"     +    moduleDependency )     +     \"  \\  \"  \"  )  )  ;", "}", "}", "}", "BuildScriptHelper . write ( wr ,    language . dependencies )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "}", "METHOD_END"], "methodName": ["addDependencies"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "BuildScriptHelper . space ( wr )  ;", "BuildScriptHelper . write ( wr ,     (  (  \" project (  \\  \"  :  \"     +     ( project . getName (  )  )  )     +     \"  \\  \"  )     {  \"  )  )  ;", "for    ( String   plugin    :    project . getPlugins ( language )  )     {", "BuildScriptHelper . write ( wr ,     (  (  \" apply   plugin :     \\  \"  \"     +    plugin )     +     \"  \\  \"  \"  )  )  ;", "}", "BuildScriptHelper . space ( wr )  ;", "BuildScriptHelper . addConfigurations ( project ,    wr )  ;", "BuildScriptHelper . space ( wr )  ;", "BuildScriptHelper . addDependencies ( language ,    project ,    dependencies ,    wr )  ;", "BuildScriptHelper . write ( wr ,     \"  }  \"  )  ;", "}", "METHOD_END"], "methodName": ["addProject"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "if    ( indent    <     0  )     {", "rrn    0  ;", "}", "rrn   indent ;", "}", "METHOD_END"], "methodName": ["clamp"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "wr . write (  \"  \\ n \"  )  ;", "}", "METHOD_END"], "methodName": ["space"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "int   delta    =     ( BuildScriptHelper . StringUtils . countMatches ( input ,     '  {  '  )  )     -     ( BuildScriptHelper . StringUtils . countMatches ( input ,     '  }  '  )  )  ;", "BuildScriptHelper . indent    +  =    delta    *  =     4  ;", "BuildScriptHelper . indent    =    BuildScriptHelper . clamp ( BuildScriptHelper . indent )  ;", "if    ( delta    >     0  )     {", "wr . write (  (  (  ( BuildScriptHelper . StringUtils . repeat (  \"     \"  ,    BuildScriptHelper . clamp (  (  ( BuildScriptHelper . indent )     -     4  )  )  )  )     +    input )     +     \"  \\ n \"  )  )  ;", "} else", "if    ( delta    <     0  )     {", "wr . write (  (  (  ( BuildScriptHelper . StringUtils . repeat (  \"     \"  ,    BuildScriptHelper . clamp ( BuildScriptHelper . indent )  )  )     +    input )     +     \"  \\ n \"  )  )  ;", "} else    {", "wr . write (  (  (  ( BuildScriptHelper . StringUtils . repeat (  \"     \"  ,    BuildScriptHelper . indent )  )     +    input )     +     \"  \\ n \"  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["write"], "fileName": "com.badlogic.gdx.setup.BuildScriptHelper"}, {"methodBody": ["METHOD_START", "{", "return   subDependencyMap . get ( type )  ;", "}", "METHOD_END"], "methodName": ["getDependencies"], "fileName": "com.badlogic.gdx.setup.Dependency"}, {"methodBody": ["METHOD_START", "{", "return   gwtInherits ;", "}", "METHOD_END"], "methodName": ["getGwtInherits"], "fileName": "com.badlogic.gdx.setup.Dependency"}, {"methodBody": ["METHOD_START", "{", "List < String >    incompat    =    new   ArrayList < String >  (  )  ;", "String [  ]    subArray    =    subMap . get ( type )  ;", "if    ( subArray    =  =    null )     {", "incompat . add (  (  (  (  \"     \"     +     ( name )  )     +     \"    is   not   compatible   with   sub   module    \"  )     +     ( type . getName (  )  . toUpperCase (  )  )  )  )  ;", "}", "return   incompat ;", "}", "METHOD_END"], "methodName": ["getIncompatibilities"], "fileName": "com.badlogic.gdx.setup.Dependency"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.setup.Dependency"}, {"methodBody": ["METHOD_START", "{", "return   gdxDependencies . get ( gdx )  ;", "}", "METHOD_END"], "methodName": ["getDependency"], "fileName": "com.badlogic.gdx.setup.DependencyBank"}, {"methodBody": ["METHOD_START", "{", "String   exec    =     (  ( workingDir . getAbsolutePath (  )  )     +     \"  /  \"  )     +     ( System . getProperty (  \" os . name \"  )  . contains (  \" Windows \"  )     ?    windowsFile    :    unixFile )  ;", "String   log    =     (  (  (  \" Executing    '  \"     +    exec )     +     \"     \"  )     +    parameters )     +     \"  '  \"  ;", "for    ( int   i    =     0  ;    i    <     ( log . length (  )  )  ;    i +  +  )     {", "callback . character ( log . charAt ( i )  )  ;", "}", "callback . character (  '  \\ n '  )  ;", "String [  ]    params    =    parameters . split (  \"     \"  )  ;", "String [  ]    commands    =    new   String [  ( params . length )     +     1  ]  ;", "commands [  0  ]     =    exec ;", "for    ( int   i    =     0  ;    i    <     ( params . length )  ;    i +  +  )     {", "commands [  ( i    +     1  )  ]     =    params [ i ]  ;", "}", "return    . startProcess ( commands ,    workingDir ,    callback )  ;", "}", "METHOD_END"], "methodName": ["execute"], "fileName": "com.badlogic.gdx.setup.Executor"}, {"methodBody": ["METHOD_START", "{", "try    {", "final   Process   process    =    new   ProcessBuilder ( commands )  . redirectErrorStream ( true )  . directory ( directory )  . start (  )  ;", "Thread   t    =    new   Thread ( new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "BufferedReader   reader    =    new   BufferedReader ( new   InputStreamReader ( process . getInputStream (  )  )  ,     1  )  ;", "try    {", "int   c    =     0  ;", "while    (  ( c    =    reader . read (  )  )     !  =     (  -  1  )  )     {", "callback . character (  (  ( char )     ( c )  )  )  ;", "}", "}    catch    ( IOException   e )     {", "}", "}", "}  )  ;", "tDaemon ( true )  ;", "t . start (  )  ;", "process . waitFor (  )  ;", "t . interrupt (  )  ;", "return    ( process . exitValue (  )  )     =  =     0  ;", "}    catch    ( Exception   e )     {", "e . printStackTrace (  )  ;", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["startProcess"], "fileName": "com.badlogic.gdx.setup.Executor"}, {"methodBody": ["METHOD_START", "{", "Dependency   dep    =    new   Dependency ( name ,    gwtInherits ,    getPlatformDependencies (  \" core \"  )  ,    getPlatformDependencies (  \" desktop \"  )  ,    getPlatformDependencies (  \" android \"  )  ,    getPlatformDependencies (  \" ios \"  )  ,    getPlatformDependencies (  \" ios - moe \"  )  ,    getPlatformDependencies (  \" html \"  )  )  ;", "rrn   dep ;", "}", "METHOD_END"], "methodName": ["generateDependency"], "fileName": "com.badlogic.gdx.setup.ExternalExtension"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.setup.ExternalExtension"}, {"methodBody": ["METHOD_START", "{", "if    (  ( dependencies . get ( platformName )  )     =  =    null )     {", "return   null ;", "} else", "if    (  (  ( dependencies . get ( platformName )  )     !  =    null )     &  &     (  ( dependencies . get ( platformName )  . size (  )  )     =  =     0  )  )     {", "return   new   String [  ]  {        }  ;", "} else    {", "String [  ]    arr    =    new   String [ dependencies . get ( platformName )  . size (  )  ]  ;", "for    ( int   i    =     0  ;    i    <     ( dependencies . get ( platformName )  . size (  )  )  ;    i +  +  )     {", "Dependency   dependency    =    dependencies . get ( platformName )  . get ( i )  ;", "if    ( dependency . external )     {", "arr [ i ]     =    dependency . text ;", "} else    {", "String [  ]    split    =    dependency . text . split (  \"  :  \"  )  ;", "if    (  ( split . length )     =  =     3  )     {", "arr [ i ]     =     (  (  (  (  (  ( split [  0  ]  )     +     \"  :  \"  )     +     ( split [  1  ]  )  )     +     \"  :  \"  )     +     ( version )  )     +     \"  :  \"  )     +     ( split [  2  ]  )  ;", "} else    {", "arr [ i ]     =     (  ( dependency . text )     +     \"  :  \"  )     +     ( version )  ;", "}", "}", "}", "return   arr ;", "}", "}", "METHOD_END"], "methodName": ["getPlatformDependencies"], "fileName": "com.badlogic.gdx.setup.ExternalExtension"}, {"methodBody": ["METHOD_START", "{", "this . dependencies    =    dependencies ;", "}", "METHOD_END"], "methodName": ["setDependencies"], "fileName": "com.badlogic.gdx.setup.ExternalExtension"}, {"methodBody": ["METHOD_START", "{", "if    (  ( eElement . getElementsByTagName ( platform )  . item (  0  )  )     !  =    null )     {", "Element   project    =     (  ( Element )     ( eElement . getElementsByTagName ( platform )  . item (  0  )  )  )  ;", "ArrayList < Dependency >    deps    =    new   ArrayList < Dependency >  (  )  ;", "if    ( project . getTextContent (  )  . trim (  )  . equals (  \"  \"  )  )     {", "} else", "if    ( project . getTextContent (  )  . trim (  )  . equals (  \" null \"  )  )     {", "deps    =    null ;", "} else    {", "NodeList   nList    =    project . getElementsByTagName (  \" dependency \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( nList . getLength (  )  )  ;    i +  +  )     {", "Node   nNode    =    nList . item ( i )  ;", "if    (  ( nNode . getNodeType (  )  )     =  =     ( ELEMENT _ NODE )  )     {", "Element   dependencyNode    =     (  ( Element )     ( nNode )  )  ;", "boolean   external    =    Boolean . parseBoolean ( dependencyNode . getAttribute (  \" external \"  )  )  ;", "deps . add ( new   Dependency ( dependencyNode . getTextContent (  )  ,    external )  )  ;", "}", "}", "}", "dependencies . put ( platform ,    deps )  ;", "}", "}", "METHOD_END"], "methodName": ["addToDependencyMapFromXML"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "DocumentBuilderFactory   dbFactory    =    DocumentBuilderFactory . newInstance (  )  ;", "DocumentBuilder   builder    =    dbFactory . newDocumentBuilder (  )  ;", "Document   doc    =    builder . parse (  . class . getResourceAsStream (  \"  / com / badlogic / gdx / setup / data / extensions . xml \"  )  )  ;", "doc . getDocumentElement (  )  . normalize (  )  ;", "NodeList   nList    =    doc . getElementsByTagName (  \" extension \"  )  ;", "for    ( int   i    =     0  ;    i    <     ( nList . getLength (  )  )  ;    i +  +  )     {", "Node   nNode    =    nList . item ( i )  ;", "if    (  ( nNode . getNodeType (  )  )     =  =     ( Node . ELEMENT _ NODE )  )     {", "Element   eElement    =     (  ( Element )     ( nNode )  )  ;", "String   name    =    eElement . getElementsByTagName (  \" name \"  )  . item (  0  )  . getTextContent (  )  ;", "String   description    =    eElement . getElementsByTagName (  \" description \"  )  . item (  0  )  . getTextContent (  )  ;", "String   version    =    eElement . getElementsByTagName (  \" version \"  )  . item (  0  )  . getTextContent (  )  ;", "String   compatibility    =    eElement . getElementsByTagName (  \" compatibility \"  )  . item (  0  )  . getTextContent (  )  ;", "String   url    =    eElement . getElementsByTagName (  \" website \"  )  . item (  0  )  . getTextContent (  )  ;", "String [  ]    gwtInherits    =    null ;", "NodeList   inheritsNode    =    eElement . getElementsByTagName (  \" inherit \"  )  ;", "gwtInherits    =    new   String [ inheritsNode . getLength (  )  ]  ;", "for    ( int   j    =     0  ;    j    <     ( inheritsNode . getLength (  )  )  ;    j +  +  )", "gwtInherits [ j ]     =    inheritsNode . item ( j )  . getTextContent (  )  ;", "final   HashMap < String ,    List < ExternalExtensionDependency >  >    dependencies    =    new   HashMap < String ,    List < ExternalExtensionDependency >  >  (  )  ;", "addToDependencyMapFromXML ( dependencies ,    eElement ,     \" core \"  )  ;", "addToDependencyMapFromXML ( dependencies ,    eElement ,     \" desktop \"  )  ;", "addToDependencyMapFromXML ( dependencies ,    eElement ,     \" android \"  )  ;", "addToDependencyMapFromXML ( dependencies ,    eElement ,     \" ios \"  )  ;", "addToDependencyMapFromXML ( dependencies ,    eElement ,     \" ios - moe \"  )  ;", "addToDependencyMapFromXML ( dependencies ,    eElement ,     \" html \"  )  ;", "URI   uri    =    null ;", "try    {", "uri    =    new   URI ( url )  ;", "}    catch    ( URISyntaxException   e )     {", "e . printStackTrace (  )  ;", "}", "if    ( uri    !  =    null )     {", "final   ExternalExtension   extension    =    new   ExternalExtension ( name ,    gwtInherits ,    description ,    version )  ;", "extension . setDependencies ( dependencies )  ;", "tableModel . addExtension ( extension ,    false ,    name ,    description ,    version ,    compatibility ,    uri )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["initData"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "setVisible ( false )  ;", "restore (  )  ;", "}", "METHOD_END"], "methodName": ["onCancel"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "setVisible ( false )  ;", "}", "METHOD_END"], "methodName": ["onOK"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "mainDependencies . clear (  )  ;", "(  (  . ExtensionTableModel )     ( table . getModel (  )  )  )  . unselectAll (  )  ;", "for    ( int   i    =     0  ;    i    <     ( mainDependenciesSnapshot . size (  )  )  ;    i +  +  )     {", "mainDependencies . add ( mainDependenciesSnapshot . get ( i )  )  ;", "String   extensionName    =    mainDependenciesSnapshot . get ( i )  . getName (  )  ;", "if    (  (  (  . ExtensionTableModel )     ( table . getModel (  )  )  )  . hasExtension ( extensionName )  )     {", "(  (  . ExtensionTableModel )     ( table . getModel (  )  )  )  . setSelected ( extensionName ,    true )  ;", "} else    {", "}", "}", "}", "METHOD_END"], "methodName": ["restore"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "takeSnapshot (  )  ;", "Visible ( true )  ;", "}", "METHOD_END"], "methodName": ["showDialog"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "mainDependenciesSnapshot . clear (  )  ;", "for    ( int   i    =     0  ;    i    <     ( mainDependencies . size (  )  )  ;    i +  +  )     {", "mainDependenciesSnapshot . add ( mainDependencies . get ( i )  )  ;", "}", "}", "METHOD_END"], "methodName": ["takeSnapshot"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "topPanel    =    new   JPanel ( new   GridBagLayout (  )  )  ;", "topPanel . setBorder ( BorderFactory . createEmptyBorder (  5  ,     5  ,     5  ,     5  )  )  ;", "warningNotice    =    new   JLabel (  \" List   of   third   party   extensions   for   LibGDX \"  )  ;", "warningNotice 2     =    new   JLabel (  \" These   are   not   maintained   by   the   LibGDX   team ,    please   see   the   support   links   for   info   and   help \"  )  ;", "warningNotice . setHorizontalAlignment ( JLabel . CENTER )  ;", "warningNotice 2  . setHorizontalAlignment ( JLabel . CENTER )  ;", "topPanel . add ( warningNotice ,    new   GridBagConstraints (  0  ,     0  ,     1  ,     1  ,     1  ,     0  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "topPanel . add ( warningNotice 2  ,    new   GridBagConstraints (  0  ,     1  ,     1  ,     1  ,     1  ,     0  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "JSeparator   separator    =    new   JSeparator (  )  ;", "separator . setForeground ( new   Color (  8  5  ,     8  5  ,     8  5  )  )  ;", "separator . setBackground ( new   Color (  8  5  ,     8  5  ,     8  5  )  )  ;", "topPanel . add ( separator ,    new   GridBagConstraints (  0  ,     2  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "tableModel    =    new    . ExtensionTableModel (  )  ;", "table    =    new   JTable ( tableModel )     {", "@ Override", "public   String   getToolTipText ( MouseEvent   e )     {", "return    (  (  . ExtensionTableModel )     ( getModel (  )  )  )  . getToolTip ( e )  ;", "}", "}  ;", "table . getColumnModel (  )  . getColumn (  0  )  . setPreferredWidth (  1  0  )  ;", "table . getColumnModel (  )  . getColumn (  1  )  . setPreferredWidth (  5  0  )  ;", "table . getColumnModel (  )  . getColumn (  2  )  . setPreferredWidth (  1  0  0  )  ;", "table . getColumnModel (  )  . getColumn (  3  )  . setPreferredWidth (  2  0  )  ;", "table . getColumnModel (  )  . getColumn (  4  )  . setPreferredWidth (  3  0  )  ;", "table . setAutoResizeMode ( JTable . AUTO _ RESIZE _ LAST _ COLUMN )  ;", "table . getTableHeader (  )  . setReorderingAllowed ( false )  ;", "table . getModel (  )  . addTableModelListener ( this )  ;", "table . addMouseListener ( new   MouseAdapter (  )     {", "public   void   mouseClicked ( MouseEvent   e )     {", "int   row    =    table . getSelectedRow (  )  ;", "int   column    =    table . getSelectedColumn (  )  ;", "if    ( column    =  =     5  )     {", "URI   uri    =     (  (  . ExtensionTableModel )     ( table . getModel (  )  )  )  . getURI ( row ,    column )  ;", "if    ( uri    !  =    null )     {", "try    {", "Desktop . getDesktop (  )  . browse ( uri )  ;", "}    catch    ( IOException   e 1  )     {", "e 1  . printStackTrace (  )  ;", "}", "}", "}", "}", "}  )  ;", "scrollPane    =    new   JScrollPane ( table )  ;", "bottomPanel    =    new   JPanel ( new   GridBagLayout (  )  )  ;", "buttonPanel    =    new   JPanel ( new   GridBagLayout (  )  )  ;", "buttonPanel . setBorder ( BorderFactory . createEmptyBorder (  5  ,     5  ,     5  ,     5  )  )  ;", "buttonOK    =    new   GdxSetupUI . SetupButton (  \" Save \"  )  ;", "buttonCancel    =    new   GdxSetupUI . SetupButton (  \" Cancel \"  )  ;", "buttonPanel . add ( buttonOK ,    new   GridBagConstraints (  0  ,     0  ,     1  ,     1  ,     0  ,     0  ,    GridBagConstraints . CENTER ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "buttonPanel . add ( buttonCancel ,    new   GridBagConstraints (  1  ,     0  ,     1  ,     1  ,     0  ,     0  ,    GridBagConstraints . CENTER ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "bottomPanel . add ( buttonPanel ,    new   GridBagConstraints (  3  ,     0  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . SOUTHEAST ,    GridBagConstraints . NONE ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "contentPane . add ( topPanel ,    new   GridBagConstraints (  0  ,     0  ,     1  ,     1  ,     1  ,     0  .  1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . BOTH ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "contentPane . add ( scrollPane ,    new   GridBagConstraints (  0  ,     1  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . BOTH ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "contentPane . add ( bottomPanel ,    new   GridBagConstraints (  0  ,     2  ,     1  ,     1  ,     1  ,     0  ,    GridBagConstraints . SOUTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "try    {", "initData (  )  ;", "}    catch    ( Exception   e )     {", "e . printStackTrace (  )  ;", "}", "}", "METHOD_END"], "methodName": ["uiLayout"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "contentPane . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "topPanel . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "topPanel . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "table . setBackground ( new   Color (  4  6  ,     4  6  ,     4  6  )  )  ;", "table . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "bottomPanel . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "bottomPanel . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "buttonPanel . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "buttonPanel . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "scrollPane . setBorder ( BorderFactory . createEmptyBorder (  )  )  ;", "scrollPane . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "scrollPane . getViewport (  )  . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "warningNotice . setForeground ( new   Color (  2  5  5  ,     2  0  ,     2  0  )  )  ;", "warningNotice 2  . setForeground ( new   Color (  2  5  5  ,     2  0  ,     2  0  )  )  ;", "}", "METHOD_END"], "methodName": ["uiStyle"], "fileName": "com.badlogic.gdx.setup.ExternalExtensionsDialog"}, {"methodBody": ["METHOD_START", "{", "Project   project    =    new   Project (  )  ;", "String   packageDir    =    packageName . replace (  '  .  '  ,     '  /  '  )  ;", "String   sdkPath    =    sdkLocation . replace (  '  \\  \\  '  ,     '  /  '  )  ;", "if    (  !  ( GdxSetup . isSdkLocationValid ( sdkLocation )  )  )     {", "System . out . println (  (  (  \" Android   SDK   location    '  \"     +    sdkLocation )     +     \"  '    doesn ' t   contain   an   SDK \"  )  )  ;", "}", "project . files . add ( new   ProjectFile (  \" gitignore \"  ,     \"  . gitignore \"  ,    false )  )  ;", "project . files . add ( new   TemporaryProjectFile ( builder . settingsFile ,     \" settings . gradle \"  ,    false )  )  ;", "project . files . add ( new   TemporaryProjectFile ( builder . buildFile ,     \" build . gradle \"  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" gradlew \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" gradlew . bat \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" gradle / wrapper / gradle - wrapper . jar \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" gradle / wrapper / gradle - wrapper . properties \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" gradle . properties \"  )  )  ;", "project . files . add ( new   ProjectFile (  \" core / build . gradle \"  )  )  ;", "project . files . add ( new   ProjectFile (  \" core / src / MainClass \"  ,     (  (  (  (  \" core / src /  \"     +    packageDir )     +     \"  /  \"  )     +    mainClass )     +     \"  . java \"  )  ,    true )  )  ;", "if    (  ( builder . modules . contains ( DependencyBank . ProjectType . HTML )  )     &  &     ( language . gwtSupported )  )     {", "project . files . add ( new   ProjectFile (  \" core / CoreGdxDefinition \"  ,     (  (  \" core / src /  \"     +    mainClass )     +     \"  . gwt . xml \"  )  ,    true )  )  ;", "}", "if    ( builder . modules . contains ( DependencyBank . ProjectType . DESKTOP )  )     {", "project . files . add ( new   ProjectFile (  \" desktop / build . gradle \"  )  )  ;", "project . files . add ( new   ProjectFile (  \" desktop / src / DesktopLauncher \"  ,     (  (  \" desktop / src /  \"     +    packageDir )     +     \"  / desktop / DesktopLauncher . java \"  )  ,    true )  )  ;", "}", "String   assetPath    =     ( builder . modules . contains ( DependencyBank . ProjectType . ANDROID )  )     ?     \" android / assets \"     :     \" core / assets \"  ;", "project . files . add ( new   ProjectFile (  \" android / assets / jpg \"  ,     ( assetPath    +     \"  / jpg \"  )  ,    false )  )  ;", "if    ( builder . modules . contains ( DependencyBank . ProjectType . ANDROID )  )     {", "project . files . add ( new   ProjectFile (  \" android / res / values / strings . xml \"  )  )  ;", "project . files . add ( new   ProjectFile (  \" android / res / values / styles . xml \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / res / drawable - hdpi / ic _ launcher . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / res / drawable - mdpi / ic _ launcher . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / res / drawable - xhdpi / ic _ launcher . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / res / drawable - xxhdpi / ic _ launcher . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / res / drawable - xxxhdpi / ic _ launcher . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / src / AndroidLauncher \"  ,     (  (  \" android / src /  \"     +    packageDir )     +     \"  / AndroidLauncher . java \"  )  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" android / AndroidManifest . xml \"  )  )  ;", "project . files . add ( new   ProjectFile (  \" android / build . gradle \"  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" android / ic _ launcher - web . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / proguard - rules . pro \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" android / project . properties \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" local . properties \"  ,    true )  )  ;", "}", "if    ( builder . modules . contains ( DependencyBank . ProjectType . HTML )  )     {", "project . files . add ( new   ProjectFile (  \" html / build . gradle \"  )  )  ;", "project . files . add ( new   ProjectFile (  \" html / src / HtmlLauncher \"  ,     (  (  \" html / src /  \"     +    packageDir )     +     \"  / client / HtmlLauncher . java \"  )  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" html / GdxDefinition \"  ,     (  (  \" html / src /  \"     +    packageDir )     +     \"  / GdxDefinition . gwt . xml \"  )  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" html / GdxDefinitionSuperdev \"  ,     (  (  \" html / src /  \"     +    packageDir )     +     \"  / GdxDefinitionSuperdev . gwt . xml \"  )  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" html / war / index \"  ,     \" html / webapp / index . html \"  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" html / war / styles . css \"  ,     \" html / webapp / styles . css \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" html / war / refresh . png \"  ,     \" html / webapp / refresh . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" html / war / soundmanager 2  - jsmin . js \"  ,     \" html / webapp / soundmanager 2  - jsmin . js \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" html / war / soundmanager 2  - setup . js \"  ,     \" html / webapp / soundmanager 2  - setup . js \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" html / war / WEB - INF / web . xml \"  ,     \" html / webapp / WEB - INF / web . xml \"  ,    true )  )  ;", "}", "if    ( builder . modules . contains ( DependencyBank . ProjectType . IOS )  )     {", "project . files . add ( new   ProjectFile (  \" ios / src / IOSLauncher \"  ,     (  (  \" ios / src /  \"     +    packageDir )     +     \"  / IOSLauncher . java \"  )  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default @  2 x ~ ipad . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default -  5  6  8 h @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default ~ ipad . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default -  3  7  5 w -  6  6  7 h @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default -  4  1  4 w -  7  3  6 h @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Default -  1  0  2  4 w -  1  3  6  6 h @  2 x ~ ipad . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / Contents . json \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / app - store - icon -  1  0  2  4  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / Contents . json \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - app - icon -  7  6  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - app - icon -  7  6  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - notifications - icon -  2  0  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - notifications - icon -  2  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - pro - app - icon -  8  3  .  5  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - settings - icon -  2  9  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - settings - icon -  2  9  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - spotlight - icon -  4  0  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / ipad - spotlight - icon -  4  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - app - icon -  6  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - app - icon -  6  0  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - notification - icon -  2  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - notification - icon -  2  0  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - spotlight - icon -  4  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - spotlight - icon -  4  0  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - spotlight - settings - icon -  2  9  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / data / Media . xcassets / AppIcon . appiconset / iphone - spotlight - settings - icon -  2  9  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / build . gradle \"  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / Info . plist . xml \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / robovm . properties \"  )  )  ;", "project . files . add ( new   ProjectFile (  \" ios / robovm . xml \"  ,    true )  )  ;", "}", "if    ( builder . modules . contains ( DependencyBank . ProjectType . IOSMOE )  )     {", "project . files . add ( new   ProjectFile (  \" ios - moe / src / IOSMoeLauncher \"  ,     (  (  \" ios - moe / src /  \"     +    packageDir )     +     \"  / IOSMoeLauncher . java \"  )  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default -  1  0  2  4 w -  1  3  6  6 h @  2 x ~ ipad . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default -  3  7  5 w -  6  6  7 h @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default -  4  1  4 w -  7  3  6 h @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default -  5  6  8 h @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default @  2 x ~ ipad . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Default ~ ipad . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / Contents . json \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / app - store - icon -  1  0  2  4  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / Contents . json \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - app - icon -  7  6  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - app - icon -  7  6  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - notifications - icon -  2  0  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - notifications - icon -  2  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - pro - app - icon -  8  3  .  5  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - settings - icon -  2  9  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - settings - icon -  2  9  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - spotlight - icon -  4  0  @  1 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / ipad - spotlight - icon -  4  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - app - icon -  6  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - app - icon -  6  0  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - notification - icon -  2  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - notification - icon -  2  0  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - spotlight - icon -  4  0  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - spotlight - icon -  4  0  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - spotlight - settings - icon -  2  9  @  2 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Media . xcassets / AppIcon . appiconset / iphone - spotlight - settings - icon -  2  9  @  3 x . png \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / Info . plist \"  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / custom . xcconfig \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe / main . cpp \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe - Test / Info . plist \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe - Test / main . cpp \"  ,    false )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / xcode / ios - moe . xcodeproj / project . pbxproj \"  ,    true )  )  ;", "project . files . add ( new   ProjectFile (  \" ios - moe / build . gradle \"  ,    true )  )  ;", "}", "Map < String ,    String >    values    =    new   HashMap < String ,    String >  (  )  ;", "values . put (  \"  % APP _ NAME %  \"  ,    appName )  ;", "values . put (  \"  % APP _ NAME _ ESCAPED %  \"  ,    appName . replace (  \"  '  \"  ,     \"  \\  \\  \\  '  \"  )  )  ;", "values . put (  \"  % LANG %  \"  ,    language . name )  ;", "values . put (  \"  % PACKAGE %  \"  ,    packageName )  ;", "values . put (  \"  % PACKAGE _ DIR %  \"  ,    packageDir )  ;", "values . put (  \"  % MAIN _ CLASS %  \"  ,    mainClass )  ;", "values . put (  \"  % ANDROID _ SDK %  \"  ,    sdkPath )  ;", "values . put (  \"  % ASSET _ PATH %  \"  ,    assetPath )  ;", "values . put (  \"  % BUILD _ TOOLS _ VERSION %  \"  ,    DependencyBank . buildToolsVersion )  ;", "values . put (  \"  % API _ LEVEL %  \"  ,    DependencyBank . androidAPILevel )  ;", "values . put (  \"  % GWT _ VERSION %  \"  ,    DependencyBank . gwtVersion )  ;", "if    ( builder . modules . contains ( DependencyBank . ProjectType . HTML )  )     {", "values . put (  \"  % GWT _ INHERITS %  \"  ,    parseGwtInherits ( builder )  )  ;", "}", "copyAndReplace ( outputDir ,    project ,    values )  ;", "builder . cleanUp (  )  ;", "new   File ( outputDir ,     \" gradlew \"  )  . setExecutable ( true )  ;", "Executor . execute ( new   File ( outputDir )  ,     \" gradlew . bat \"  ,     \" gradlew \"  ,     (  \" clean \"     +     ( parseGradleArgs ( builder . modules ,    gradleArgs )  )  )  ,    callback )  ;", "}", "METHOD_END"], "methodName": ["build"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "if    (  ( testVersion [  0  ]  )     >     ( version [  0  ]  )  )     {", "rrn   true ;", "} else", "if    (  ( testVersion [  0  ]  )     =  =     ( version [  0  ]  )  )     {", "if    (  ( testVersion [  1  ]  )     >     ( version [  1  ]  )  )     {", "rrn   true ;", "} else", "if    (  ( testVersion [  1  ]  )     =  =     ( version [  1  ]  )  )     {", "rrn    ( testVersion [  2  ]  )     >     ( version [  2  ]  )  ;", "}", "}", "rrn   false ;", "}", "METHOD_END"], "methodName": ["compareVersions"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "for    ( Dependency   dep    :    dependencyList )     {", "if    ( dep . getName (  )  . equals ( projectDependency . name (  )  )  )     {", "rrn   true ;", "}", "}", "rrn   false ;", "}", "METHOD_END"], "methodName": ["containsDependency"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "String [  ]    stringSplit    =    toolsVersion . split (  \"  \\  \\  .  \"  )  ;", "int [  ]    versionSplit    =    new   int [  3  ]  ;", "if    (  ( stringSplit . length )     =  =     3  )     {", "try    {", "versionSplit [  0  ]     =    Integer . parseInt ( stringSplit [  0  ]  )  ;", "versionSplit [  1  ]     =    Integer . parseInt ( stringSplit [  1  ]  )  ;", "versionSplit [  2  ]     =    Integer . parseInt ( stringSplit [  2  ]  )  ;", "rrn   versionSplit ;", "}    catch    ( NumberFormatException   nfe )     {", "rrn   new   int [  ]  {     0  ,     0  ,     0     }  ;", "}", "} else    {", "rrn   new   int [  ]  {     0  ,     0  ,     0     }  ;", "}", "}", "METHOD_END"], "methodName": ["convertTools"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "File   out    =    new   File ( outputDir )  ;", "if    (  (  !  ( out . exists (  )  )  )     &  &     (  !  ( out . mkdirs (  )  )  )  )     {", "throw   new   RuntimeException (  (  (  \" Couldn ' t   create   output   directory    '  \"     +     ( outetAbsolutePath (  )  )  )     +     \"  '  \"  )  )  ;", "}", "for    ( ProjectFile   file    :    project . files )     {", "copyFile ( file ,    out ,    values )  ;", "}", "}", "METHOD_END"], "methodName": ["copyAndReplace"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "File   outFile    =    new   File ( out ,    file . outputName )  ;", "if    (  (  !  ( outFileetParentFile (  )  . exists (  )  )  )     &  &     (  !  ( outFileetParentFile (  )  . mkdirs (  )  )  )  )     {", "throw   new   RuntimeException (  (  (  \" Couldn ' t   create   dir    '  \"     +     ( outFileetAbsolutePath (  )  )  )     +     \"  '  \"  )  )  ;", "}", "boolean   isTemp    =     ( file   instanceof   TemporaryProjectFile )     ?    true    :    false ;", "if    ( file . isTemplate )     {", "Stri   txt ;", "if    ( isTemp )     {", "txt    =    readResourceAsStri (  (  ( TemporaryProjectFile )     ( file )  )  . file )  ;", "} else    {", "txt    =    readResourceAsStri ( file . resourceName ,    file . resourceLoc )  ;", "}", "txt    =    replace ( txt ,    values )  ;", "writeFile ( outFile ,    txt )  ;", "} else    {", "if    ( isTemp )     {", "writeFile ( outFile ,    readResource (  (  ( TemporaryProjectFile )     ( file )  )  . file )  )  ;", "} else    {", "writeFile ( outFile ,    readResource ( file . resourceName ,    file . resourceLoc )  )  ;", "}", "}", "}", "METHOD_END"], "methodName": ["copyFile"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "int   apiLevel    =     0  ;", "for    ( File   api    :    apis . listFiles (  )  )     {", "int   level    =     . readAPIVersion ( api )  ;", "if    ( level    >    apiLevel )", "apiLevel    =    level ;", "}", "return   apiLevel ;", "}", "METHOD_END"], "methodName": ["getLatestApi"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "String   version    =    null ;", "int [  ]    versionSplit    =    new   int [  3  ]  ;", "int [  ]    testSplit    =    new   int [  3  ]  ;", "for    ( File   toolsVersion    :    buildTools . listFiles (  )  )     {", "if    ( version    =  =    null )     {", "version    =     . readBuildToolsVersion ( toolsVersion )  ;", "versionSplit    =     . convertTools ( version )  ;", "continue ;", "}", "testSplit    =     . convertTools (  . readBuildToolsVersion ( toolsVersion )  )  ;", "if    (  . compareVersions ( versionSplit ,    testSplit )  )     {", "version    =     . readBuildToolsVersion ( toolsVersion )  ;", "versionSplit    =     . convertTools ( version )  ;", "}", "}", "if    ( version    !  =    null )     {", "return   version ;", "} else    {", "return    \"  0  .  0  .  0  \"  ;", "}", "}", "METHOD_END"], "methodName": ["getLatestTools"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "if    ( new   File ( destination )  . exists (  )  )     {", "rrn    ( new   File ( destination )  . list (  )  . length )     =  =     0  ;", "} else    {", "rrn   true ;", "}", "}", "METHOD_END"], "methodName": ["isEmptyDirectory"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "return    ( new   File ( sdkLocation ,     \" tools \"  )  . exists (  )  )     &  &     ( new   File ( sdkLocation ,     \" platforms \"  )  . exists (  )  )  ;", "}", "METHOD_END"], "methodName": ["isSdkLocationValid"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "File   buildTools    =    new   File ( sdkLocation ,     \" build - tools \"  )  ;", "if    (  !  ( buildTools . exists (  )  )  )     {", "JOptionPane . showMessageDialog ( null ,     (  \" You   have   no   build   tools !  \\ nUpdate   your   Android   SDK   with   build   tools   version :     \"     +     ( DependencyBank . buildToolsVersion )  )  )  ;", "return   false ;", "}", "File   apis    =    new   File ( sdkLocation ,     \" platforms \"  )  ;", "if    (  !  ( apis . exists (  )  )  )     {", "JOptionPane . showMessageDialog ( null ,     (  \" You   have   no   Android   APIs !  \\ nUpdate   your   Android   SDK   with   API   level :     \"     +     ( DependencyBank . androidAPILevel )  )  )  ;", "return   false ;", "}", "String   newestLocalTool    =     . getLatestTools ( buildTools )  ;", "int [  ]    localToolVersion    =     . convertTools ( newestLocalTool )  ;", "int [  ]    targetToolVersion    =     . convertTools ( DependencyBank . buildToolsVersion )  ;", "if    (  . compareVersions ( targetToolVersion ,    localToolVersion )  )     {", "int   value    =    JOptionPane . showConfirmDialog ( null ,     \" You   have   a   more   recent   version   of   android   build   tools   than   the   recommended .  \\ nDo   you   want   to   use   your   more   recent   version ?  \"  ,     \" Warning !  \"  ,    JOptionPane . YES _ NO _ OPTION )  ;", "if    ( value    !  =     0  )     {", "JOptionPane . showMessageDialog ( null ,     (  \" Using   build   tools :     \"     +     ( DependencyBank . buildToolsVersion )  )  )  ;", "} else    {", "DependencyBank . buildToolsVersion    =    newestLocalTool ;", "}", "} else    {", "if    (  !  (  . versionsEqual ( localToolVersion ,    targetToolVersion )  )  )     {", "JOptionPane . showMessageDialog ( null ,     (  \" Please   update   your   Android   SDK ,    you   need   build   tools :     \"     +     ( DependencyBank . buildToolsVersion )  )  )  ;", "return   false ;", "}", "}", "int   newestLocalApi    =     . getLatestApi ( apis )  ;", "if    ( newestLocalApi    >     ( Integer . valueOf ( DependencyBank . androidAPILevel )  )  )     {", "int   value    =    JOptionPane . showConfirmDialog ( null ,     \" You   have   a   more   recent   Android   API   than   the   recommended .  \\ nDo   you   want   to   use   your   more   recent   version ?  \"  ,     \" Warning !  \"  ,    JOptionPane . YES _ NO _ OPTION )  ;", "if    ( value    !  =     0  )     {", "JOptionPane . showMessageDialog ( null ,     (  \" Using   API   level :     \"     +     ( DependencyBank . androidAPILevel )  )  )  ;", "} else    {", "DependencyBank . androidAPILevel    =    String . valueOf ( newestLocalApi )  ;", "}", "} else    {", "if    ( newestLocalApi    !  =     ( Integer . valueOf ( DependencyBank . androidAPILevel )  )  )     {", "JOptionPane . showMessageDialog ( null ,     (  \" Please   update   your   Android   SDK ,    you   need   the   Android   API :     \"     +     ( DependencyBank . androidAPILevel )  )  )  ;", "return   false ;", "}", "}", "return   true ;", "}", "METHOD_END"], "methodName": ["isSdkUpToDate"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    String >    params    =    GdxSetup . parseArgs ( args )  ;", "List < String >    excludedModules    =    null ;", "if    ( params . containsKey (  \" excludeModules \"  )  )", "excludedModules    =    GdxSetup . parseExcludedModules ( params . get (  \" excludeModules \"  )  )  ;", "if    (  (  (  (  (  !  ( params . containsKey (  \" dir \"  )  )  )     |  |     (  !  ( params . containsKey (  \" name \"  )  )  )  )     |  |     (  !  ( params . containsKey (  \" package \"  )  )  )  )     |  |     (  !  ( params . containsKey (  \" mainClass \"  )  )  )  )     |  |     (  (  (  !  ( params . containsKey (  \" sdkLocation \"  )  )  )     &  &     (  ( System . getenv (  \" ANDROID _ HOME \"  )  )     =  =    null )  )     &  &     (  ( excludedModules    =  =    null )     |  |     (  !  ( excludedModules . contains (  \" android \"  )  )  )  )  )  )     {", "new   GdxSetupUI (  )  ;", "GdxSetup . printHelp (  )  ;", "} else    {", "String   sdkLocation    =     \"  \"  ;", "if    (  ( excludedModules    =  =    null )     |  |     (  !  ( excludedModules . contains (  \" android \"  )  )  )  )     {", "if    (  (  ( System . getenv (  \" ANDROID _ HOME \"  )  )     !  =    null )     &  &     (  !  ( params . containsKey (  \" sdkLocation \"  )  )  )  )     {", "sdkLocation    =    System . getenv (  \" ANDROID _ HOME \"  )  ;", "} else    {", "sdkLocation    =    params . get (  \" sdkLocation \"  )  ;", "}", "}", "DependencyBank   bank    =    new   DependencyBank (  )  ;", "ProjectBuilder   builder    =    new   ProjectBuilder ( bank )  ;", "List < DependencyBank . ProjectType >    projects    =    new   ArrayList < DependencyBank . ProjectType >  (  )  ;", "projects . add ( DependencyBank . ProjectType . CORE )  ;", "if    ( excludedModules    =  =    null )     {", "projects . add ( DependencyBank . ProjectType . DESKTOP )  ;", "projects . add ( DependencyBank . ProjectType . ANDROID )  ;", "projects . add ( DependencyBank . ProjectType . IOS )  ;", "projects . add ( DependencyBank . ProjectType . IOSMOE )  ;", "projects . add ( DependencyBank . ProjectType . HTML )  ;", "} else    {", "if    (  !  ( excludedModules . contains (  \" desktop \"  )  )  )", "projects . add ( DependencyBank . ProjectType . DESKTOP )  ;", "if    (  !  ( excludedModules . contains (  \" android \"  )  )  )", "projects . add ( DependencyBank . ProjectType . ANDROID )  ;", "if    (  !  ( excludedModules . contains (  \" ios \"  )  )  )", "projects . add ( DependencyBank . ProjectType . IOS )  ;", "if    (  !  ( excludedModules . contains (  \" iosmoe \"  )  )  )", "projects . add ( DependencyBank . ProjectType . IOSMOE )  ;", "if    (  !  ( excludedModules . contains (  \" html \"  )  )  )", "projects . add ( DependencyBank . ProjectType . HTML )  ;", "}", "List < Dependency >    dependencies    =    new   ArrayList < Dependency >  (  )  ;", "if    ( params . containsKey (  \" extensions \"  )  )     {", "dependencies . addAll ( GdxSetup . parseDependencies ( params . get (  \" extensions \"  )  ,    bank )  )  ;", "} else    {", "dependencies . add ( bank . getDependency ( DependencyBank . ProjectDependency . GDX )  )  ;", "}", "String   language    =     ( params . containsKey (  \" language \"  )  )     ?    params . get (  \" language \"  )     :     \" java \"  ;", "Language   languageEnum    =    Language . JAVA ;", "for    ( Language   l    :    Language . values (  )  )     {", "if    ( l . name . equals ( language )  )     {", "languageEnum    =    l ;", "}", "}", "builder . buildProject ( projects ,    dependencies )  ;", "builder . build ( languageEnum )  ;", "new   GdxSetup (  )  . build ( builder ,    params . get (  \" dir \"  )  ,    params . get (  \" name \"  )  ,    params . get (  \" package \"  )  ,    params . get (  \" mainClass \"  )  ,    languageEnum ,    sdkLocation ,    new   Executor . CharCallback (  )     {", "@ Override", "public   void   character ( char   c )     {", "System . out . print ( c )  ;", "}", "}  ,    null )  ;", "}", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "if    (  (  ( args . length )     %     2  )     !  =     0  )     {", ". printHelp (  )  ;", "System . exit (  (  -  1  )  )  ;", "}", "Map < String ,    String >    params    =    new   HashMap < String ,    String >  (  )  ;", "for    ( int   i    =     0  ;    i    <     ( args . length )  ;    i    +  =     2  )     {", "String   param    =    args [ i ]  . replace (  \"  -  -  \"  ,     \"  \"  )  ;", "String   value    =    args [  ( i    +     1  )  ]  ;", "params . put ( param ,    value )  ;", "}", "return   params ;", "}", "METHOD_END"], "methodName": ["parseArgs"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "List < String >    dependencyNames    =    new   ArrayList < String >  (  )  ;", "while    ( dependencies . contains (  \"  ;  \"  )  )     {", "dependencyNames . add ( dependencies . substring (  0  ,    dependencies . indexOf (  \"  ;  \"  )  )  . toLowerCase (  )  )  ;", "dependencies    =    dependencies . substring (  (  ( dependencies . indexOf (  \"  ;  \"  )  )     +     1  )  )  ;", "}", "dependencyNames . add ( dependencies . toLowerCase (  )  )  ;", "Map < String ,    Dependency >    dependencyMap    =    new   HashMap < String ,    Dependency >  (  )  ;", "for    ( DependencyBank . ProjectDependency   pd    :    DependencyBank . ProjectDependency . values (  )  )     {", "dependencyMap . put ( pd . name (  )  . toLowerCase (  )  ,    bank . getDependency ( pd )  )  ;", "}", "List < Dependency >    dependencyList    =    new   ArrayList < Dependency >  (  )  ;", "dependencyList . add ( bank . getDependency ( DependencyBank . ProjectDependency . GDX )  )  ;", "for    ( String   name    :    dependencyNames )     {", "if    ( dependencyMap . containsKey ( name )  )     {", "System . out . println (  (  (  \" Extension    \"     +    name )     +     \"    found \"  )  )  ;", "dependencyList . add ( dependencyMap . get ( name )  )  ;", "} else", "System . out . println (  (  (  \" Extension    \"     +    name )     +     \"    not   found \"  )  )  ;", "}", "rrn   dependencyList ;", "}", "METHOD_END"], "methodName": ["parseDependencies"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "List < String >    excludedModulesList    =    new   ArrayList < String >  (  )  ;", "while    ( excludedModules . contains (  \"  ;  \"  )  )     {", "excludedModulesList . add ( excludedModules . substring (  0  ,    excludedModules . indexOf (  \"  ;  \"  )  )  . toLowerCase (  )  )  ;", "excludedModules    =    excludedModules . substring (  (  ( excludedModules . indexOf (  \"  ;  \"  )  )     +     1  )  )  ;", "}", "excludedModulesList . add ( excludedModules . toLowerCase (  )  )  ;", "rrn   excludedModulesList ;", "}", "METHOD_END"], "methodName": ["parseExcludedModules"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "String   argString    =     \"  \"  ;", "if    ( args    =  =    null )", "rrn   argString ;", "for    ( String   argument    :    args )     {", "if    (  ( argument . equals (  \" afterEclipseImport \"  )  )     &  &     (  !  ( modules . contains ( DependencyBank . ProjectType . DESKTOP )  )  )  )", "continue ;", "argString    +  =     \"     \"     +    argument ;", "}", "rrn   argString ;", "}", "METHOD_END"], "methodName": ["parseGradleArgs"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "String   parsed    =     \"  \"  ;", "for    ( Dependency   dep    :    builder . dependencies )     {", "if    (  ( dep . getGwtInherits (  )  )     !  =    null )     {", "for    ( String   inherit    :    dep . getGwtInherits (  )  )     {", "parsed    +  =     (  \"  \\ t < inherits   name =  \\  '  \"     +    inherit )     +     \"  \\  '     /  >  \\ n \"  ;", "}", "}", "}", "rrn   parsed ;", "}", "METHOD_END"], "methodName": ["parseGwtInherits"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "System . out . println (  \" Usage :    GdxSetup    -  - dir    < dir - name >     -  - name    < app - name >     -  - package    < package >     -  - mainClass    < mainClass >     -  - sdkLocation    < SDKLocation >     [  -  - excludeModules    < modules >  ]     [  -  - extensions    < extensions >  ]  \"  )  ;", "System . out . println (  \" dir    .  .  .    the   directory   to   write   the   project   files   to \"  )  ;", "System . out . println (  \" name    .  .  .    the   name   of   the   application \"  )  ;", "System . out . println (  \" package    .  .  .    the   Java   package   name   of   the   application \"  )  ;", "System . out . println (  \" mainClass    .  .  .    the   name   of   your   main   ApplicationListener \"  )  ;", "System . out . println (  \" sdkLocation    .  .  .    the   location   of   your   android   SDK .    Uses   ANDROID _ HOME   if   not   specified .    Ignored   if   android   module   is   excluded \"  )  ;", "System . out . println (  \" excludeModules    .  .  .    the   modules   to   exclude   on   the   project   generation   separated   by    '  ;  '  .    Optional \"  )  ;", "System . out . println (  \" extensions    .  .  .    the   extensions   to   include   in   the   project   separated   by    '  ;  '  .    Optional \"  )  ;", "}", "METHOD_END"], "methodName": ["printHelp"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "File   propertiesFile    =    new   File ( parentFile ,     \" source . properties \"  )  ;", "Properties   properties ;", "try    {", "properties    =     . readPropertiesFromFile ( propertiesFile )  ;", "String   versionString    =    properties . getProperty (  \" AndroidVersion . ApiLevel \"  )  ;", "return   Integer . parseInt ( versionString )  ;", "}    catch    ( FileNotFoundException   e )     {", "e . printStackTrace (  )  ;", "}    catch    ( IOException   e )     {", "e . printStackTrace (  )  ;", "}    catch    ( NumberFormatException   e )     {", "e . printStackTrace (  )  ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["readAPIVersion"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "File   propertiesFile    =    new   File ( parentFile ,     \" source . properties \"  )  ;", "Properties   properties ;", "try    {", "properties    =     . readPropertiesFromFile ( propertiesFile )  ;", "}    catch    ( IOException   e )     {", "e . printStackTrace (  )  ;", "return    \"  0  .  0  .  0  \"  ;", "}", "String   versionString    =    properties . getProperty (  \" Pkg . Revision \"  )  ;", "if    ( versionString    =  =    null )     {", "return    \"  0  .  0  .  0  \"  ;", "}", "int   count    =    versionString . split (  \"  \\  \\  .  \"  )  . length ;", "for    ( int   i    =     0  ;    i    <     (  3     -    count )  ;    i +  +  )     {", "versionString    +  =     \"  .  0  \"  ;", "}", "return   versionString ;", "}", "METHOD_END"], "methodName": ["readBuildToolsVersion"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "InputStream   stream    =    null ;", "try    {", "stream    =    new   FileInputStream ( propertiesFile )  ;", "Properties   properties    =    new   Properties (  )  ;", "properties . load ( stream )  ;", "rrn   properties ;", "}    finally    {", "if    ( stream    !  =    null )     {", "try    {", "stream . close (  )  ;", "}    catch    ( IOException   e )     {", "e . printStackTrace (  )  ;", "}", "}", "}", "}", "METHOD_END"], "methodName": ["readPropertiesFromFile"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "InputStream   in    =    null ;", "try    {", "ByteArrayOutputStream   bytes    =    new   ByteArrayOutputStream (  )  ;", "byte [  ]    buffer    =    new   byte [  1  0  2  4     *     1  0  ]  ;", "in    =    new   FileInputStream ( file )  ;", "if    ( in    =  =    null )", "throw   new   RuntimeException (  (  (  \" Couldn ' t   read   resource    '  \"     +     ( file . getAbsoluteFile (  )  )  )     +     \"  '  \"  )  )  ;", "int   read    =     0  ;", "while    (  ( read    =    in . read ( buffer )  )     >     0  )     {", "bytes . write ( buffer ,     0  ,    read )  ;", "}", "rrn   bytes . toByteArray (  )  ;", "}    catch    ( Throwable   e )     {", "throw   new   RuntimeException (  (  (  \" Couldn ' t   read   resource    '  \"     +     ( file . getAbsoluteFile (  )  )  )     +     \"  '  \"  )  ,    e )  ;", "}    finally    {", "if    ( in    !  =    null )", "try    {", "in . close (  )  ;", "}    catch    ( IOException   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["readResource"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "InputStream   in    =    null ;", "try    {", "ByteArrayOutputStream   bytes    =    new   ByteArrayOutputStream (  )  ;", "byte [  ]    buffer    =    new   byte [  1  0  2  4     *     1  0  ]  ;", "in    =     . class . getResourceAsStream (  ( path    +    resource )  )  ;", "if    ( in    =  =    null )", "throw   new   RuntimeException (  (  (  \" Couldn ' t   read   resource    '  \"     +    resource )     +     \"  '  \"  )  )  ;", "int   read    =     0  ;", "while    (  ( read    =    in . read ( buffer )  )     >     0  )     {", "bytes . write ( buffer ,     0  ,    read )  ;", "}", "return   bytes . toByteArray (  )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  (  (  \" Couldn ' t   read   resource    '  \"     +    resource )     +     \"  '  \"  )  ,    e )  ;", "}    finally    {", "if    ( in    !  =    null )", "try    {", "in . close (  )  ;", "}    catch    ( IOException   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["readResource"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "try    {", "rrn   new   String ( readResource ( file )  ,     \" UTF -  8  \"  )  ;", "}    catch    ( UnsupportedEncodingException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["readResourceAsString"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "try    {", "rrn   new   String ( readResource ( resource ,    path )  ,     \" UTF -  8  \"  )  ;", "}    catch    ( UnsupportedEncodingException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["readResourceAsString"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "for    ( String   key    :    values . keySet (  )  )     {", "String   value    =    values . get ( key )  ;", "txt    =    txt . replace ( key ,    value )  ;", "}", "return   txt ;", "}", "METHOD_END"], "methodName": ["replace"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ;    i    <     3  ;    i +  +  )     {", "if    (  ( testVersion [ i ]  )     !  =     ( targetVersion [ i ]  )  )", "rrn   false ;", "}", "rrn   true ;", "}", "METHOD_END"], "methodName": ["versionsEqual"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "OutputStream   out    =    null ;", "try    {", "out    =    new   BufferedOutputStream ( new   FileOutputStream ( outFile )  )  ;", "out . write ( bytes )  ;", "}    catch    ( IOException   e )     {", "throw   new   RuntimeException (  (  (  \" Couldn ' t   write   file    '  \"     +     ( outFileetAbsolutePath (  )  )  )     +     \"  '  \"  )  ,    e )  ;", "}    finally    {", "if    ( out    !  =    null )", "try    {", "out . close (  )  ;", "}    catch    ( IOException   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["writeFile"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "try    {", "writeFile ( outFile ,    textetBytes (  \" UTF -  8  \"  )  )  ;", "}    catch    ( UnsupportedEncodiException   e )     {", "throw   new   RuntimeException ( e )  ;", "}", "}", "METHOD_END"], "methodName": ["writeFile"], "fileName": "com.badlogic.gdx.setup.GdxSetup"}, {"methodBody": ["METHOD_START", "{", "final   String   name    =    ui . form . nameText . getText (  )  . trim (  )  ;", "if    (  ( name . length (  )  )     =  =     0  )     {", "JOptionPane . showMessageDialog ( this ,     \" Please   enter   a   project   name .  \"  )  ;", "return ;", "}", "final   String   pack    =    ui . form . packageText . getText (  )  . trim (  )  ;", "if    (  ( pack . length (  )  )     =  =     0  )     {", "JOptionPane . showMessageDialog ( this ,     \" Please   enter   a   package   name .  \"  )  ;", "return ;", "}", "Pattern   pattern    =    Pattern . compile (  \"  [ a - z ]  [ a - z 0  -  9  _  ]  *  (  \\  \\  .  [ a - z 0  -  9  _  ]  +  )  +  [  0  -  9 a - z _  ]  \"  )  ;", "Matcher   matcher    =    pattern . matcher ( pack )  ;", "boolean   matches    =    matcher . matches (  )  ;", "if    (  ! matches )     {", "JOptionPane . showMessageDialog ( this ,     \" Invalid   package   name \"  )  ;", "return ;", "}", "final   String   clazz    =    ui . form . gameClassText . getText (  )  . trim (  )  ;", "if    (  ( clazz . length (  )  )     =  =     0  )     {", "JOptionPane . showMessageDialog ( this ,     \" Please   enter   a   game   class   name .  \"  )  ;", "return ;", "}", "final   Language   languageEnum    =     ( ui . settings . kotlinBox . isSelected (  )  )     ?    Language . KOTLIN    :    Language . JAVA ;", "final   String   destination    =    ui . form . destinationText . getText (  )  . trim (  )  ;", "if    (  ( destination . length (  )  )     =  =     0  )     {", "JOptionPane . showMessageDialog ( this ,     \" Please   enter   a   destination   directory .  \"  )  ;", "return ;", "}", "final   String   sdkLocation    =    ui . form . sdkLocationText . getText (  )  . trim (  )  ;", "if    (  (  ( sdkLocation . length (  )  )     =  =     0  )     &  &     ( modules . contains ( DependencyBank . ProjectType . ANDROID )  )  )     {", "JOptionPane . showMessageDialog ( this ,     \" Please   enter   your   Android   SDK ' s   path \"  )  ;", "return ;", "}", "if    (  (  !  (  . isSdkLocationValid ( sdkLocation )  )  )     &  &     ( modules . contains ( DependencyBank . ProjectType . ANDROID )  )  )     {", "JOptionPane . showMessageDialog ( this ,     \" Your   Android   SDK   path   doesn ' t   contain   an   SDK !    Please   install   the   Android   SDK ,    including   all   platforms   and   build   tools !  \"  )  ;", "return ;", "}", "if    (  ( modules . contains ( DependencyBank . ProjectType . HTML )  )     &  &     (  !  ( languageEnum . gwtSupported )  )  )     {", "JOptionPane . showMessageDialog ( this ,     \" HTML   sub - projects   are   not   supported   by   the   selected   programming   language .  \"  )  ;", "ui . form . gwtCheckBox . setSelected ( false )  ;", "modules . remove ( DependencyBank . ProjectType . HTML )  ;", "}", "if    ( modules . contains ( DependencyBank . ProjectType . ANDROID )  )     {", "if    (  !  (  . isSdkUpToDate ( sdkLocation )  )  )     {", "File   sdkLocationFile    =    new   File ( sdkLocation )  ;", "try    {", "if    ( System . getProperty (  \" os . name \"  )  . contains (  \" Windows \"  )  )     {", "String   replaced    =    sdkLocation . replace (  \"  \\  \\  \"  ,     \"  \\  \\  \\  \\  \"  )  ;", "Runtime . getRuntime (  )  . exec (  (  (  \"  \\  \"  \"     +    replaced )     +     \"  \\  \\ SDK   Manager . exe \\  \"  \"  )  )  ;", "} else    {", "File   sdkManager    =    new   File ( sdkLocation ,     \" tools / android \"  )  ;", "Runtime . getRuntime (  )  . exec ( new   String [  ]  {    sdkManager . getAbsolutePath (  )  ,     \" sdk \"     }  )  ;", "}", "}    catch    ( IOException   e )     {", "e . printStackTrace (  )  ;", "}", "return ;", "}", "}", "if    (  !  (  . isEmptyDirectory ( destination )  )  )     {", "int   value    =    JOptionPane . showConfirmDialog ( this ,     \" The   destination   is   not   empty ,    do   you   want   to   overwrite ?  \"  ,     \" Warning !  \"  ,    JOptionPane . YES _ NO _ OPTION )  ;", "if    ( value    !  =     0  )     {", "return ;", "}", "}", "List < String >    incompatList    =    builder . buildProject ( modules ,    dependencies )  ;", "if    (  ( incompatList . size (  )  )     =  =     0  )     {", "try    {", "builder . build ( languageEnum )  ;", "}    catch    ( IOException   e )     {", "e . printStackTrace (  )  ;", "}", "} else    {", "JPanel   panel    =    new   JPanel (  )  ;", "panel . setLayout ( new   BoxLayout ( panel ,    BoxLayout . Y _ AXIS )  )  ;", "for    ( String   subIncompat    :    incompatList )     {", "JLabel   label    =    new   JLabel ( subIncompat )  ;", "label . setAlignmentX ( Component . CENTER _ ALIGNMENT )  ;", "panel . add ( label )  ;", "}", "JLabel   infoLabel    =    new   JLabel (  \"  < html >  < br >  < br > The   project   can   be   generated ,    but   you   wont   be   able   to   use   these   extensions   in   the   respective   sub   modules < br > Please   see   the   link   to   learn   about   extensions <  / html >  \"  )  ;", "infoLabel . setAlignmentX ( Component . CENTER _ ALIGNMENT )  ;", "panel . add ( infoLabel )  ;", "JEditorPane   pane    =    new   JEditorPane (  \" text / html \"  ,     \"  < a   href =  \\  \" https :  /  / github . com / libgdx / libgdx / wiki / Dependency - management - with - Gradle \\  \"  > Dependency   Management <  / a >  \"  )  ;", "pane . addHyperlinkListener ( new   HyperlinkListener (  )     {", "@ Override", "public   void   hyperlinkUpdate ( HyperlinkEvent   e )     {", "if    ( e . getEventType (  )  . equals ( HyperlinkEvent . EventType . ACTIVATED )  )", "try    {", "getDesktop (  )  . browse ( new   URI ( e . getURL (  )  . toString (  )  )  )  ;", "}    catch    ( IOException   e 1  )     {", "e 1  . printStackTrace (  )  ;", "}    catch    ( URISyntaxException   e 1  )     {", "e 1  . printStackTrace (  )  ;", "}", "}", "}  )  ;", "pane . setEditable ( false )  ;", "pane . setOpaque ( false )  ;", "pane . setAlignmentX ( Component . CENTER _ ALIGNMENT )  ;", "panel . add ( pane )  ;", "Object [  ]    options    =    new   Object [  ]  {     \" Yes ,    build   it !  \"  ,     \" No ,    I ' ll   change   my   extensions \"     }  ;", "int   value    =    JOptionPane . showOptionDialog ( null ,    panel ,     \" Extension   Incompatibilities \"  ,    JOptionPane . YES _ NO _ OPTION ,    JOptionPane . QUESTION _ MESSAGE ,    null ,    options ,    null )  ;", "if    ( value    !  =     0  )     {", "return ;", "} else    {", "try    {", "builder . build ( languageEnum )  ;", "}    catch    ( IOException   e )     {", "e . printStackTrace (  )  ;", "}", "}", "}", "ui . generateButton . setEnabled ( false )  ;", "new   Thread (  )     {", "public   void   run (  )     {", "log (  (  \" Generating   app   in    \"     +    destination )  )  ;", "new    (  )  . build ( builder ,    destination ,    name ,    pack ,    clazz ,    languageEnum ,    sdkLocation ,    new   Executor . CharCallback (  )     {", "@ Override", "public   void   character ( char   c )     {", "log ( c )  ;", "}", "}  ,    ui . settings . getGradleArgs (  )  )  ;", "log (  \" Done !  \"  )  ;", "if    (  ( ui . settings . getGradleArgs (  )  . contains (  \" eclipse \"  )  )     |  |     ( ui . settings . getGradleArgs (  )  . contains (  \" idea \"  )  )  )     {", "log (  \" To   import   in   Eclipse :    File    -  >    Import    -  >    General    -  >    Existing   Projects   into   Workspace \"  )  ;", "log (  \" To   import   to   Intellij   IDEA :    File    -  >    Open    -  >    YourProject . ipr \"  )  ;", "} else    {", "log (  \" To   import   in   Eclipse :    File    -  >    Import    -  >    Gradle    -  >    Gradle   Project \"  )  ;", "log (  \" To   import   to   Intellij   IDEA :    File    -  >    Open    -  >    build . gradle \"  )  ;", "log (  \" To   import   to   NetBeans :    File    -  >    Open   Project .  .  .  \"  )  ;", "}", "SwingUtilities . invokeLater ( new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "ui . generateButton . setEnabled ( true )  ;", "}", "}  )  ;", "}", "}  . start (  )  ;", "}", "METHOD_END"], "methodName": ["generate"], "fileName": "com.badlogic.gdx.setup.GdxSetupUI"}, {"methodBody": ["METHOD_START", "{", "EventQueue . invokeLater ( new   Runnable (  )     {", "public   void   run (  )     {", "ui . textArea . append (  (  \"  \"     +    c )  )  ;", "ui . textAreaCaretPosition ( ui . textArea . getDocument (  )  . getLength (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["log"], "fileName": "com.badlogic.gdx.setup.GdxSetupUI"}, {"methodBody": ["METHOD_START", "{", "EventQueue . invokeLater ( new   Runnable (  )     {", "public   void   run (  )     {", "ui . textArea . append (  ( text    +     \"  \\ n \"  )  )  ;", "ui . textAreaCaretPosition ( ui . textArea . getDocument (  )  . getLength (  )  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["log"], "fileName": "com.badlogic.gdx.setup.GdxSetupUI"}, {"methodBody": ["METHOD_START", "{", "SwingUtilities . invokeLater ( new   Runnable (  )     {", "@ Override", "public   void   run (  )     {", "new    (  )  ;", "}", "}  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.badlogic.gdx.setup.GdxSetupUI"}, {"methodBody": ["METHOD_START", "{", "settingsFile    =    File . createTempFile (  \" libgdx - setup - settings \"  ,     \"  . gradle \"  )  ;", "buildFile    =    File . createTempFile (  \" libgdx - setup - build \"  ,     \"  . gradle \"  )  ;", "if    (  !  ( settingsFile . exists (  )  )  )     {", "settingsFile . createNewFile (  )  ;", "}", "if    (  !  ( buildFile . exists (  )  )  )     {", "buildFile . createNewFile (  )  ;", "}", "settingsFile . setWritable ( true )  ;", "buildFile . setWritable ( true )  ;", "try    {", "FileWriter   settingsWriter    =    new   FileWriter ( settingsFile . getAbsoluteFile (  )  )  ;", "BufferedWriter   settingsBw    =    new   BufferedWriter ( settingsWriter )  ;", "String   settingsContents    =     \" include    \"  ;", "for    ( DependencyBankType   module    :    modules )     {", "settingsContents    +  =     (  \"  '  \"     +     ( module . getName (  )  )  )     +     \"  '  \"  ;", "if    (  ( modules . indexOf ( module )  )     !  =     (  ( modules . size (  )  )     -     1  )  )     {", "settingsContents    +  =     \"  ,     \"  ;", "}", "}", "settingsBw . write ( settingsContents )  ;", "settingsBw . close (  )  ;", "settingsWriter . close (  )  ;", "FileWriter   buildWriter    =    new   FileWriter ( buildFile . getAbsoluteFile (  )  )  ;", "BufferedWriter   buildBw    =    new   BufferedWriter ( buildWriter )  ;", "BuildScriptHelper . addBuildScript ( language ,    modules ,    buildBw )  ;", "BuildScriptHelper . addAls ( buildBw )  ;", "for    ( DependencyBankType   module    :    modules )     {", "BuildScriptHelper . ad ( language ,    module ,    dependencies ,    buildBw )  ;", "}", "buildBw . write (  \"  \\ n \"  )  ;", "buildBw . write (  \" tasks . eclipse . doLast    {  \\ n \"  )  ;", "buildBw . write (  \"             delete    \\  \"  . project \\  \"  \\ n \"  )  ;", "buildBw . write (  \"  }  \"  )  ;", "buildBw . close (  )  ;", "buildWriter . close (  )  ;", "return   true ;", "}    catch    ( IOException   e )     {", "e . printStackTrace (  )  ;", "return   false ;", "}", "}", "METHOD_END"], "methodName": ["build"], "fileName": "com.badlogic.gdx.setup.ProjectBuilder"}, {"methodBody": ["METHOD_START", "{", "List < String >    incompatibilities    =    new   ArrayList < String >  (  )  ;", "for    ( Dependency   dep    :    dependencies )     {", "for    ( DependencyBankType   type    :    projects )     {", "dep . getDependencies ( type )  ;", "incompatibilities . addAll ( dep . getIncompatibilities ( type )  )  ;", "}", "}", "this . modules    =    projects ;", "this . dependencies    =    dependencies ;", "return   incompatibilities ;", "}", "METHOD_END"], "methodName": ["buildProject"], "fileName": "com.badlogic.gdx.setup.ProjectBuilder"}, {"methodBody": ["METHOD_START", "{", "settingsFile . deleteOnExit (  )  ;", "bFile . deleteOnExit (  )  ;", "}", "METHOD_END"], "methodName": ["cleanUp"], "fileName": "com.badlogic.gdx.setup.ProjectBuilder"}, {"methodBody": ["METHOD_START", "{", "List < String >    list    =    new   ArrayList < String >  (  )  ;", "list . add (  \"  -  - no - daemon \"  )  ;", "if    ( offlineBox . isSelected (  )  )     {", "list . add (  \"  -  - offline \"  )  ;", "}", "if    ( eclipseBox . isSelected (  )  )     {", "list . add (  \" eclipse \"  )  ;", "list . add (  \" afterEclipseImport \"  )  ;", "}", "if    ( ideaBox . isSelected (  )  )     {", "list . add (  \" idea \"  )  ;", "}", "return   list ;", "}", "METHOD_END"], "methodName": ["getGradleArgs"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "setVisible ( false )  ;", "restore (  )  ;", "}", "METHOD_END"], "methodName": ["onCancel"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "if    ( mavenTextField . getText (  )  . isEmpty (  )  )     {", "DependencyBank . mavenCentral    =     \" mavenCentral (  )  \"  ;", "} else    {", "DependencyBank . mavenCentral    =     (  \" maven    {    url    \\  \"  \"     +     ( mavenTextField . getText (  )  )  )     +     \"  \\  \"     }  \"  ;", "}", "Visible ( false )  ;", "}", "METHOD_END"], "methodName": ["onOK"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "mavenTextField . setText ( mavenSnapshot )  ;", "ideaBoSelected ( ideaSnapshot )  ;", "eclipseBoSelected ( eclipseSnapshot )  ;", "offlineBoSelected ( offlineSnapshot )  ;", "kotlinBoSelected ( kotlinSnapshot )  ;", "}", "METHOD_END"], "methodName": ["restore"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "takeSnapshot (  )  ;", "setVisible ( true )  ;", "if    ( gwtCheckBox . isSelected (  )  )     {", "kotlinBoSelected ( false )  ;", "kotlinSnapshot    =    false ;", "}", "}", "METHOD_END"], "methodName": ["showDialog"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "mavenSnapshot    =    mavenTextField . getText (  )  ;", "ideaSnapshot    =    ideaBox . isSelected (  )  ;", "eclipseSnapshot    =    eclipseBox . isSelected (  )  ;", "offlineSnapshot    =    offlineBox . isSelected (  )  ;", "kotlinSnapshot    =    kotlinBox . isSelected (  )  ;", "}", "METHOD_END"], "methodName": ["takeSnapshot"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "content    =    new   JPanel ( new   GridBagLayout (  )  )  ;", "content . setBorder ( BorderFactory . createEmptyBorder (  2  0  ,     2  0  ,     2  0  ,     2  0  )  )  ;", "bottomPanel    =    new   JPanel ( new   GridBagLayout (  )  )  ;", "buttonPanel    =    new   JPanel ( new   GridBagLayout (  )  )  ;", "buttonPanel . setBorder ( BorderFactory . createEmptyBorder (  5  ,     5  ,     5  ,     5  )  )  ;", "buttonOK    =    new   GdxSetupUI . SetupButton (  \" Save \"  )  ;", "buttonCancel    =    new   GdxSetupUI . SetupButton (  \" Cancel \"  )  ;", "buttonPanel . add ( buttonOK ,    new   GridBagConstraints (  0  ,     0  ,     1  ,     1  ,     0  ,     0  ,    GridBagConstraints . CENTER ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "buttonPanel . add ( buttonCancel ,    new   GridBagConstraints (  1  ,     0  ,     1  ,     1  ,     0  ,     0  ,    GridBagConstraints . CENTER ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "contentPane . add ( content ,    new   GridBagConstraints (  0  ,     0  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . BOTH ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "JLabel   settings    =    new   JLabel (  \"  \"  )  ;", "JLabel   description    =    new   JLabel (  \" Description \"  )  ;", "settings . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "description . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "settings . setHorizontalAlignment ( JLabel . CENTER )  ;", "description . setHorizontalAlignment ( JLabel . CENTER )  ;", "content . add ( settings ,    new   GridBagConstraints (  0  ,     0  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( description ,    new   GridBagConstraints (  3  ,     0  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "JLabel   mavenLabel    =    new   JLabel (  \" Maven   Mirror   Url \"  )  ;", "JLabel   mavenDesc    =    new   JLabel (  \" Replaces   Maven   Central   with   this   repository \"  )  ;", "mavenTextField    =    new   JTextField (  1  5  )  ;", "mavenTextField . setMinimumSize ( mavenTextField . getPreferredSize (  )  )  ;", "mavenLabel . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "mavenDesc . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "JLabel   ideaLabel    =    new   JLabel (  \" IDEA \"  )  ;", "JLabel   ideaDesc    =    new   JLabel (  \" Generates   Intellij   IDEA   project   files \"  )  ;", "ideaBox    =    new   GdxSetupUI . SetupCheckBox (  )  ;", "ideaLabel . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "ideaDesc . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "ideaBox . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "JLabel   eclipseLabel    =    new   JLabel (  \" Eclipse \"  )  ;", "JLabel   eclipseDesc    =    new   JLabel (  \" Generates   Eclipse   project   files \"  )  ;", "eclipseBox    =    new   GdxSetupUI . SetupCheckBox (  )  ;", "eclipseLabel . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "eclipseDesc . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "eclipseBox . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "JLabel   offlineLabel    =    new   JLabel (  \" Offline   Mode \"  )  ;", "JLabel   offlineDesc    =    new   JLabel (  \" Don ' t   force   download   dependencies \"  )  ;", "JLabel   kotlinLabel    =    new   JLabel (  \" Use   Kotlin \"  )  ;", "JLabel   kotlinDesc    =    new   JLabel (  \" Use   Kotlin   as   the   main   language .  \"  )  ;", "offlineBox    =    new   GdxSetupUI . SetupCheckBox (  )  ;", "offlineLabel . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "offlineDesc . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "offlineBox . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "kotlinBox    =    new   GdxSetupUI . SetupCheckBox (  )  ;", "kotlinBox . addActionListener ( new   ActionListener (  )     {", "@ Override", "public   void   actionPerformed ( ActionEvent   e )     {", "final   String   message    =     \" Using   Kotlin   with   the   HTML   backend   is   not   supported .    Do   you   want   to   disable   the   HTML   backend ?  \"  ;", "if    (  (  ( kotlinBox . isSelected (  )  )     &  &     ( gwtCheckBox . isSelected (  )  )  )     &  &     (  ( JOptionPane . showConfirmDialog ( kotlinBox ,    message ,     \" Warning !  \"  ,    JOptionPane . YES _ NO _ OPTION )  )     =  =     0  )  )     {", "gwtCheckBox . setSelected ( false )  ;", "} else", "if    ( gwtCheckBox . isSelected (  )  )     {", "kotlinBox . setSelected ( false )  ;", "}", "}", "}  )  ;", "offlineBox . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "kotlinLabel . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "kotlinDesc . setForeground ( new   Color (  1  7  0  ,     1  7  0  ,     1  7  0  )  )  ;", "JSeparator   separator    =    new   JSeparator (  )  ;", "separator . setForeground ( new   Color (  8  5  ,     8  5  ,     8  5  )  )  ;", "separator . setBackground ( new   Color (  8  5  ,     8  5  ,     8  5  )  )  ;", "content . add ( separator ,    new   GridBagConstraints (  0  ,     1  ,     4  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( mavenLabel ,    new   GridBagConstraints (  0  ,     2  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( mavenTextField ,    new   GridBagConstraints (  1  ,     2  ,     2  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( mavenDesc ,    new   GridBagConstraints (  3  ,     2  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( ideaLabel ,    new   GridBagConstraints (  0  ,     3  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( ideaBox ,    new   GridBagConstraints (  1  ,     3  ,     2  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( ideaDesc ,    new   GridBagConstraints (  3  ,     3  ,     2  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( eclipseLabel ,    new   GridBagConstraints (  0  ,     4  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( eclipseBox ,    new   GridBagConstraints (  1  ,     4  ,     2  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( eclipseDesc ,    new   GridBagConstraints (  3  ,     4  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( offlineLabel ,    new   GridBagConstraints (  0  ,     5  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( offlineBox ,    new   GridBagConstraints (  1  ,     5  ,     2  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( offlineDesc ,    new   GridBagConstraints (  3  ,     5  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( kotlinLabel ,    new   GridBagConstraints (  0  ,     6  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( kotlinBox ,    new   GridBagConstraints (  1  ,     6  ,     2  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "content . add ( kotlinDesc ,    new   GridBagConstraints (  3  ,     6  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . NORTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     1  5  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "String   text    =     \"  < p   style =  \\  \" font - size :  1  0  \\  \"  > Click   for   more   info   on   using   Gradle   without   IDE   integration <  / p >  \"  ;", "linkText    =    new   JLabel (  (  (  \"  < html >  \"     +    text )     +     \"  <  / html >  \"  )  )  ;", "bottomPanel . add ( linkText ,    new   GridBagConstraints (  0  ,     0  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . WEST ,    GridBagConstraints . NONE ,    new   Insets (  0  ,     1  0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "bottomPanel . add ( buttonPanel ,    new   GridBagConstraints (  3  ,     0  ,     1  ,     1  ,     1  ,     1  ,    GridBagConstraints . SOUTHEAST ,    GridBagConstraints . NONE ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "contentPane . add ( bottomPanel ,    new   GridBagConstraints (  0  ,     1  ,     4  ,     1  ,     1  ,     1  ,    GridBagConstraints . SOUTH ,    GridBagConstraints . HORIZONTAL ,    new   Insets (  0  ,     0  ,     0  ,     0  )  ,     0  ,     0  )  )  ;", "}", "METHOD_END"], "methodName": ["uiLayout"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "content . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "content . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "bottomPanel . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "bottomPanel . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "buttonPanel . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "buttonPanel . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "linkText . setForeground ( new   Color (  2  0  ,     1  5  0  ,     2  0  )  )  ;", "contentPane . setBackground ( new   Color (  3  6  ,     3  6  ,     3  6  )  )  ;", "Border   line    =    BorderFactory . createLineBorder ( new   Color (  8  0  ,     8  0  ,     8  0  )  )  ;", "Border   empty    =    new   EmptyBorder (  4  ,     4  ,     4  ,     4  )  ;", "CompoundBorder   border    =    new   CompoundBorder ( line ,    empty )  ;", "mavenTextField . setBorder ( border )  ;", "mavenTextField . setCaretColor ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "mavenTextField . setBackground ( new   Color (  4  6  ,     4  6  ,     4  6  )  )  ;", "mavenTextField . setForeground ( new   Color (  2  5  5  ,     2  5  5  ,     2  5  5  )  )  ;", "}", "METHOD_END"], "methodName": ["uiStyle"], "fileName": "com.badlogic.gdx.setup.SettingsDialog"}, {"methodBody": ["METHOD_START", "{", "properties . clear (  )  ;", "}", "METHOD_END"], "methodName": ["clear"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   properties . containsKey ( key )  ;", "}", "METHOD_END"], "methodName": ["contains"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "OutputStream   out    =    null ;", "try    {", "out    =    new   BufferedOutputStream ( new   FileOutputStream ( file )  )  ;", "properties . storeToXML ( out ,    null )  ;", "}    catch    ( Exception   ex )     {", "throw   new   RuntimeException (  (  \" Error   writing   p :     \"     +     ( file )  )  ,    ex )  ;", "}    finally    {", "if    ( out    !  =    null )", "try    {", "out . close (  )  ;", "}    catch    ( IOException   e )     {", "}", "}", "}", "METHOD_END"], "methodName": ["flush"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "Map < String ,    Object >    map    =    new   HashMap < String ,    Object >  (  )  ;", "for    ( Map . Entry < Object ,    Object >    val    :    properties . entry (  )  )     {", "if    (  ( val . getValue (  )  )    instanceof   Boolean )", "map . put (  (  ( String )     ( val . getKey (  )  )  )  ,     (  ( Boolean )     ( Boolean . parseBoolean (  (  ( String )     ( val . getValue (  )  )  )  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   Integer )", "map . put (  (  ( String )     ( val . getKey (  )  )  )  ,     (  ( Integer )     ( Integer . parseInt (  (  ( String )     ( val . getValue (  )  )  )  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   Long )", "map . put (  (  ( String )     ( val . getKey (  )  )  )  ,     (  ( Long )     ( Long . parseLong (  (  ( String )     ( val . getValue (  )  )  )  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   String )", "map . put (  (  ( String )     ( val . getKey (  )  )  )  ,     (  ( String )     ( val . getValue (  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   Float )", "map . put (  (  ( String )     ( val . getKey (  )  )  )  ,     (  ( Float )     ( Float . parseFloat (  (  ( String )     ( val . getValue (  )  )  )  )  )  )  )  ;", "}", "return   map ;", "}", "METHOD_END"], "methodName": ["get"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   getBoolean ( key ,    false )  ;", "}", "METHOD_END"], "methodName": ["getBoolean"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   Boolean . parseBoolean ( properties . getProperty ( key ,    Boolean . toString ( defValue )  )  )  ;", "}", "METHOD_END"], "methodName": ["getBoolean"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   getFloat ( key ,     0  )  ;", "}", "METHOD_END"], "methodName": ["getFloat"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   Float . parseFloat ( properties . getProperty ( key ,    Float . toString ( defValue )  )  )  ;", "}", "METHOD_END"], "methodName": ["getFloat"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   getInteger ( key ,     0  )  ;", "}", "METHOD_END"], "methodName": ["getInteger"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   Integer . parseInt ( properties . getProperty ( key ,    Integer . toString ( defValue )  )  )  ;", "}", "METHOD_END"], "methodName": ["getInteger"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   getLong ( key ,     0  )  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   Long . parseLong ( properties . getProperty ( key ,    Long . toString ( defValue )  )  )  ;", "}", "METHOD_END"], "methodName": ["getLong"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   getString ( key ,     \"  \"  )  ;", "}", "METHOD_END"], "methodName": ["getString"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "return   properties . getProperty ( key ,    defValue )  ;", "}", "METHOD_END"], "methodName": ["getString"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "for    ( Map . Entry < String ,     ?  >    val    :    vals . entrySet (  )  )     {", "if    (  ( val . getValue (  )  )    instanceof   Boolean )", "putBoolean ( val . getKey (  )  ,     (  ( Boolean )     ( val . getValue (  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   Integer )", "putInteger ( val . getKey (  )  ,     (  ( Integer )     ( val . getValue (  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   Long )", "putLong ( val . getKey (  )  ,     (  ( Long )     ( val . getValue (  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   String )", "putString ( val . getKey (  )  ,     (  ( String )     ( val . getValue (  )  )  )  )  ;", "if    (  ( val . getValue (  )  )    instanceof   Float )", "putFloat ( val . getKey (  )  ,     (  ( Float )     ( val . getValue (  )  )  )  )  ;", "}", "return   this ;", "}", "METHOD_END"], "methodName": ["put"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "properties . put ( key ,    Boolean . toString ( val )  )  ;", "rrn   this ;", "}", "METHOD_END"], "methodName": ["putBoolean"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "properties . put ( key ,    Float . toString ( val )  )  ;", "rrn   this ;", "}", "METHOD_END"], "methodName": ["putFloat"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "properties . put ( key ,    Integer . toString ( val )  )  ;", "rrn   this ;", "}", "METHOD_END"], "methodName": ["putInteger"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "properties . put ( key ,    Long . toString ( val )  )  ;", "rrn   this ;", "}", "METHOD_END"], "methodName": ["putLong"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "properties . put ( key ,    val )  ;", "rrn   this ;", "}", "METHOD_END"], "methodName": ["putString"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}, {"methodBody": ["METHOD_START", "{", "properties . remove ( key )  ;", "}", "METHOD_END"], "methodName": ["remove"], "fileName": "com.badlogic.gdx.setup.SetupPreferences"}]