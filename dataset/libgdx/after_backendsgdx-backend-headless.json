[{"methodBody": ["METHOD_START", "{", "synchronized ( runnables )     {", "for    ( int   i    =     ( runnables . size )     -     1  ;    i    >  =     0  ;    i -  -  )", "executedRunnables . add ( runnables . get ( i )  )  ;", "runnables . clear (  )  ;", "}", "if    (  ( executedRunnables . size )     =  =     0  )", "return   false ;", "for    ( int   i    =     ( executedRunnables . size )     -     1  ;    i    >  =     0  ;    i -  -  )", "executedRunnables . removeIndex ( i )  . run (  )  ;", "return   true ;", "}", "METHOD_END"], "methodName": ["executeRunnables"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessApplication"}, {"methodBody": ["METHOD_START", "{", "mainLoopThread    =    new   Thread (  \" HeadlessApplication \"  )     {", "@ Override", "public   void   run (  )     {", "try    {", "HeadlessApplication . this . mainLoop (  )  ;", "}    catch    ( Throwable   t )     {", "if    ( t   instanceof   RuntimeException )", "throw    (  ( RuntimeException )     ( t )  )  ;", "else", "throw   new   com . badlogic . gdx . utils . GdxRuntimeException ( t )  ;", "}", "}", "}  ;", "mainLoopThread . start (  )  ;", "}", "METHOD_END"], "methodName": ["initialize"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessApplication"}, {"methodBody": ["METHOD_START", "{", "Array < LifecycleListener >    lifecycleListeners    =    this . lifecycleListeners ;", "listener . create (  )  ;", "long   t    =     ( TimeUtils . nanoTime (  )  )     +     ( renderInterval )  ;", "if    (  ( renderInterval )     >  =     0  .  0 F )     {", "while    ( running )     {", "final   long   n    =    TimeUtils . nanoTime (  )  ;", "if    ( t    >    n )     {", "try    {", "Thread . sleep (  (  ( t    -    n )     /     1  0  0  0  0  0  0  )  )  ;", "}    catch    ( InterruptedExcep   e )     {", "}", "t    =     ( TimeUtils . nanoTime (  )  )     +     ( renderInterval )  ;", "} else", "t    =    n    +     ( renderInterval )  ;", "executeRunnables (  )  ;", "graphics . incrementFrameId (  )  ;", "listener . render (  )  ;", "graphics . updateTime (  )  ;", "if    (  !  ( running )  )", "break ;", "}", "}", "synchronized ( lifecycleListeners )     {", "for    ( LifecycleListener   listener    :    lifecycleListeners )     {", "listener . pause (  )  ;", "listener . dispose (  )  ;", "}", "}", "listener . pause (  )  ;", "listener . dispose (  )  ;", "}", "METHOD_END"], "methodName": ["mainLoop"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessApplication"}, {"methodBody": ["METHOD_START", "{", "if    (  ( file . getPath (  )  . length (  )  )     =  =     0  )", "return   new    ( new   File ( name )  ,    type )  ;", "return   new    ( new   File ( file ,    name )  ,    type )  ;", "}", "METHOD_END"], "methodName": ["child"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessFileHandle"}, {"methodBody": ["METHOD_START", "{", "if    (  ( type )     =  =     ( FileType . External )  )", "return   new   File ( s . externalPath ,    file . getPath (  )  )  ;", "if    (  ( type )     =  =     ( FileType . Local )  )", "return   new   File ( s . localPath ,    file . getPath (  )  )  ;", "return   file ;", "}", "METHOD_END"], "methodName": ["file"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessFileHandle"}, {"methodBody": ["METHOD_START", "{", "File   parent    =    file . getParentFile (  )  ;", "if    ( parent    =  =    null )     {", "if    (  ( type )     =  =     ( FileType . Absolute )  )", "parent    =    new   File (  \"  /  \"  )  ;", "else", "parent    =    new   File (  \"  \"  )  ;", "}", "return   new    ( parent ,    type )  ;", "}", "METHOD_END"], "methodName": ["parent"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessFileHandle"}, {"methodBody": ["METHOD_START", "{", "if    (  ( file . getPath (  )  . length (  )  )     =  =     0  )", "throw   new   com . badlogic . gdx . utils . GdxRuntimeException (  \" Cannot   get   the   sibling   of   the   root .  \"  )  ;", "return   new    ( new   File ( file . getParent (  )  ,    name )  ,    type )  ;", "}", "METHOD_END"], "methodName": ["sibling"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessFileHandle"}, {"methodBody": ["METHOD_START", "{", "GdxNativesLoader . load (  )  ;", "}", "METHOD_END"], "methodName": ["load"], "fileName": "com.badlogic.gdx.backends.headless.HeadlessNativesLoader"}, {"methodBody": ["METHOD_START", "{", "( frameId )  +  +  ;", "}", "METHOD_END"], "methodName": ["incrementFrameId"], "fileName": "com.badlogic.gdx.backends.headless.mock.graphics.MockGraphics"}, {"methodBody": ["METHOD_START", "{", "long   time    =    System . nanoTime (  )  ;", "deltaTime    =     ( time    -     ( lastTime )  )     /     1  .  0 E 9 F ;", "lastTime    =    time ;", "if    (  ( time    -     ( frameStart )  )     >  =     1  0  0  0  0  0  0  0  0  0  )     {", "fps    =    frames ;", "frames    =     0  ;", "frameStart    =    time ;", "}", "( frames )  +  +  ;", "}", "METHOD_END"], "methodName": ["updateTime"], "fileName": "com.badlogic.gdx.backends.headless.mock.graphics.MockGraphics"}]