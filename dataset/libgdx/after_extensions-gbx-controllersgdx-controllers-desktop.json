[{"methodBody": ["METHOD_START", "{", "listeners . add ( listener )  ;", "}", "METHOD_END"], "methodName": ["addListener"], "fileName": "com.badlogic.gdx.controllers.desktop.DesktopControllerManager"}, {"methodBody": ["METHOD_START", "{", "return   controllers ;", "}", "METHOD_END"], "methodName": ["getControllers"], "fileName": "com.badlogic.gdx.controllers.desktop.DesktopControllerManager"}, {"methodBody": ["METHOD_START", "{", "listeners . removeValue ( listener ,    true )  ;", "}", "METHOD_END"], "methodName": ["removeListener"], "fileName": "com.badlogic.gdx.controllers.desktop.DesktopControllerManager"}, {"methodBody": ["METHOD_START", "{", "new   NativeCodeGenerator (  )  . generate (  \" src /  \"  ,     \" bin /  \"  ,     \" jni /  \"  )  ;", "BuildConfig   buildConfig    =    new   BuildConfig (  \" gdx -  - desktop \"  )  ;", "String [  ]    windowsSrc    =    new   String [  ]  {     \"  *  . cpp \"  ,     \" ois - v 1  -  4 svn / src /  *  . cpp \"  ,     \" ois - v 1  -  4 svn / src / win 3  2  /  *  . cpp \"     }  ;", "String [  ]    linuxSrc    =    new   String [  ]  {     \"  *  . cpp \"  ,     \" ois - v 1  -  4 svn / src /  *  . cpp \"  ,     \" ois - v 1  -  4 svn / src / linux /  *  . cpp \"     }  ;", "String [  ]    mac 6  4 Src    =    new   String [  ]  {     \"  *  . cpp \"  ,     \" ois - v 1  -  4 svn / src /  *  . cpp \"  ,     \" ois - v 1  -  4 svn / src / mac /  *  . mm \"  ,     \" ois - v 1  -  4 svn / src / mac / MacHIDManager . cpp \"  ,     \" ois - v 1  -  4 svn / src / mac / MacJoyStick . cpp \"     }  ;", "String [  ]    includes    =    new   String [  ]  {     \" ois - v 1  -  4 svn / includes \"  ,     \" dinput /  \"     }  ;", "BuildTarget   win 3  2 home    =    BuildTarget . newDefaultTarget ( Windows ,    false )  ;", "win 3  2 home . buildFileName    =     \" build - windows 3  2 home . xml \"  ;", "win 3  2 home . excludeFromMasterBuildFile    =    true ;", "win 3  2 home . is 6  4 Bit    =    false ;", "win 3  2 home . compilerPrefix    =     \"  \"  ;", "win 3  2 home . cppIncludes    =    windowsSrc ;", "win 3  2 home . headerDirs    =    includes ;", "win 3  2 home . cIncludes    =    new   String [  0  ]  ;", "win 3  2 home . libraries    =     \"  - ldinput 8     - ldxguid \"  ;", "BuildTarget   win 3  2     =    BuildTarget . newDefaultTarget ( Windows ,    false )  ;", "win 3  2  . cppIncludes    =    windowsSrc ;", "win 3  2  . headerDirs    =    includes ;", "win 3  2  . libraries    =     \"  - ldinput 8     - ldxguid \"  ;", "BuildTarget   win 6  4     =    BuildTarget . newDefaultTarget ( Windows ,    true )  ;", "win 6  4  . cppIncludes    =    windowsSrc ;", "win 6  4  . headerDirs    =    includes ;", "win 6  4  . libraries    =     \"  - ldinput 8     - ldxguid \"  ;", "BuildTarget   lin 3  2     =    BuildTarget . newDefaultTarget ( Linux ,    false )  ;", "lin 3  2  . cppIncludes    =    linuxSrc ;", "lin 3  2  . headerDirs    =    includes ;", "lin 3  2  . libraries    =     \"  - lX 1  1  \"  ;", "BuildTarget   lin 6  4     =    BuildTarget . newDefaultTarget ( Linux ,    true )  ;", "lin 6  4  . cppIncludes    =    linuxSrc ;", "lin 6  4  . headerDirs    =    includes ;", "lin 6  4  . libraries    =     \"  - lX 1  1  \"  ;", "BuildTarget   mac    =    BuildTarget . newDefaultTarget ( MacOsX ,    false )  ;", "mac . cppIncludes    =    mac 6  4 Src ;", "mac . headerDirs    =    includes ;", "mac . cppFlags    +  =     \"     - x   objective - c +  +  \"  ;", "mac . libraries    =     \"  - framework   CoreServices    - framework   Carbon    - framework   IOKit    - framework   Cocoa \"  ;", "BuildTarget   mac 6  4     =    BuildTarget . newDefaultTarget ( MacOsX ,    true )  ;", "mac 6  4  . cppIncludes    =    mac 6  4 Src ;", "mac 6  4  . headerDirs    =    includes ;", "mac 6  4  . cppFlags    +  =     \"     - x   objective - c +  +  \"  ;", "mac 6  4  . libraries    =     \"  - framework   CoreServices    - framework   Carbon    - framework   IOKit    - framework   Cocoa \"  ;", "new   AntScriptGenerator (  )  . generate ( buildConfig ,    win 3  2 home ,    win 3  2  ,    win 6  4  ,    lin 3  2  ,    lin 6  4  ,    mac ,    mac 6  4  )  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.badlogic.gdx.controllers.desktop.DesktopControllersBuild"}, {"methodBody": ["METHOD_START", "{", "if    ( OisControllers . IS _ MAC )     {", "return    0  ;", "}", "try    {", "if    (  ( graphics . getType (  )  )     =  =     ( GraphicsType . JGLFW )  )", "return    (  ( Long )     ( graphics . getClass (  )  . getDeclaredMethod (  \" getWindow \"  )  . invoke ( null )  )  )  ;", "if    (  ( graphics . getType (  )  )     =  =     ( GraphicsType . LWJGL )  )     {", "if    ( app . getClass (  )  . getName (  )  . equals (  \" backends . lwjgl . LwjglCanvas \"  )  )     {", "Class   canvasClass    =    Class . forName (  \" backends . lwjgl . LwjglCanvas \"  )  ;", "Object   canvas    =    canvasClass . getDeclaredMethod (  \" getCanvas \"  )  . invoke ( app )  ;", "return    (  ( Long )     ( OisControllers . invokeMethod ( OisControllers . invokeMethod ( SwingUtilities . windowForComponent (  (  ( Component )     ( canvas )  )  )  ,     \" getPeer \"  )  ,     \" getHWnd \"  )  )  )  ;", "}", "Class   displayClass    =    Class . forName (  \" Display \"  )  ;", "Method   getImplementation    =    displayClass . getDeclaredMethod (  \" getImplementation \"  ,    new   Class [  0  ]  )  ;", "getImplementation . setAccessible ( true )  ;", "Object   display    =    getImplementation . invoke ( null ,     (  ( Object [  ]  )     ( null )  )  )  ;", "Field   field    =    display . getClass (  )  . getDeclaredField (  ( OisControllers . IS _ WINDOWS    ?     \" hwnd \"     :     \" parent _ window \"  )  )  ;", "field . setAccessible ( true )  ;", "return    (  ( Long )     ( field . get ( display )  )  )  ;", "}", "}    catch    ( Exception   ex )     {", "throw   new   RuntimeException (  \" Unable   to   get   window   handle .  \"  ,    ex )  ;", "}", "return    0  ;", "}", "METHOD_END"], "methodName": ["getWindowHandle"], "fileName": "com.badlogic.gdx.controllers.desktop.OisControllers"}, {"methodBody": ["METHOD_START", "{", "for    ( Method   m    :    object . getClass (  )  . getMethods (  )  )", "if    ( m . getName (  )  . equals ( methodName )  )", "return   m . invoke ( object )  ;", "throw   new   RuntimeException (  (  (  (  \" Could   not   find   method    '  \"     +    methodName )     +     \"  '    on   class :     \"  )     +     ( object . getClass (  )  )  )  )  ;", "}", "METHOD_END"], "methodName": ["invokeMethod"], "fileName": "com.badlogic.gdx.controllers.desktop.OisControllers"}, {"methodBody": ["METHOD_START", "{", "return   getInputSystemName ( inputManagerPtr )  ;", "}", "METHOD_END"], "methodName": ["getInputSystemName"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.Ois"}, {"methodBody": ["METHOD_START", "{", "return   joysticks ;", "}", "METHOD_END"], "methodName": ["getJoysticks"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.Ois"}, {"methodBody": ["METHOD_START", "{", "return   getVersionName ( inputManagerPtr )  ;", "}", "METHOD_END"], "methodName": ["getVersionName"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.Ois"}, {"methodBody": ["METHOD_START", "{", "return   getVersionNumber ( inputManagerPtr )  ;", "}", "METHOD_END"], "methodName": ["getVersionNumber"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.Ois"}, {"methodBody": ["METHOD_START", "{", "for    ( int   i    =     0  ,    n    =    joysticks . size (  )  ;    i    <    n ;    i +  +  )", "joysticks . get ( i )  . update (  )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.Ois"}, {"methodBody": ["METHOD_START", "{", "axes [ axisIndex ]     =     (  (  ( value    -     ( OisJoystick . MIN _ AXIS )  )     <  <     1  )     /     (  ( float )     (  ( OisJoystick . MAX _ AXIS )     -     ( OisJoystick . MIN _ AXIS )  )  )  )     -     1  ;", "if    (  ( listener )     !  =    null )", "listener . axisMoved ( this ,    axisIndex ,    axes [ axisIndex ]  )  ;", "}", "METHOD_END"], "methodName": ["axisMoved"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "buttons [ buttonIndex ]     =    true ;", "if    (  ( listener )     !  =    null )", "listener . buttonPressed ( this ,    buttonIndex )  ;", "}", "METHOD_END"], "methodName": ["buttonPressed"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "buttons [ buttonIndex ]     =    false ;", "if    (  ( listener )     !  =    null )", "listener . buttonReleased ( this ,    buttonIndex )  ;", "}", "METHOD_END"], "methodName": ["buttonReleased"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "if    (  ( axisIndex    <     0  )     |  |     ( axisIndex    >  =     ( axes . length )  )  )", "return    0  ;", "return   axes [ axisIndex ]  ;", "}", "METHOD_END"], "methodName": ["getAxis"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "return   getAxesCount ( joystickPtr )  ;", "}", "METHOD_END"], "methodName": ["getAxisCount"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "return   getButtonCount ( joystickPtr )  ;", "}", "METHOD_END"], "methodName": ["getButtonCount"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["getName"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "if    (  ( povIndex    <     0  )     |  |     ( povIndex    >  =     ( povs . length )  )  )", "return    . OisPov . Centered ;", "switch    ( povs [ povIndex ]  )     {", "case    0     :", "return    . OisPov . Centered ;", "case    1     :", "return    . OisPov . North ;", "case    1  6     :", "return    . OisPov . South ;", "case    2  5  6     :", "return    . OisPov . East ;", "case    4  0  9  6     :", "return    . OisPov . West ;", "case    2  5  7     :", "return    . OisPov . NorthEast ;", "case    2  7  2     :", "return    . OisPov . SouthEast ;", "case    4  0  9  7     :", "return    . OisPov . NorthWest ;", "case    4  1  1  2     :", "return    . OisPov . SouthWest ;", "default    :", "throw   new   RuntimeException (  (  \" Unexpected   POV   value   reported   by   OIS :     \"     +     ( povs [ povIndex ]  )  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["getPov"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "return   getPovCount ( joystickPtr )  ;", "}", "METHOD_END"], "methodName": ["getPovCount"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "return   getSliderCount ( joystickPtr )  ;", "}", "METHOD_END"], "methodName": ["getSliderCount"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sliderIndex    <     0  )     |  |     ( sliderIndex    >  =     ( slidersX . length )  )  )", "return   false ;", "return   slidersX [ sliderIndex ]  ;", "}", "METHOD_END"], "methodName": ["getSliderX"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "if    (  ( sliderIndex    <     0  )     |  |     ( sliderIndex    >  =     ( slidersY . length )  )  )", "return   false ;", "return   slidersY [ sliderIndex ]  ;", "}", "METHOD_END"], "methodName": ["getSliderY"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "if    (  ( buttonIndex    <     0  )     |  |     ( buttonIndex    >  =     ( buttons . length )  )  )", "return   false ;", "return   buttons [ buttonIndex ]  ;", "}", "METHOD_END"], "methodName": ["isButtonPressed"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "povs [ povIndex ]     =    value ;", "if    (  ( listener )     !  =    null )", "listener . povMoved ( this ,    povIndex ,    getPov ( povIndex )  )  ;", "}", "METHOD_END"], "methodName": ["povMoved"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "this . listener    =    listener ;", "}", "METHOD_END"], "methodName": ["setListener"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "boolean   xChanged    =     ( slidersX [ sliderIndex ]  )     !  =     ( x    =  =     1  )  ;", "boolean   yChanged    =     ( slidersY [ sliderIndex ]  )     !  =     ( y    =  =     1  )  ;", "slidersX [ sliderIndex ]     =    x    =  =     1  ;", "slidersY [ sliderIndex ]     =    y    =  =     1  ;", "if    (  ( listener )     !  =    null )     {", "if    ( xChanged )", "listener . xSliderMoved ( this ,    sliderIndex ,     ( x    =  =     1  )  )  ;", "if    ( yChanged )", "listener . ySliderMoved ( this ,    sliderIndex ,     ( y    =  =     1  )  )  ;", "}", "}", "METHOD_END"], "methodName": ["sliderMoved"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "return   name ;", "}", "METHOD_END"], "methodName": ["toString"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "update ( joystickPtr ,    this )  ;", "}", "METHOD_END"], "methodName": ["update"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisJoystick"}, {"methodBody": ["METHOD_START", "{", "DesktopControllersBuild . main ( null )  ;", "new   SharedLibraryLoader (  \" libs / gdx -  - desktop - natives . jar \"  )  . load (  \" gdx -  - desktop \"  )  ;", "ApplicationAdapter   app    =    new   ApplicationAdapter (  )     {", "Ois   ois ;", "public   void   create (  )     {", "ois    =    new   Ois ( OisControllers . getWindowHandle (  )  )  ;", "if    (  ( ois . getJoysticks (  )  . size (  )  )     >     0  )     {", "ois . getJoysticks (  )  . get (  0  )  . setListener ( new   OisListener (  )     {", "@ Override", "public   void   xSliderMoved ( OisJoystick   joystick ,    int   slider ,    boolean   value )     {", "System . out . println (  (  (  (  \" xSliderMoved :     \"     +    slider )     +     \"  ,     \"  )     +    value )  )  ;", "}", "@ Override", "public   void   ySliderMoved ( OisJoystick   joystick ,    int   slider ,    boolean   value )     {", "System . out . println (  (  (  (  \" ySliderMoved :     \"     +    slider )     +     \"  ,     \"  )     +    value )  )  ;", "}", "@ Override", "public   void   povMoved ( OisJoystick   joystick ,    int   pov ,    OisJoystick . OisPov   value )     {", "System . out . println (  (  (  (  \" povMoved :     \"     +    pov )     +     \"  ,     \"  )     +    value )  )  ;", "}", "@ Override", "public   void   buttonReleased ( OisJoystick   joystick ,    int   button )     {", "System . out . println (  (  \" buttonReleased :     \"     +    button )  )  ;", "}", "@ Override", "public   void   buttonPressed ( OisJoystick   joystick ,    int   button )     {", "System . out . println (  (  \" buttonPressed :     \"     +    button )  )  ;", "}", "@ Override", "public   void   axisMoved ( OisJoystick   joystick ,    int   axis ,    float   value )     {", "System . out . println (  (  (  (  \" axisMoved :     \"     +    axis )     +     \"  ,     \"  )     +    value )  )  ;", "}", "}  )  ;", "}", "}", "public   void   render (  )     {", "ois . update (  )  ;", "}", "}  ;", "}", "METHOD_END"], "methodName": ["main"], "fileName": "com.badlogic.gdx.controllers.desktop.ois.OisTest"}]